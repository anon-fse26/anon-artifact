WARNING: The requested image's platform (linux/amd64) does not match the detected host platform (linux/arm64/v8) and no specific platform was requested
Running CPAchecker with Java heap of size 10000M.
Running CPAchecker with default stack size (1024k). Specify a larger value with --stack if needed.
Language C detected and set for analysis (CPAMain.detectFrontendLanguageIfNecessary, INFO)

CPAchecker 4.0 / terminationAnalysis (OpenJDK 64-Bit Server VM 17.0.15) started (CPAchecker.run, INFO)

Parsing CFA from file(s) "Benchmarks/TermCOMP/C/Di_Stefano_20/formation-noarray_true-termination/formation-noarray_true-termination.c" (CPAchecker.parse, INFO)

Undefined function __VERIFIER_assume found, first called in line 683 (CheckBindingVisitor.visit, WARNING)

Using Restarting Algorithm (CoreComponentsFactory.createAlgorithm, INFO)

The following configuration options were specified but are not used:
 cpa.arg.lateMerge
 counterexample.export.exportWitness 
 (CPAchecker.printConfigurationWarnings, WARNING)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Loading analysis 1 from file /cpachecker/config/components/combinations-parallel-termination.properties ... (RestartAlgorithm.run, INFO)

Using the following resource limits: Thread CPU-time limit of 300s (Analysis /cpachecker/config/components/combinations-parallel-termination.properties:Parallel analysis 1:ResourceLimitChecker.fromConfiguration, INFO)

Using predicate analysis with MathSAT5 version 5.6.10 (9293adc746be) (May 31 2023 12:38:06, gmp 6.2.0, gcc 7.5.0, 64-bit, reentrant) and JFactory 1.21. (Analysis /cpachecker/config/components/combinations-parallel-termination.properties:Parallel analysis 1:PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (Analysis /cpachecker/config/components/combinations-parallel-termination.properties:Parallel analysis 1:PredicateCPA:PredicateCPARefiner.<init>, INFO)

Warning: Skipping one analysis because the configuration file /cpachecker/config/components/combinations-parallel-termination.properties is invalid (TerminationAlgorithm needs a TerminationCPA) (CPAs.retrieveCPAOrFail, WARNING)

Loading analysis 1 from file /cpachecker/config/components/termination-recursion.properties ... (RestartAlgorithm.run, INFO)

Mismatch of configuration options when loading from '/cpachecker/config/components/termination-recursion.properties': 'termination.config' has two values 'terminationAnalysis.properties' and 'termination-recursion.properties'. Using 'termination-recursion.properties'. (NestingAlgorithm.checkConfigs, INFO)

Using unsound approximation of ints with unbounded integers and floats with rationals for encoding program semantics. (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:FormulaManagerView.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.6.10 (9293adc746be) (May 31 2023 12:38:06, gmp 6.2.0, gcc 7.5.0, 64-bit, reentrant) and JFactory 1.21. (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:PredicateCPARefiner.<init>, INFO)

Using unsound approximation of ints with unbounded integers and floats with rationals for encoding program semantics. (Analysis /cpachecker/config/components/termination-recursion.properties:FormulaManagerView.<init>, WARNING)

Starting analysis 1 ... (RestartAlgorithm.run, INFO)

Starting termination algorithm. (Analysis /cpachecker/config/components/termination-recursion.properties:TerminationAlgorithm.run0, INFO)

line 831: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_0); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Assuming external function __VERIFIER_assume to be a pure function. (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Cannot get declaration of function __VERIFIER_assume, ignoring calls to it. (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 834: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_1); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 837: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_2); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 907: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(firstAgent < 3); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 706: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_1); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 707: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_4); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 895: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_2); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 880: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_2); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 881: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_5 == 9); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 683: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_1); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 684: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_4); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 870: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_2); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 871: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_5 < 9); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 860: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_2); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 861: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_5 == 0); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 850: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_2); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 851: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_5 > 0); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 764: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(guessedcomp < 3); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 765: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_0 > 0); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 767: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(guessedkey < 2); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 768: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_1 == 1); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 726: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(guessedcomp < 3); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 727: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_0 > 0); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 729: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(guessedkey < 2); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 730: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_1 == 1); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 831: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_0); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

Assuming external function __VERIFIER_assume to be a pure function. (Analysis /cpachecker/config/components/termination-recursion.properties:ExpressionToFormulaVisitor.visit, INFO)

Cannot get declaration of function __VERIFIER_assume, ignoring calls to it. (Analysis /cpachecker/config/components/termination-recursion.properties:ExpressionToFormulaVisitor.visit, WARNING)

line 834: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_1); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

line 837: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_2); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

line 726: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(guessedcomp < 3); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

line 727: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_0 > 0); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

line 729: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(guessedkey < 2); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

line 730: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_1 == 1); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

Shutdown requested (The JVM is shutting down, probably because Ctrl+C was pressed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The JVM is shutting down, probably because Ctrl+C was pressed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)


Restart Algorithm statistics
----------------------------
Number of algorithms provided:    2
Number of algorithms used:        1
Last algorithm used:        /cpachecker/config/components/combinations-parallel-termination.properties
Total time for algorithm 1:   896.799s

PredicateCPA statistics
-----------------------
Number of abstractions:            3061 (0% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            2691 (88%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         370 (12%)
  Times precision was empty:       151 (5%)
  Times precision was {false}:     150 (5%)
  Times result was cached:         1470 (48%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      1290 (42%)
  Times result was 'false':        716 (23%)
Number of strengthen sat checks:   0
Number of coverage checks:         752946
  BDD entailment checks:           10362
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       312
Avg ABE block size:                                60.16 (sum: 184162, count: 3061, min: 0, max: 312)
Number of predicates discovered:          88
Number of abstraction locations:          6
Max number of predicates per location:    46
Avg number of predicates per location:    22
Total predicates per abstraction:         71097
Max number of predicates per abstraction: 46
Avg number of predicates per abstraction: 49.37
Number of irrelevant predicates:          4909 (7%)
Number of preds handled by boolean abs:   29188 (41%)
  Total number of models for allsat:      1192877
  Max number of models for allsat:        57197
  Avg number of models for allsat:        924.71

Time for post operator:                                4.221s
  Time for path formula creation:                      4.094s
Time for strengthen operator:                          0.579s
Time for prec operator:                              853.779s
  Time for abstraction:                853.490s (Max:    55.504s, Count: 3061)
    Boolean abstraction:               848.111s
    Solving time:                        4.383s (Max:     0.021s)
    Model enumeration time:            843.879s
    Time for BDD construction:          40.469s (Max:     0.152s)
Time for merge operator:                               0.627s
Time for coverage checks:                              0.122s
  Time for BDD entailment checks:                      0.073s
Total time for SMT solver (w/o itp):   848.265s

Number of path formula cache hits:   663826 (77%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     3.618s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               291183
Size of BDD node table:                            466043
Size of BDD cache:                                 46619
Size of BDD node cleanup queue:                    1.81 (sum: 141671, count: 78441, min: 0, max: 7443)
Time for BDD node cleanup:                             0.017s
Time for BDD garbage collection:                       0.442s (in 174 runs)

KeyValue statistics
-------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (NonTerminationLabelAutomaton) statistics
-----------------------------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.435s
Automaton transfers with branching:                0
Automaton transfer successors:                     1.00 (sum: 763856, count: 763856, min: 1, max: 1) [1 x 763856]
Number of states with assumption transitions:      0

AutomatonAnalysis (TerminatingFunctions) statistics
---------------------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.203s
Automaton transfers with branching:                0
Automaton transfer successors:                     1.00 (sum: 763856, count: 763856, min: 1, max: 1) [1 x 763856]
Number of states with assumption transitions:      0

Termination Algorithm statistics
--------------------------------
Total time :                                          895.594s
Time for recursion analysis:                            0.000s

Number of analysed loops:                               1 (20%)
Total time for loop analysis:                         895.588s
  Avg time per loop analysis:                         895.588s
  Max time per loop analysis:                         895.588s

Number of safety analysis runs:                         2
  Avg safety analysis run per loop:                     2.00
  Max safety analysis run per loop:                     2 	 for loops [N748]
Total time for safety analysis:                       888.163s
  Avg time per safety analysis run:                   444.081s
  Max time per safety analysis run:                   886.288s

Number of analysed lassos:                              1
  Avg number of lassos per loop:                        1.00
  Max number of lassos per loop:                        1 	 for loops [N748]
  Avg number of lassos per iteration:                   1.00
  Max number of lassos per iteration:                   1

Total time for lassos analysis:                         7.392s
  Avg time per iteration:                               7.392s
  Max time per iteration:                               7.392s
  Time for lassos construction:                         4.098s
    Avg time for lasso construction per iteration:      4.098s
    Max time for lasso construction per iteration:      4.098s
      Time for stem and loop construction:                         0.134s
        Avg time for stem and loop construction per iteration:      0.134s
        Max time for stem and loop construction per iteration:      0.134s
      Time for lassos creation:                         3.962s
        Avg time for lassos creation per iteration:      3.962s
        Max time for lassos creation per iteration:      3.962s
  Total time for non-termination analysis:              0.661s
    Avg time for non-termination analysis per lasso:    0.661s
    Max time for non-termination analysis per lasso:    0.661s
  Total time for termination analysis:                  2.633s
    Avg time for termination analysis per lasso:        2.633s
    Max time for termination analysis per lasso:        2.633s

Total number of termination arguments:                  1
  Avg termination arguments per loop:                   1.00
  Max termination arguments per loop:                   1 	 for loops [N748]

  affine:                                               1

Counterexample-Check Algorithm statistics
-----------------------------------------
Number of counterexample checks:    0

Termination Algorithm statistics
--------------------------------
Total time :                                          895.594s
Time for recursion analysis:                            0.000s

Number of analysed loops:                               1 (20%)
Total time for loop analysis:                         895.588s
  Avg time per loop analysis:                         895.588s
  Max time per loop analysis:                         895.588s

Number of safety analysis runs:                         2
  Avg safety analysis run per loop:                     2.00
  Max safety analysis run per loop:                     2 	 for loops [N748]
Total time for safety analysis:                       888.163s
  Avg time per safety analysis run:                   444.081s
  Max time per safety analysis run:                   886.288s

Number of analysed lassos:                              1
  Avg number of lassos per loop:                        1.00
  Max number of lassos per loop:                        1 	 for loops [N748]
  Avg number of lassos per iteration:                   1.00
  Max number of lassos per iteration:                   1

Total time for lassos analysis:                         7.392s
  Avg time per iteration:                               7.392s
  Max time per iteration:                               7.392s
  Time for lassos construction:                         4.098s
    Avg time for lasso construction per iteration:      4.098s
    Max time for lasso construction per iteration:      4.098s
      Time for stem and loop construction:                         0.134s
        Avg time for stem and loop construction per iteration:      0.134s
        Max time for stem and loop construction per iteration:      0.134s
      Time for lassos creation:                         3.962s
        Avg time for lassos creation per iteration:      3.962s
        Max time for lassos creation per iteration:      3.962s
  Total time for non-termination analysis:              0.661s
    Avg time for non-termination analysis per lasso:    0.661s
    Max time for non-termination analysis per lasso:    0.661s
  Total time for termination analysis:                  2.633s
    Avg time for termination analysis per lasso:        2.633s
    Max time for termination analysis per lasso:        2.633s

Total number of termination arguments:                  1
  Avg termination arguments per loop:                   1.00
  Max termination arguments per loop:                   1 	 for loops [N748]

  affine:                                               1

Counterexample-Check Algorithm statistics
-----------------------------------------
Number of counterexample checks:    0

Code Coverage
-----------------------------
  Function coverage:      0.943
  Visited lines:          535
  Total lines:            538
  Line coverage:          0.994
  Visited conditions:     328
  Total conditions:       336
  Condition coverage:     0.976

CPAchecker general statistics
-----------------------------
Number of program locations:                       1055
Number of CFA edges (per node):                        1326 (count: 1055, min: 0, max: 28, avg: 1.26)
Number of relevant variables:                      248
Number of functions:                               35
Number of loops (and loop nodes):                         5 (sum: 177, min: 11, max: 89, avg: 35.40)
Size of reached set:             73832
  Number of reached locations:   837 (79%)
    Avg states per location:     88
    Max states per location:     1296 (at node N9)
  Number of reached functions:   33 (94%)
  Number of partitions:          837
    Avg size of partitions:      88
    Max size of partitions:      1296 (with key N9)
  Number of target states:       0
  Size of final wait list:       120

Time for analysis setup:          1.726s
  Time for loading CPAs:          0.017s
  Time for loading parser:        0.210s
  Time for CFA construction:      1.458s
    Time for parsing file(s):     0.393s
    Time for AST to CFA:          0.502s
    Time for CFA sanity check:    0.088s
    Time for post-processing:     0.342s
    Time for loop structure:      0.018s
    Time for AST structure:       0.000s
    Time for CFA export:          0.728s
      Time for function pointers resolving:            0.006s
        Function calls via function pointers:             0 (count: 1, min: 0, max: 0, avg: 0.00)
        Instrumented function pointer calls:              0 (count: 1, min: 0, max: 0, avg: 0.00)
        Function calls with function pointer arguments:        0 (count: 1, min: 0, max: 0, avg: 0.00)
        Instrumented function pointer arguments:          0 (count: 1, min: 0, max: 0, avg: 0.00)
      Time for classifying variables:                  0.216s
        Time for collecting variables:                 0.153s
        Time for solving dependencies:                 0.004s
        Time for building hierarchy:                   0.000s
        Time for building classification:              0.049s
        Time for exporting data:                       0.010s
Time for Analysis:              896.800s
CPU time for analysis:          922.720s
Total time for CPAchecker:      898.536s
Total CPU time for CPAchecker:  925.760s
Time for statistics:              0.539s

Time for Garbage Collector:       1.141s (in 467 runs)
Garbage Collector(s) used:    PS MarkSweep, PS Scavenge
Used heap memory:                524MB (   499 MiB) max;    276MB (   264 MiB) avg;    545MB (   519 MiB) peak
Used non-heap memory:             67MB (    64 MiB) max;     65MB (    62 MiB) avg;     68MB (    65 MiB) peak
Used in PS Old Gen pool:         314MB (   300 MiB) max;    209MB (   199 MiB) avg;    314MB (   300 MiB) peak
Allocated heap memory:           667MB (   637 MiB) max;    549MB (   523 MiB) avg
Allocated non-heap memory:        69MB (    66 MiB) max;     69MB (    66 MiB) avg
Total process virtual memory:  15515MB ( 14796 MiB) max;  15443MB ( 14727 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
Graphical representation included in the file "./output/Report.html".
Runtime: 904340 milliseconds