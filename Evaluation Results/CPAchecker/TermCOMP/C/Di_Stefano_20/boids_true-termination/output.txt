WARNING: The requested image's platform (linux/amd64) does not match the detected host platform (linux/arm64/v8) and no specific platform was requested
Running CPAchecker with Java heap of size 10000M.
Running CPAchecker with default stack size (1024k). Specify a larger value with --stack if needed.
Language C detected and set for analysis (CPAMain.detectFrontendLanguageIfNecessary, INFO)

CPAchecker 4.0 / terminationAnalysis (OpenJDK 64-Bit Server VM 17.0.15) started (CPAchecker.run, INFO)

Parsing CFA from file(s) "Benchmarks/TermCOMP/C/Di_Stefano_20/boids_true-termination/boids_true-termination.c" (CPAchecker.parse, INFO)

Undefined function __VERIFIER_assume found, first called in line 90 (CheckBindingVisitor.visit, WARNING)

Using Restarting Algorithm (CoreComponentsFactory.createAlgorithm, INFO)

The following configuration options were specified but are not used:
 cpa.arg.lateMerge
 counterexample.export.exportWitness 
 (CPAchecker.printConfigurationWarnings, WARNING)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Loading analysis 1 from file /cpachecker/config/components/combinations-parallel-termination.properties ... (RestartAlgorithm.run, INFO)

Using the following resource limits: Thread CPU-time limit of 300s (Analysis /cpachecker/config/components/combinations-parallel-termination.properties:Parallel analysis 1:ResourceLimitChecker.fromConfiguration, INFO)

Using predicate analysis with MathSAT5 version 5.6.10 (9293adc746be) (May 31 2023 12:38:06, gmp 6.2.0, gcc 7.5.0, 64-bit, reentrant) and JFactory 1.21. (Analysis /cpachecker/config/components/combinations-parallel-termination.properties:Parallel analysis 1:PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (Analysis /cpachecker/config/components/combinations-parallel-termination.properties:Parallel analysis 1:PredicateCPA:PredicateCPARefiner.<init>, INFO)

Warning: Skipping one analysis because the configuration file /cpachecker/config/components/combinations-parallel-termination.properties is invalid (TerminationAlgorithm needs a TerminationCPA) (CPAs.retrieveCPAOrFail, WARNING)

Loading analysis 1 from file /cpachecker/config/components/termination-recursion.properties ... (RestartAlgorithm.run, INFO)

Mismatch of configuration options when loading from '/cpachecker/config/components/termination-recursion.properties': 'termination.config' has two values 'terminationAnalysis.properties' and 'termination-recursion.properties'. Using 'termination-recursion.properties'. (NestingAlgorithm.checkConfigs, INFO)

Using unsound approximation of ints with unbounded integers and floats with rationals for encoding program semantics. (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:FormulaManagerView.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.6.10 (9293adc746be) (May 31 2023 12:38:06, gmp 6.2.0, gcc 7.5.0, 64-bit, reentrant) and JFactory 1.21. (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:PredicateCPARefiner.<init>, INFO)

Using unsound approximation of ints with unbounded integers and floats with rationals for encoding program semantics. (Analysis /cpachecker/config/components/termination-recursion.properties:FormulaManagerView.<init>, WARNING)

Starting analysis 1 ... (RestartAlgorithm.run, INFO)

Starting termination algorithm. (Analysis /cpachecker/config/components/termination-recursion.properties:TerminationAlgorithm.run0, INFO)

line 206: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((_Lvalue[0][0]) == 1); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Assuming external function __VERIFIER_assume to be a pure function. (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Cannot get declaration of function __VERIFIER_assume, ignoring calls to it. (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 207: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((_Lvalue[1][0]) == 1); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 208: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((_Lvalue[2][0]) == 1); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 209: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((_Lvalue[0][1]) == 0); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 210: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((_Lvalue[1][1]) == 1); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 211: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((_Lvalue[2][1]) == 2); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 212: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((_Lvalue[0][2]) == -1); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 213: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((_Lvalue[1][2]) == -1); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 214: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((_Lvalue[2][2]) == -1); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 215: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((_Lvalue[0][3]) == -1); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 216: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((_Lvalue[1][3]) == -1); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 217: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((_Lvalue[2][3]) == -1); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 218: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_0); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 219: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_1); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 220: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_2); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 221: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_3); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 222: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_4); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 223: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_5); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 224: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_6); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 225: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_7); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 226: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_8); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 227: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_9); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 228: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_10); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 229: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_11); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Warning: Could not extract lasso (Loop with heads [N204]
  incoming: [lines 186-189:	N203 -{j = 0;}-> N204]
  outgoing: [line 186:	N204 -{[!(j < 2)]}-> N207]
  nodes:    [N204, N205, N206, N208]
). (Unknown sort in equality) (Analysis /cpachecker/config/components/termination-recursion.properties:InequalityConverter.convert, WARNING)

Could not synthesize a termination or non-termination argument. (Analysis /cpachecker/config/components/termination-recursion.properties:TerminationAlgorithm.proveLoopTermination, WARNING)

line 90: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_0); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 91: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_1); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 341: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_0); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 322: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((Lvalue[tid][1]) != tid); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 98: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_0); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 99: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_1); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 328: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_0); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 312: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_0); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 313: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_1 <= 5); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 316: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_2); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 301: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_0 > 5); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 306: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_2); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 293: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_0); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 294: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_1 <= 5); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 284: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_0 > 5); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 273: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((Lvalue[tid][1]) == tid); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 146: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(guessedcomp < 3); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 147: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((HoutCnt[guessedcomp]) > 0); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 149: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(guessedkey < 6); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 150: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((Hout[guessedcomp][guessedkey]) == 1); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 108: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(guessedcomp < 3); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 109: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((HinCnt[guessedcomp]) > 0); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 111: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(guessedkey < 6); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 112: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((Hin[guessedcomp][guessedkey]) == 1); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 206: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((_Lvalue[0][0]) == 1); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

Assuming external function __VERIFIER_assume to be a pure function. (Analysis /cpachecker/config/components/termination-recursion.properties:ExpressionToFormulaVisitor.visit, INFO)

Cannot get declaration of function __VERIFIER_assume, ignoring calls to it. (Analysis /cpachecker/config/components/termination-recursion.properties:ExpressionToFormulaVisitor.visit, WARNING)

line 207: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((_Lvalue[1][0]) == 1); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

line 208: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((_Lvalue[2][0]) == 1); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

line 209: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((_Lvalue[0][1]) == 0); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

line 210: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((_Lvalue[1][1]) == 1); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

line 211: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((_Lvalue[2][1]) == 2); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

line 212: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((_Lvalue[0][2]) == -1); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

line 213: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((_Lvalue[1][2]) == -1); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

line 214: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((_Lvalue[2][2]) == -1); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

line 215: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((_Lvalue[0][3]) == -1); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

line 216: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((_Lvalue[1][3]) == -1); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

line 217: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((_Lvalue[2][3]) == -1); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

line 218: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_0); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

line 219: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_1); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

line 220: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_2); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

line 221: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_3); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

line 222: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_4); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

line 223: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_5); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

line 224: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_6); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

line 225: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_7); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

line 226: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_8); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

line 227: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_9); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

line 228: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_10); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

line 229: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_11); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

Warning: Could not extract lasso (Loop with heads [N332]
  incoming: [lines 252-255:	N331 -{j = 0;}-> N332]
  outgoing: [line 252:	N332 -{[!(j < 1)]}-> N335]
  nodes:    [N332, N333, N334, N336]
). (Unknown sort in equality) (Analysis /cpachecker/config/components/termination-recursion.properties:InequalityConverter.convert, WARNING)

Could not synthesize a termination or non-termination argument. (Analysis /cpachecker/config/components/termination-recursion.properties:TerminationAlgorithm.proveLoopTermination, WARNING)

Warning: Could not extract lasso (Loop with heads [N338]
  incoming: [lines 257-260:	N337 -{j = 0;}-> N338]
  outgoing: [line 257:	N338 -{[!(j < 2)]}-> N341]
  nodes:    [N338, N339, N340, N342]
). (Unknown sort in equality) (Analysis /cpachecker/config/components/termination-recursion.properties:InequalityConverter.convert, WARNING)

Could not synthesize a termination or non-termination argument. (Analysis /cpachecker/config/components/termination-recursion.properties:TerminationAlgorithm.proveLoopTermination, WARNING)

Shutdown requested (The JVM is shutting down, probably because Ctrl+C was pressed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The JVM is shutting down, probably because Ctrl+C was pressed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)


Restart Algorithm statistics
----------------------------
Number of algorithms provided:    2
Number of algorithms used:        1
Last algorithm used:        /cpachecker/config/components/combinations-parallel-termination.properties
Total time for algorithm 1:   896.944s

PredicateCPA statistics
-----------------------
Number of abstractions:            1189 (4% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            1151 (97%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         38 (3%)
  Times precision was empty:       245 (21%)
  Times precision was {false}:     139 (12%)
  Times result was cached:         332 (28%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      473 (40%)
  Times result was 'false':        317 (27%)
Number of strengthen sat checks:   0
Number of coverage checks:         23280
  BDD entailment checks:           1977
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       133
Avg ABE block size:                                16.90 (sum: 20090, count: 1189, min: 0, max: 133)
Number of predicates discovered:          10
Number of abstraction locations:          7
Max number of predicates per location:    5
Avg number of predicates per location:    2
Total predicates per abstraction:         3332
Max number of predicates per abstraction: 9
Avg number of predicates per abstraction: 5.44
Number of irrelevant predicates:          732 (22%)
Number of preds handled by boolean abs:   1751 (53%)
  Total number of models for allsat:      1365
  Max number of models for allsat:        21
  Avg number of models for allsat:        2.89

Time for post operator:                                1.975s
  Time for path formula creation:                      1.957s
Time for strengthen operator:                          0.046s
Time for prec operator:                                1.479s
  Time for abstraction:                  1.388s (Max:     0.039s, Count: 1189)
    Boolean abstraction:                 0.506s
    Solving time:                        0.412s (Max:     0.020s)
    Model enumeration time:              0.261s
    Time for BDD construction:           0.057s (Max:     0.002s)
Time for merge operator:                               0.081s
Time for coverage checks:                              0.028s
  Time for BDD entailment checks:                      0.021s
Total time for SMT solver (w/o itp):     0.673s

Number of path formula cache hits:   22816 (63%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     1.894s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               2215
Size of BDD node table:                            466043
Size of BDD cache:                                 46619
Size of BDD node cleanup queue:                    0.25 (sum: 1547, count: 6294, min: 0, max: 396)
Time for BDD node cleanup:                             0.005s
Time for BDD garbage collection:                       0.000s (in 0 runs)

KeyValue statistics
-------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (NonTerminationLabelAutomaton) statistics
-----------------------------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.094s
Automaton transfers with branching:                0
Automaton transfer successors:                     1.00 (sum: 33349, count: 33349, min: 1, max: 1) [1 x 33349]
Number of states with assumption transitions:      0

AutomatonAnalysis (TerminatingFunctions) statistics
---------------------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.018s
Automaton transfers with branching:                0
Automaton transfer successors:                     1.00 (sum: 33349, count: 33349, min: 1, max: 1) [1 x 33349]
Number of states with assumption transitions:      0

Termination Algorithm statistics
--------------------------------
Total time :                                          895.722s
Time for recursion analysis:                            0.000s

Number of analysed loops:                               4 (33%)
Total time for loop analysis:                         895.716s
  Avg time per loop analysis:                         223.929s
  Max time per loop analysis:                         485.295s

Number of safety analysis runs:                         7
  Avg safety analysis run per loop:                     1.75
  Max safety analysis run per loop:                     2 	 for loops [N204], [N332], [N338]
Total time for safety analysis:                       355.007s
  Avg time per safety analysis run:                    50.715s
  Max time per safety analysis run:                   203.139s

Number of analysed lassos:                              0
  Avg number of lassos per loop:                        0.00
  Max number of lassos per loop:                        0 	 for loops 
  Avg number of lassos per iteration:                   0.00
  Max number of lassos per iteration:                   0

Total time for lassos analysis:                       540.669s
  Avg time per iteration:                             180.223s
  Max time per iteration:                             281.986s
  Time for lassos construction:                       540.669s
    Avg time for lasso construction per iteration:    180.223s
    Max time for lasso construction per iteration:    281.986s
      Time for stem and loop construction:                         0.299s
        Avg time for stem and loop construction per iteration:      0.099s
        Max time for stem and loop construction per iteration:      0.136s
      Time for lassos creation:                       540.333s
        Avg time for lassos creation per iteration:    180.111s
        Max time for lassos creation per iteration:    281.841s
  Total time for non-termination analysis:              0.000s
    Avg time for non-termination analysis per lasso:    0.000s
    Max time for non-termination analysis per lasso:    0.000s
  Total time for termination analysis:                  0.000s
    Avg time for termination analysis per lasso:        0.000s
    Max time for termination analysis per lasso:        0.000s

Total number of termination arguments:                  0
  Avg termination arguments per loop:                   0.00
  Max termination arguments per loop:                   0 	 for loops 


Counterexample-Check Algorithm statistics
-----------------------------------------
Number of counterexample checks:    0

Termination Algorithm statistics
--------------------------------
Total time :                                          895.722s
Time for recursion analysis:                            0.000s

Number of analysed loops:                               4 (33%)
Total time for loop analysis:                         895.716s
  Avg time per loop analysis:                         223.929s
  Max time per loop analysis:                         485.295s

Number of safety analysis runs:                         7
  Avg safety analysis run per loop:                     1.75
  Max safety analysis run per loop:                     2 	 for loops [N204], [N332], [N338]
Total time for safety analysis:                       355.007s
  Avg time per safety analysis run:                    50.715s
  Max time per safety analysis run:                   203.139s

Number of analysed lassos:                              0
  Avg number of lassos per loop:                        0.00
  Max number of lassos per loop:                        0 	 for loops 
  Avg number of lassos per iteration:                   0.00
  Max number of lassos per iteration:                   0

Total time for lassos analysis:                       540.669s
  Avg time per iteration:                             180.223s
  Max time per iteration:                             281.986s
  Time for lassos construction:                       540.669s
    Avg time for lasso construction per iteration:    180.223s
    Max time for lasso construction per iteration:    281.986s
      Time for stem and loop construction:                         0.299s
        Avg time for stem and loop construction per iteration:      0.099s
        Max time for stem and loop construction per iteration:      0.136s
      Time for lassos creation:                       540.333s
        Avg time for lassos creation per iteration:    180.111s
        Max time for lassos creation per iteration:    281.841s
  Total time for non-termination analysis:              0.000s
    Avg time for non-termination analysis per lasso:    0.000s
    Max time for non-termination analysis per lasso:    0.000s
  Total time for termination analysis:                  0.000s
    Avg time for termination analysis per lasso:        0.000s
    Max time for termination analysis per lasso:        0.000s

Total number of termination arguments:                  0
  Avg termination arguments per loop:                   0.00
  Max termination arguments per loop:                   0 	 for loops 


Counterexample-Check Algorithm statistics
-----------------------------------------
Number of counterexample checks:    0

Code Coverage
-----------------------------
  Function coverage:      0.136
  Visited lines:          106
  Total lines:            301
  Line coverage:          0.352
  Visited conditions:     62
  Total conditions:       172
  Condition coverage:     0.360

CPAchecker general statistics
-----------------------------
Number of program locations:                       556
Number of CFA edges (per node):                         689 (count: 556, min: 0, max: 21, avg: 1.24)
Number of relevant variables:                      114
Number of functions:                               22
Number of loops (and loop nodes):                        12 (sum: 186, min: 4, max: 50, avg: 15.50)
Size of reached set:             413
  Number of reached locations:   149 (27%)
    Avg states per location:     2
    Max states per location:     38 (at node N17)
  Number of reached functions:   3 (14%)
  Number of partitions:          149
    Avg size of partitions:      2
    Max size of partitions:      38 (with key N17)
  Number of target states:       1
  Size of final wait list:       9

Time for analysis setup:          1.594s
  Time for loading CPAs:          0.016s
  Time for loading parser:        0.210s
  Time for CFA construction:      1.321s
    Time for parsing file(s):     0.380s
    Time for AST to CFA:          0.404s
    Time for CFA sanity check:    0.094s
    Time for post-processing:     0.323s
    Time for loop structure:      0.024s
    Time for AST structure:       0.000s
    Time for CFA export:          0.675s
      Time for function pointers resolving:            0.005s
        Function calls via function pointers:             0 (count: 1, min: 0, max: 0, avg: 0.00)
        Instrumented function pointer calls:              0 (count: 1, min: 0, max: 0, avg: 0.00)
        Function calls with function pointer arguments:        0 (count: 1, min: 0, max: 0, avg: 0.00)
        Instrumented function pointer arguments:          0 (count: 1, min: 0, max: 0, avg: 0.00)
      Time for classifying variables:                  0.196s
        Time for collecting variables:                 0.144s
        Time for solving dependencies:                 0.002s
        Time for building hierarchy:                   0.001s
        Time for building classification:              0.040s
        Time for exporting data:                       0.009s
Time for Analysis:              896.946s
CPU time for analysis:          964.840s
Total time for CPAchecker:      898.550s
Total CPU time for CPAchecker:  967.630s
Time for statistics:              0.174s

Time for Garbage Collector:       8.534s (in 5232 runs)
Garbage Collector(s) used:    PS MarkSweep, PS Scavenge
Used heap memory:                397MB (   379 MiB) max;    168MB (   160 MiB) avg;    414MB (   395 MiB) peak
Used non-heap memory:             70MB (    67 MiB) max;     67MB (    64 MiB) avg;     71MB (    68 MiB) peak
Used in PS Old Gen pool:         269MB (   256 MiB) max;    117MB (   112 MiB) avg;    269MB (   256 MiB) peak
Allocated heap memory:           411MB (   392 MiB) max;    331MB (   316 MiB) avg
Allocated non-heap memory:        73MB (    70 MiB) max;     71MB (    67 MiB) avg
Total process virtual memory:  15331MB ( 14621 MiB) max;  15185MB ( 14481 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
Graphical representation included in the file "./output/Report.html".
Runtime: 901179 milliseconds