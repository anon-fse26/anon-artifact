WARNING: The requested image's platform (linux/amd64) does not match the detected host platform (linux/arm64/v8) and no specific platform was requested
Running CPAchecker with Java heap of size 10000M.
Running CPAchecker with default stack size (1024k). Specify a larger value with --stack if needed.
Language C detected and set for analysis (CPAMain.detectFrontendLanguageIfNecessary, INFO)

CPAchecker 4.0 / terminationAnalysis (OpenJDK 64-Bit Server VM 17.0.15) started (CPAchecker.run, INFO)

Parsing CFA from file(s) "Benchmarks/TermCOMP/C/Di_Stefano_20/majority_true-termination/majority_true-termination.c" (CPAchecker.parse, INFO)

Undefined function __VERIFIER_assume found, first called in line 37 (CheckBindingVisitor.visit, WARNING)

Using Restarting Algorithm (CoreComponentsFactory.createAlgorithm, INFO)

The following configuration options were specified but are not used:
 cpa.arg.lateMerge
 counterexample.export.exportWitness 
 (CPAchecker.printConfigurationWarnings, WARNING)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Loading analysis 1 from file /cpachecker/config/components/combinations-parallel-termination.properties ... (RestartAlgorithm.run, INFO)

Using the following resource limits: Thread CPU-time limit of 300s (Analysis /cpachecker/config/components/combinations-parallel-termination.properties:Parallel analysis 1:ResourceLimitChecker.fromConfiguration, INFO)

Using predicate analysis with MathSAT5 version 5.6.10 (9293adc746be) (May 31 2023 12:38:06, gmp 6.2.0, gcc 7.5.0, 64-bit, reentrant) and JFactory 1.21. (Analysis /cpachecker/config/components/combinations-parallel-termination.properties:Parallel analysis 1:PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (Analysis /cpachecker/config/components/combinations-parallel-termination.properties:Parallel analysis 1:PredicateCPA:PredicateCPARefiner.<init>, INFO)

Warning: Skipping one analysis because the configuration file /cpachecker/config/components/combinations-parallel-termination.properties is invalid (TerminationAlgorithm needs a TerminationCPA) (CPAs.retrieveCPAOrFail, WARNING)

Loading analysis 1 from file /cpachecker/config/components/termination-recursion.properties ... (RestartAlgorithm.run, INFO)

Mismatch of configuration options when loading from '/cpachecker/config/components/termination-recursion.properties': 'termination.config' has two values 'terminationAnalysis.properties' and 'termination-recursion.properties'. Using 'termination-recursion.properties'. (NestingAlgorithm.checkConfigs, INFO)

Using unsound approximation of ints with unbounded integers and floats with rationals for encoding program semantics. (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:FormulaManagerView.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.6.10 (9293adc746be) (May 31 2023 12:38:06, gmp 6.2.0, gcc 7.5.0, 64-bit, reentrant) and JFactory 1.21. (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:PredicateCPARefiner.<init>, INFO)

Using unsound approximation of ints with unbounded integers and floats with rationals for encoding program semantics. (Analysis /cpachecker/config/components/termination-recursion.properties:FormulaManagerView.<init>, WARNING)

Starting analysis 1 ... (RestartAlgorithm.run, INFO)

Starting termination algorithm. (Analysis /cpachecker/config/components/termination-recursion.properties:TerminationAlgorithm.run0, INFO)

line 37: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_4); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Assuming external function __VERIFIER_assume to be a pure function. (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Cannot get declaration of function __VERIFIER_assume, ignoring calls to it. (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 38: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_9); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 39: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_14); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 40: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((_E[0]) == -1); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 41: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((_E[1]) == 0); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 42: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((_E[2]) == -1); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 43: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((_E[3]) == -1); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 44: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((_I[0][0]) == 0); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 45: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((_I[1][0]) == 0); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 46: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((_I[2][0]) == 1); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 37: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_4); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

Assuming external function __VERIFIER_assume to be a pure function. (Analysis /cpachecker/config/components/termination-recursion.properties:ExpressionToFormulaVisitor.visit, INFO)

Cannot get declaration of function __VERIFIER_assume, ignoring calls to it. (Analysis /cpachecker/config/components/termination-recursion.properties:ExpressionToFormulaVisitor.visit, WARNING)

line 38: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_9); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

line 39: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_14); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

line 40: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((_E[0]) == -1); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

line 41: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((_E[1]) == 0); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

line 42: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((_E[2]) == -1); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

line 43: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((_E[3]) == -1); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

line 44: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((_I[0][0]) == 0); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

line 45: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((_I[1][0]) == 0); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

line 46: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((_I[2][0]) == 1); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

Warning: Could not extract lasso (Loop with heads [N56]
  incoming: [lines 47-50:	N55 -{i = 0;}-> N56]
  outgoing: [line 47:	N56 -{[!(i < 4)]}-> N59]
  nodes:    [N56, N57, N58, N60]
). (Unknown sort in equality) (Analysis /cpachecker/config/components/termination-recursion.properties:InequalityConverter.convert, WARNING)

Could not synthesize a termination or non-termination argument. (Analysis /cpachecker/config/components/termination-recursion.properties:TerminationAlgorithm.proveLoopTermination, WARNING)

line 205: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(newagent < 3); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 207: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(firstAgent < 3); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 190: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((E[0]) != tid); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 191: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((E[1]) == 1); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 192: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_0); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 184: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_4); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 169: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((E[0]) != tid); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 170: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((E[1]) == 1); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 171: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_0); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 163: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_4); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 148: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((E[0]) != tid); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 149: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((E[1]) == 1); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 150: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_0); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 142: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_4); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 125: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((E[0]) != tid); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 126: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((E[1]) == 1); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 127: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_0); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 104: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((E[1]) == 3); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 112: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_4); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 88: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((E[0]) != tid); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 89: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((E[1]) == 0); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 90: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((I[tid][0]) != 2); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 98: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_4); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 79: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_0); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 80: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_1); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 73: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_4); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Warning: Could not extract lasso (Loop with heads [N67]
  incoming: [lines 54-57:	N66 -{j = 0;}-> N67]
  outgoing: [line 54:	N67 -{[!(j < 1)]}-> N70]
  nodes:    [N67, N68, N69, N71]
). (Unknown sort in equality) (Analysis /cpachecker/config/components/termination-recursion.properties:InequalityConverter.convert, WARNING)

Could not synthesize a termination or non-termination argument. (Analysis /cpachecker/config/components/termination-recursion.properties:TerminationAlgorithm.proveLoopTermination, WARNING)

Warning: Could not extract lasso (Loop with heads [N73]
  incoming: [lines 59-62:	N72 -{j = 0;}-> N73]
  outgoing: [line 59:	N73 -{[!(j < 1)]}-> N76]
  nodes:    [N73, N74, N75, N77]
). (Unknown sort in equality) (Analysis /cpachecker/config/components/termination-recursion.properties:InequalityConverter.convert, WARNING)

Could not synthesize a termination or non-termination argument. (Analysis /cpachecker/config/components/termination-recursion.properties:TerminationAlgorithm.proveLoopTermination, WARNING)

Warning: Could not extract lasso (Loop with heads [N62]
  incoming: [lines 52-64:	N61 -{i = 0;}-> N62]
  outgoing: [line 52:	N62 -{[!(i < 3)]}-> N65]
  nodes:    [N62, N63, N64, N66, N67, N68, N69, N70, N71, N72, N73, N74, N75, N76, N77]
). (Unknown sort in equality) (Analysis /cpachecker/config/components/termination-recursion.properties:InequalityConverter.convert, WARNING)

Could not synthesize a termination or non-termination argument. (Analysis /cpachecker/config/components/termination-recursion.properties:TerminationAlgorithm.proveLoopTermination, WARNING)

line 205: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(newagent < 3); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

line 207: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(firstAgent < 3); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

Warning: Could not extract lasso (Loop with heads [N292]
  incoming: [line 202:	N291 -{while}-> N292]
  outgoing: [line 264:	N354 -{[(I[1][0]) == 0]}-> N353, line 264:	N358 -{[(I[1][0]) == 2]}-> N353]
  nodes:    [N292, N293, N295, N296, N297, N298, N299, N300, N301, N303, N304, N305, N307, N308, N309, N311, N312, N313, N315, N316, N317, N319, N320, N321, N323, N324, N325, N327, N328, N329, N331, N332, N333, N335, N336, N337, N339, N340, N341, N343, N344, N345, N347, N348, N349, N351, N352, N354, N355, N356, N357, N358]
). (Unknown sort in equality) (Analysis /cpachecker/config/components/termination-recursion.properties:InequalityConverter.convert, WARNING)

Could not synthesize a termination or non-termination argument. (Analysis /cpachecker/config/components/termination-recursion.properties:TerminationAlgorithm.proveLoopTermination, WARNING)

Termination algorithm did not find a non-terminating loop. (Analysis /cpachecker/config/components/termination-recursion.properties:TerminationAlgorithm.run0, INFO)

Analysis 1 terminated, but result is unsound. (RestartAlgorithm.run, INFO)

No further configuration available. (RestartAlgorithm.run, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

Analysis incomplete: no errors found, but not everything could be checked. (CPAchecker.analyzeResult, WARNING)


Restart Algorithm statistics
----------------------------
Number of algorithms provided:    2
Number of algorithms used:        1
Last algorithm used:        /cpachecker/config/components/combinations-parallel-termination.properties
Total time for algorithm 1:    32.483s

PredicateCPA statistics
-----------------------
Number of abstractions:            522 (3% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            492 (94%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         30 (6%)
  Times precision was empty:       136 (26%)
  Times precision was {false}:     81 (16%)
  Times result was cached:         158 (30%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      147 (28%)
  Times result was 'false':        106 (20%)
Number of strengthen sat checks:   0
Number of coverage checks:         6099
  BDD entailment checks:           399
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       56
Avg ABE block size:                                7.91 (sum: 4128, count: 522, min: 0, max: 56)
Number of predicates discovered:          6
Number of abstraction locations:          5
Max number of predicates per location:    4
Avg number of predicates per location:    3
Total predicates per abstraction:         776
Max number of predicates per abstraction: 4
Avg number of predicates per abstraction: 3.40
Number of irrelevant predicates:          215 (28%)
Number of preds handled by boolean abs:   284 (37%)
  Total number of models for allsat:      295
  Max number of models for allsat:        6
  Avg number of models for allsat:        2.01

Time for post operator:                                1.493s
  Time for path formula creation:                      1.474s
Time for strengthen operator:                          0.035s
Time for prec operator:                                1.291s
  Time for abstraction:                  1.233s (Max:     0.137s, Count: 522)
    Boolean abstraction:                 0.089s
    Solving time:                        0.760s (Max:     0.133s)
    Model enumeration time:              0.035s
    Time for BDD construction:           0.014s (Max:     0.001s)
Time for merge operator:                               0.129s
Time for coverage checks:                              0.014s
  Time for BDD entailment checks:                      0.009s
Total time for SMT solver (w/o itp):     0.795s

Number of path formula cache hits:   5121 (28%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     1.427s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               301
Size of BDD node table:                            466043
Size of BDD cache:                                 46619
Size of BDD node cleanup queue:                    0.18 (sum: 374, count: 2052, min: 0, max: 125)
Time for BDD node cleanup:                             0.004s
Time for BDD garbage collection:                       0.000s (in 0 runs)

KeyValue statistics
-------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (NonTerminationLabelAutomaton) statistics
-----------------------------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.070s
Automaton transfers with branching:                0
Automaton transfer successors:                     1.00 (sum: 16948, count: 16948, min: 1, max: 1) [1 x 16948]
Number of states with assumption transitions:      0

AutomatonAnalysis (TerminatingFunctions) statistics
---------------------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.016s
Automaton transfers with branching:                0
Automaton transfer successors:                     1.00 (sum: 16948, count: 16948, min: 1, max: 1) [1 x 16948]
Number of states with assumption transitions:      0

Termination Algorithm statistics
--------------------------------
Total time :                                           31.252s
Time for recursion analysis:                            0.000s

Number of analysed loops:                               5 (100%)
Total time for loop analysis:                          31.246s
  Avg time per loop analysis:                           6.249s
  Max time per loop analysis:                          24.314s

Number of safety analysis runs:                        10
  Avg safety analysis run per loop:                     2.00
  Max safety analysis run per loop:                     2 	 for loops [N292], [N56], [N73], [N67], [N62]
Total time for safety analysis:                        25.613s
  Avg time per safety analysis run:                     2.561s
  Max time per safety analysis run:                    22.198s

Number of analysed lassos:                              0
  Avg number of lassos per loop:                        0.00
  Max number of lassos per loop:                        0 	 for loops 
  Avg number of lassos per iteration:                   0.00
  Max number of lassos per iteration:                   0

Total time for lassos analysis:                         5.598s
  Avg time per iteration:                               1.119s
  Max time per iteration:                               2.164s
  Time for lassos construction:                         5.598s
    Avg time for lasso construction per iteration:      1.119s
    Max time for lasso construction per iteration:      2.164s
      Time for stem and loop construction:                         0.214s
        Avg time for stem and loop construction per iteration:      0.042s
        Max time for stem and loop construction per iteration:      0.063s
      Time for lassos creation:                         5.348s
        Avg time for lassos creation per iteration:      1.069s
        Max time for lassos creation per iteration:      2.081s
  Total time for non-termination analysis:              0.000s
    Avg time for non-termination analysis per lasso:    0.000s
    Max time for non-termination analysis per lasso:    0.000s
  Total time for termination analysis:                  0.000s
    Avg time for termination analysis per lasso:        0.000s
    Max time for termination analysis per lasso:        0.000s

Total number of termination arguments:                  0
  Avg termination arguments per loop:                   0.00
  Max termination arguments per loop:                   0 	 for loops 


Counterexample-Check Algorithm statistics
-----------------------------------------
Number of counterexample checks:    0

Termination Algorithm statistics
--------------------------------
Total time :                                           31.252s
Time for recursion analysis:                            0.000s

Number of analysed loops:                               5 (100%)
Total time for loop analysis:                          31.246s
  Avg time per loop analysis:                           6.249s
  Max time per loop analysis:                          24.314s

Number of safety analysis runs:                        10
  Avg safety analysis run per loop:                     2.00
  Max safety analysis run per loop:                     2 	 for loops [N292], [N56], [N73], [N67], [N62]
Total time for safety analysis:                        25.613s
  Avg time per safety analysis run:                     2.561s
  Max time per safety analysis run:                    22.198s

Number of analysed lassos:                              0
  Avg number of lassos per loop:                        0.00
  Max number of lassos per loop:                        0 	 for loops 
  Avg number of lassos per iteration:                   0.00
  Max number of lassos per iteration:                   0

Total time for lassos analysis:                         5.598s
  Avg time per iteration:                               1.119s
  Max time per iteration:                               2.164s
  Time for lassos construction:                         5.598s
    Avg time for lasso construction per iteration:      1.119s
    Max time for lasso construction per iteration:      2.164s
      Time for stem and loop construction:                         0.214s
        Avg time for stem and loop construction per iteration:      0.042s
        Max time for stem and loop construction per iteration:      0.063s
      Time for lassos creation:                         5.348s
        Avg time for lassos creation per iteration:      1.069s
        Max time for lassos creation per iteration:      2.081s
  Total time for non-termination analysis:              0.000s
    Avg time for non-termination analysis per lasso:    0.000s
    Max time for non-termination analysis per lasso:    0.000s
  Total time for termination analysis:                  0.000s
    Avg time for termination analysis per lasso:        0.000s
    Max time for termination analysis per lasso:        0.000s

Total number of termination arguments:                  0
  Avg termination arguments per loop:                   0.00
  Max termination arguments per loop:                   0 	 for loops 


Counterexample-Check Algorithm statistics
-----------------------------------------
Number of counterexample checks:    0

Code Coverage
-----------------------------
  Function coverage:      1.000
  Visited lines:          171
  Total lines:            171
  Line coverage:          1.000
  Visited conditions:     176
  Total conditions:       176
  Condition coverage:     1.000

CPAchecker general statistics
-----------------------------
Number of program locations:                       371
Number of CFA edges (per node):                         476 (count: 371, min: 0, max: 15, avg: 1.28)
Number of relevant variables:                      68
Number of functions:                               16
Number of loops (and loop nodes):                         5 (sum: 79, min: 4, max: 52, avg: 15.80)
Size of reached set:             1032
  Number of reached locations:   304 (82%)
    Avg states per location:     3
    Max states per location:     45 (at node N5)
  Number of reached functions:   16 (100%)
  Number of partitions:          304
    Avg size of partitions:      3
    Max size of partitions:      45 (with key N5)
  Number of target states:       0

Time for analysis setup:          1.451s
  Time for loading CPAs:          0.018s
  Time for loading parser:        0.215s
  Time for CFA construction:      1.172s
    Time for parsing file(s):     0.324s
    Time for AST to CFA:          0.407s
    Time for CFA sanity check:    0.073s
    Time for post-processing:     0.257s
    Time for loop structure:      0.012s
    Time for AST structure:       0.000s
    Time for CFA export:          0.599s
      Time for function pointers resolving:            0.005s
        Function calls via function pointers:             0 (count: 1, min: 0, max: 0, avg: 0.00)
        Instrumented function pointer calls:              0 (count: 1, min: 0, max: 0, avg: 0.00)
        Function calls with function pointer arguments:        0 (count: 1, min: 0, max: 0, avg: 0.00)
        Instrumented function pointer arguments:          0 (count: 1, min: 0, max: 0, avg: 0.00)
      Time for classifying variables:                  0.149s
        Time for collecting variables:                 0.099s
        Time for solving dependencies:                 0.004s
        Time for building hierarchy:                   0.001s
        Time for building classification:              0.040s
        Time for exporting data:                       0.005s
Time for Analysis:               32.488s
CPU time for analysis:           50.060s
Time for analyzing result:        0.003s
Total time for CPAchecker:       33.952s
Total CPU time for CPAchecker:   52.620s
Time for statistics:              0.175s

Time for Garbage Collector:       0.156s (in 36 runs)
Garbage Collector(s) used:    PS MarkSweep, PS Scavenge
Used heap memory:                 99MB (    95 MiB) max;     58MB (    55 MiB) avg;    117MB (   111 MiB) peak
Used non-heap memory:             66MB (    63 MiB) max;     59MB (    56 MiB) avg;     68MB (    65 MiB) peak
Used in PS Old Gen pool:          38MB (    36 MiB) max;     29MB (    28 MiB) avg;     38MB (    36 MiB) peak
Allocated heap memory:           263MB (   251 MiB) max;    244MB (   233 MiB) avg
Allocated non-heap memory:        69MB (    66 MiB) max;     62MB (    59 MiB) avg
Total process virtual memory:  15460MB ( 14744 MiB) max;  15138MB ( 14437 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
Graphical representation included in the file "./output/Report.html".
Runtime: 36622 milliseconds