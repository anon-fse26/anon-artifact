WARNING: The requested image's platform (linux/amd64) does not match the detected host platform (linux/arm64/v8) and no specific platform was requested
Running CPAchecker with Java heap of size 10000M.
Running CPAchecker with default stack size (1024k). Specify a larger value with --stack if needed.
Language C detected and set for analysis (CPAMain.detectFrontendLanguageIfNecessary, INFO)

CPAchecker 4.0 / terminationAnalysis (OpenJDK 64-Bit Server VM 17.0.15) started (CPAchecker.run, INFO)

Parsing CFA from file(s) "Benchmarks/TermCOMP/C/Di_Stefano_20/flock_true-termination/flock_true-termination.c" (CPAchecker.parse, INFO)

Undefined function __VERIFIER_assume found, first called in line 86 (CheckBindingVisitor.visit, WARNING)

Using Restarting Algorithm (CoreComponentsFactory.createAlgorithm, INFO)

The following configuration options were specified but are not used:
 cpa.arg.lateMerge
 counterexample.export.exportWitness 
 (CPAchecker.printConfigurationWarnings, WARNING)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Loading analysis 1 from file /cpachecker/config/components/combinations-parallel-termination.properties ... (RestartAlgorithm.run, INFO)

Using the following resource limits: Thread CPU-time limit of 300s (Analysis /cpachecker/config/components/combinations-parallel-termination.properties:Parallel analysis 1:ResourceLimitChecker.fromConfiguration, INFO)

Using predicate analysis with MathSAT5 version 5.6.10 (9293adc746be) (May 31 2023 12:38:06, gmp 6.2.0, gcc 7.5.0, 64-bit, reentrant) and JFactory 1.21. (Analysis /cpachecker/config/components/combinations-parallel-termination.properties:Parallel analysis 1:PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (Analysis /cpachecker/config/components/combinations-parallel-termination.properties:Parallel analysis 1:PredicateCPA:PredicateCPARefiner.<init>, INFO)

Warning: Skipping one analysis because the configuration file /cpachecker/config/components/combinations-parallel-termination.properties is invalid (TerminationAlgorithm needs a TerminationCPA) (CPAs.retrieveCPAOrFail, WARNING)

Loading analysis 1 from file /cpachecker/config/components/termination-recursion.properties ... (RestartAlgorithm.run, INFO)

Mismatch of configuration options when loading from '/cpachecker/config/components/termination-recursion.properties': 'termination.config' has two values 'terminationAnalysis.properties' and 'termination-recursion.properties'. Using 'termination-recursion.properties'. (NestingAlgorithm.checkConfigs, INFO)

Using unsound approximation of ints with unbounded integers and floats with rationals for encoding program semantics. (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:FormulaManagerView.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.6.10 (9293adc746be) (May 31 2023 12:38:06, gmp 6.2.0, gcc 7.5.0, 64-bit, reentrant) and JFactory 1.21. (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:PredicateCPARefiner.<init>, INFO)

Using unsound approximation of ints with unbounded integers and floats with rationals for encoding program semantics. (Analysis /cpachecker/config/components/termination-recursion.properties:FormulaManagerView.<init>, WARNING)

Starting analysis 1 ... (RestartAlgorithm.run, INFO)

Starting termination algorithm. (Analysis /cpachecker/config/components/termination-recursion.properties:TerminationAlgorithm.run0, INFO)

line 202: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_0); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Assuming external function __VERIFIER_assume to be a pure function. (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Cannot get declaration of function __VERIFIER_assume, ignoring calls to it. (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 203: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_1); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 204: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_2); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 205: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_3); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 206: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_4); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 207: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_5); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 208: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_6); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 209: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_7); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 210: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_8); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 211: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_9); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 212: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_10); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 213: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_11); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Warning: Could not extract lasso (Loop with heads [N191]
  incoming: [lines 182-185:	N190 -{j = 0;}-> N191]
  outgoing: [line 182:	N191 -{[!(j < 2)]}-> N194]
  nodes:    [N191, N192, N193, N195]
). (Unknown sort in equality) (Analysis /cpachecker/config/components/termination-recursion.properties:InequalityConverter.convert, WARNING)

Could not synthesize a termination or non-termination argument. (Analysis /cpachecker/config/components/termination-recursion.properties:TerminationAlgorithm.proveLoopTermination, WARNING)

line 262: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(firstAgent < 3); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 270: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(0); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 86: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_0); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 87: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_1); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 142: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(guessedcomp < 3); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 143: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((HoutCnt[guessedcomp]) > 0); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 145: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(guessedkey < 2); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 146: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((Hout[guessedcomp][guessedkey]) == 1); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 104: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(guessedcomp < 3); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 105: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((HinCnt[guessedcomp]) > 0); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 107: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(guessedkey < 2); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 108: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((Hin[guessedcomp][guessedkey]) == 1); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 202: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_0); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

Assuming external function __VERIFIER_assume to be a pure function. (Analysis /cpachecker/config/components/termination-recursion.properties:ExpressionToFormulaVisitor.visit, INFO)

Cannot get declaration of function __VERIFIER_assume, ignoring calls to it. (Analysis /cpachecker/config/components/termination-recursion.properties:ExpressionToFormulaVisitor.visit, WARNING)

line 203: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_1); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

line 204: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_2); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

line 205: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_3); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

line 206: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_4); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

line 207: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_5); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

line 208: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_6); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

line 209: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_7); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

line 210: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_8); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

line 211: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_9); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

line 212: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_10); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

line 213: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_11); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

Warning: Could not extract lasso (Loop with heads [N295]
  incoming: [lines 224-227:	N294 -{j = 0;}-> N295]
  outgoing: [line 224:	N295 -{[!(j < 1)]}-> N298]
  nodes:    [N295, N296, N297, N299]
). (Unknown sort in equality) (Analysis /cpachecker/config/components/termination-recursion.properties:InequalityConverter.convert, WARNING)

Could not synthesize a termination or non-termination argument. (Analysis /cpachecker/config/components/termination-recursion.properties:TerminationAlgorithm.proveLoopTermination, WARNING)

Warning: Could not extract lasso (Loop with heads [N301]
  incoming: [lines 229-232:	N300 -{j = 0;}-> N301]
  outgoing: [line 229:	N301 -{[!(j < 2)]}-> N304]
  nodes:    [N301, N302, N303, N305]
). (Unknown sort in equality) (Analysis /cpachecker/config/components/termination-recursion.properties:InequalityConverter.convert, WARNING)

Could not synthesize a termination or non-termination argument. (Analysis /cpachecker/config/components/termination-recursion.properties:TerminationAlgorithm.proveLoopTermination, WARNING)

Warning: Could not extract lasso (Loop with heads [N307]
  incoming: [lines 234-237:	N306 -{j = 0;}-> N307]
  outgoing: [line 234:	N307 -{[!(j < 2)]}-> N310]
  nodes:    [N307, N308, N309, N311]
). (Unknown sort in equality) (Analysis /cpachecker/config/components/termination-recursion.properties:InequalityConverter.convert, WARNING)

Could not synthesize a termination or non-termination argument. (Analysis /cpachecker/config/components/termination-recursion.properties:TerminationAlgorithm.proveLoopTermination, WARNING)

Warning: Could not extract lasso (Loop with heads [N197]
  incoming: [lines 187-193:	N196 -{j = 0;}-> N197]
  outgoing: [line 187:	N197 -{[!(j < 2)]}-> N200]
  nodes:    [N197, N198, N199, N201, N202, N203, N204]
). (Unknown sort in equality) (Analysis /cpachecker/config/components/termination-recursion.properties:InequalityConverter.convert, WARNING)

Could not synthesize a termination or non-termination argument. (Analysis /cpachecker/config/components/termination-recursion.properties:TerminationAlgorithm.proveLoopTermination, WARNING)

line 104: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(guessedcomp < 3); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

line 105: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((HinCnt[guessedcomp]) > 0); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

line 107: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(guessedkey < 2); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

line 108: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((Hin[guessedcomp][guessedkey]) == 1); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

Shutdown requested (The JVM is shutting down, probably because Ctrl+C was pressed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The JVM is shutting down, probably because Ctrl+C was pressed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)


Restart Algorithm statistics
----------------------------
Number of algorithms provided:    2
Number of algorithms used:        1
Last algorithm used:        /cpachecker/config/components/combinations-parallel-termination.properties
Total time for algorithm 1:   897.107s

PredicateCPA statistics
-----------------------
Number of abstractions:            1681 (5% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            1632 (97%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         49 (3%)
  Times precision was empty:       483 (29%)
  Times precision was {false}:     128 (8%)
  Times result was cached:         568 (34%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      502 (30%)
  Times result was 'false':        360 (21%)
Number of strengthen sat checks:   0
Number of coverage checks:         21279
  BDD entailment checks:           1921
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       85
Avg ABE block size:                                12.21 (sum: 20531, count: 1681, min: 0, max: 85)
Number of predicates discovered:          9
Number of abstraction locations:          8
Max number of predicates per location:    8
Avg number of predicates per location:    4
Total predicates per abstraction:         3758
Max number of predicates per abstraction: 8
Avg number of predicates per abstraction: 5.97
Number of irrelevant predicates:          844 (22%)
Number of preds handled by boolean abs:   1479 (39%)
  Total number of models for allsat:      1029
  Max number of models for allsat:        9
  Avg number of models for allsat:        2.05

Time for post operator:                                1.795s
  Time for path formula creation:                      1.778s
Time for strengthen operator:                          0.042s
Time for prec operator:                                1.164s
  Time for abstraction:                  1.085s (Max:     0.025s, Count: 1681)
    Boolean abstraction:                 0.334s
    Solving time:                        0.290s (Max:     0.008s)
    Model enumeration time:              0.111s
    Time for BDD construction:           0.039s (Max:     0.001s)
Time for merge operator:                               0.096s
Time for coverage checks:                              0.024s
  Time for BDD entailment checks:                      0.016s
Total time for SMT solver (w/o itp):     0.401s

Number of path formula cache hits:   24511 (62%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     1.692s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               659
Size of BDD node table:                            466043
Size of BDD cache:                                 46619
Size of BDD node cleanup queue:                    0.20 (sum: 1318, count: 6634, min: 0, max: 455)
Time for BDD node cleanup:                             0.003s
Time for BDD garbage collection:                       0.000s (in 0 runs)

KeyValue statistics
-------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (NonTerminationLabelAutomaton) statistics
-----------------------------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.099s
Automaton transfers with branching:                0
Automaton transfer successors:                     1.00 (sum: 35091, count: 35091, min: 1, max: 1) [1 x 35091]
Number of states with assumption transitions:      0

AutomatonAnalysis (TerminatingFunctions) statistics
---------------------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.025s
Automaton transfers with branching:                0
Automaton transfer successors:                     1.00 (sum: 35091, count: 35091, min: 1, max: 1) [1 x 35091]
Number of states with assumption transitions:      0

Termination Algorithm statistics
--------------------------------
Total time :                                          895.862s
Time for recursion analysis:                            0.000s

Number of analysed loops:                               6 (50%)
Total time for loop analysis:                         895.856s
  Avg time per loop analysis:                         149.309s
  Max time per loop analysis:                         802.614s

Number of safety analysis runs:                        11
  Avg safety analysis run per loop:                     1.83
  Max safety analysis run per loop:                     2 	 for loops [N197], [N301], [N191], [N295], [N307]
Total time for safety analysis:                        48.040s
  Avg time per safety analysis run:                     4.367s
  Max time per safety analysis run:                    22.799s

Number of analysed lassos:                              0
  Avg number of lassos per loop:                        0.00
  Max number of lassos per loop:                        0 	 for loops 
  Avg number of lassos per iteration:                   0.00
  Max number of lassos per iteration:                   0

Total time for lassos analysis:                       847.766s
  Avg time per iteration:                             141.294s
  Max time per iteration:                             779.811s
  Time for lassos construction:                       847.766s
    Avg time for lasso construction per iteration:    141.294s
    Max time for lasso construction per iteration:    779.811s
      Time for stem and loop construction:                         0.307s
        Avg time for stem and loop construction per iteration:      0.051s
        Max time for stem and loop construction per iteration:      0.091s
      Time for lassos creation:                       847.409s
        Avg time for lassos creation per iteration:    141.234s
        Max time for lassos creation per iteration:    779.779s
  Total time for non-termination analysis:              0.000s
    Avg time for non-termination analysis per lasso:    0.000s
    Max time for non-termination analysis per lasso:    0.000s
  Total time for termination analysis:                  0.000s
    Avg time for termination analysis per lasso:        0.000s
    Max time for termination analysis per lasso:        0.000s

Total number of termination arguments:                  0
  Avg termination arguments per loop:                   0.00
  Max termination arguments per loop:                   0 	 for loops 


Counterexample-Check Algorithm statistics
-----------------------------------------
Number of counterexample checks:    0

Termination Algorithm statistics
--------------------------------
Total time :                                          895.862s
Time for recursion analysis:                            0.000s

Number of analysed loops:                               6 (50%)
Total time for loop analysis:                         895.856s
  Avg time per loop analysis:                         149.309s
  Max time per loop analysis:                         802.614s

Number of safety analysis runs:                        11
  Avg safety analysis run per loop:                     1.83
  Max safety analysis run per loop:                     2 	 for loops [N197], [N301], [N191], [N295], [N307]
Total time for safety analysis:                        48.040s
  Avg time per safety analysis run:                     4.367s
  Max time per safety analysis run:                    22.799s

Number of analysed lassos:                              0
  Avg number of lassos per loop:                        0.00
  Max number of lassos per loop:                        0 	 for loops 
  Avg number of lassos per iteration:                   0.00
  Max number of lassos per iteration:                   0

Total time for lassos analysis:                       847.766s
  Avg time per iteration:                             141.294s
  Max time per iteration:                             779.811s
  Time for lassos construction:                       847.766s
    Avg time for lasso construction per iteration:    141.294s
    Max time for lasso construction per iteration:    779.811s
      Time for stem and loop construction:                         0.307s
        Avg time for stem and loop construction per iteration:      0.051s
        Max time for stem and loop construction per iteration:      0.091s
      Time for lassos creation:                       847.409s
        Avg time for lassos creation per iteration:    141.234s
        Max time for lassos creation per iteration:    779.779s
  Total time for non-termination analysis:              0.000s
    Avg time for non-termination analysis per lasso:    0.000s
    Max time for non-termination analysis per lasso:    0.000s
  Total time for termination analysis:                  0.000s
    Avg time for termination analysis per lasso:        0.000s
    Max time for termination analysis per lasso:        0.000s

Total number of termination arguments:                  0
  Avg termination arguments per loop:                   0.00
  Max termination arguments per loop:                   0 	 for loops 


Counterexample-Check Algorithm statistics
-----------------------------------------
Number of counterexample checks:    0

Code Coverage
-----------------------------
  Function coverage:      0.933
  Visited lines:          206
  Total lines:            213
  Line coverage:          0.967
  Visited conditions:     110
  Total conditions:       142
  Condition coverage:     0.775

CPAchecker general statistics
-----------------------------
Number of program locations:                       398
Number of CFA edges (per node):                         487 (count: 398, min: 0, max: 9, avg: 1.22)
Number of relevant variables:                      83
Number of functions:                               15
Number of loops (and loop nodes):                        12 (sum: 176, min: 4, max: 40, avg: 14.67)
Size of reached set:             887
  Number of reached locations:   278 (70%)
    Avg states per location:     3
    Max states per location:     30 (at node N9)
  Number of reached functions:   14 (93%)
  Number of partitions:          278
    Avg size of partitions:      3
    Max size of partitions:      30 (with key N9)
  Number of target states:       1
  Size of final wait list:       8

Time for analysis setup:          1.472s
  Time for loading CPAs:          0.017s
  Time for loading parser:        0.224s
  Time for CFA construction:      1.188s
    Time for parsing file(s):     0.320s
    Time for AST to CFA:          0.380s
    Time for CFA sanity check:    0.085s
    Time for post-processing:     0.283s
    Time for loop structure:      0.025s
    Time for AST structure:       0.000s
    Time for CFA export:          0.625s
      Time for function pointers resolving:            0.005s
        Function calls via function pointers:             0 (count: 1, min: 0, max: 0, avg: 0.00)
        Instrumented function pointer calls:              0 (count: 1, min: 0, max: 0, avg: 0.00)
        Function calls with function pointer arguments:        0 (count: 1, min: 0, max: 0, avg: 0.00)
        Instrumented function pointer arguments:          0 (count: 1, min: 0, max: 0, avg: 0.00)
      Time for classifying variables:                  0.170s
        Time for collecting variables:                 0.120s
        Time for solving dependencies:                 0.005s
        Time for building hierarchy:                   0.000s
        Time for building classification:              0.039s
        Time for exporting data:                       0.006s
Time for Analysis:              897.109s
CPU time for analysis:          991.020s
Total time for CPAchecker:      898.594s
Total CPU time for CPAchecker:  993.610s
Time for statistics:              0.209s

Time for Garbage Collector:      13.258s (in 7604 runs)
Garbage Collector(s) used:    PS MarkSweep, PS Scavenge
Used heap memory:                402MB (   383 MiB) max;    203MB (   194 MiB) avg;    420MB (   401 MiB) peak
Used non-heap memory:             69MB (    66 MiB) max;     68MB (    65 MiB) avg;     71MB (    68 MiB) peak
Used in PS Old Gen pool:         275MB (   262 MiB) max;    144MB (   137 MiB) avg;    275MB (   262 MiB) peak
Allocated heap memory:           416MB (   397 MiB) max;    369MB (   352 MiB) avg
Allocated non-heap memory:        73MB (    69 MiB) max;     72MB (    68 MiB) avg
Total process virtual memory:  14913MB ( 14222 MiB) max;  14900MB ( 14209 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
Graphical representation included in the file "./output/Counterexample.11.html".
Runtime: 901510 milliseconds