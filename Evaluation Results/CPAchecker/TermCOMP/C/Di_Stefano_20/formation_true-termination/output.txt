WARNING: The requested image's platform (linux/amd64) does not match the detected host platform (linux/arm64/v8) and no specific platform was requested
Running CPAchecker with Java heap of size 10000M.
Running CPAchecker with default stack size (1024k). Specify a larger value with --stack if needed.
Language C detected and set for analysis (CPAMain.detectFrontendLanguageIfNecessary, INFO)

CPAchecker 4.0 / terminationAnalysis (OpenJDK 64-Bit Server VM 17.0.15) started (CPAchecker.run, INFO)

Parsing CFA from file(s) "Benchmarks/TermCOMP/C/Di_Stefano_20/formation_true-termination/formation_true-termination.c" (CPAchecker.parse, INFO)

Undefined function __VERIFIER_assume found, first called in line 82 (CheckBindingVisitor.visit, WARNING)

Using Restarting Algorithm (CoreComponentsFactory.createAlgorithm, INFO)

The following configuration options were specified but are not used:
 cpa.arg.lateMerge
 counterexample.export.exportWitness 
 (CPAchecker.printConfigurationWarnings, WARNING)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Loading analysis 1 from file /cpachecker/config/components/combinations-parallel-termination.properties ... (RestartAlgorithm.run, INFO)

Using the following resource limits: Thread CPU-time limit of 300s (Analysis /cpachecker/config/components/combinations-parallel-termination.properties:Parallel analysis 1:ResourceLimitChecker.fromConfiguration, INFO)

Using predicate analysis with MathSAT5 version 5.6.10 (9293adc746be) (May 31 2023 12:38:06, gmp 6.2.0, gcc 7.5.0, 64-bit, reentrant) and JFactory 1.21. (Analysis /cpachecker/config/components/combinations-parallel-termination.properties:Parallel analysis 1:PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (Analysis /cpachecker/config/components/combinations-parallel-termination.properties:Parallel analysis 1:PredicateCPA:PredicateCPARefiner.<init>, INFO)

Warning: Skipping one analysis because the configuration file /cpachecker/config/components/combinations-parallel-termination.properties is invalid (TerminationAlgorithm needs a TerminationCPA) (CPAs.retrieveCPAOrFail, WARNING)

Loading analysis 1 from file /cpachecker/config/components/termination-recursion.properties ... (RestartAlgorithm.run, INFO)

Mismatch of configuration options when loading from '/cpachecker/config/components/termination-recursion.properties': 'termination.config' has two values 'terminationAnalysis.properties' and 'termination-recursion.properties'. Using 'termination-recursion.properties'. (NestingAlgorithm.checkConfigs, INFO)

Using unsound approximation of ints with unbounded integers and floats with rationals for encoding program semantics. (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:FormulaManagerView.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.6.10 (9293adc746be) (May 31 2023 12:38:06, gmp 6.2.0, gcc 7.5.0, 64-bit, reentrant) and JFactory 1.21. (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:PredicateCPARefiner.<init>, INFO)

Using unsound approximation of ints with unbounded integers and floats with rationals for encoding program semantics. (Analysis /cpachecker/config/components/termination-recursion.properties:FormulaManagerView.<init>, WARNING)

Starting analysis 1 ... (RestartAlgorithm.run, INFO)

Starting termination algorithm. (Analysis /cpachecker/config/components/termination-recursion.properties:TerminationAlgorithm.run0, INFO)

line 192: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((_Lvalue[0][0]) == -128); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Assuming external function __VERIFIER_assume to be a pure function. (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Cannot get declaration of function __VERIFIER_assume, ignoring calls to it. (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 193: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((_Lvalue[1][0]) == -128); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 194: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((_Lvalue[2][0]) == -128); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 195: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((_Lvalue[0][1]) == -128); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 196: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((_Lvalue[1][1]) == -128); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 197: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((_Lvalue[2][1]) == -128); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 198: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_0); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 199: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_1); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 200: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_2); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 192: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((_Lvalue[0][0]) == -128); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

Assuming external function __VERIFIER_assume to be a pure function. (Analysis /cpachecker/config/components/termination-recursion.properties:ExpressionToFormulaVisitor.visit, INFO)

Cannot get declaration of function __VERIFIER_assume, ignoring calls to it. (Analysis /cpachecker/config/components/termination-recursion.properties:ExpressionToFormulaVisitor.visit, WARNING)

line 193: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((_Lvalue[1][0]) == -128); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

line 194: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((_Lvalue[2][0]) == -128); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

line 195: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((_Lvalue[0][1]) == -128); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

line 196: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((_Lvalue[1][1]) == -128); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

line 197: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((_Lvalue[2][1]) == -128); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

line 198: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_0); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

line 199: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_1); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

line 200: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_2); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

Warning: Could not extract lasso (Loop with heads [N255]
  incoming: [lines 211-214:	N254 -{j = 0;}-> N255]
  outgoing: [line 211:	N255 -{[!(j < 1)]}-> N258]
  nodes:    [N255, N256, N257, N259]
). (Unknown sort in equality) (Analysis /cpachecker/config/components/termination-recursion.properties:InequalityConverter.convert, WARNING)

Could not synthesize a termination or non-termination argument. (Analysis /cpachecker/config/components/termination-recursion.properties:TerminationAlgorithm.proveLoopTermination, WARNING)

line 289: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(firstAgent < 3); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 90: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_0); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 91: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_1); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 277: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_2); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 262: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_0); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 263: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((I[tid][0]) == 9); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 82: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_0); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 83: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_1); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 252: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_0); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 253: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((I[tid][0]) < 9); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 242: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_0); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 243: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((I[tid][0]) == 0); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 232: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_0); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 233: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((I[tid][0]) > 0); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 138: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(guessedcomp < 3); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 139: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((HoutCnt[guessedcomp]) > 0); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 141: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(guessedkey < 2); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 142: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((Hout[guessedcomp][guessedkey]) == 1); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 100: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(guessedcomp < 3); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 101: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((HinCnt[guessedcomp]) > 0); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 103: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(guessedkey < 2); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 104: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((Hin[guessedcomp][guessedkey]) == 1); (Analysis /cpachecker/config/components/termination-recursion.properties:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Warning: Could not extract lasso (Loop with heads [N261]
  incoming: [lines 216-219:	N260 -{j = 0;}-> N261]
  outgoing: [line 216:	N261 -{[!(j < 1)]}-> N264]
  nodes:    [N261, N262, N263, N265]
). (Unknown sort in equality) (Analysis /cpachecker/config/components/termination-recursion.properties:InequalityConverter.convert, WARNING)

Could not synthesize a termination or non-termination argument. (Analysis /cpachecker/config/components/termination-recursion.properties:TerminationAlgorithm.proveLoopTermination, WARNING)

Warning: Could not extract lasso (Loop with heads [N267]
  incoming: [lines 221-224:	N266 -{j = 0;}-> N267]
  outgoing: [line 221:	N267 -{[!(j < 2)]}-> N270]
  nodes:    [N267, N268, N269, N271]
). (Unknown sort in equality) (Analysis /cpachecker/config/components/termination-recursion.properties:InequalityConverter.convert, WARNING)

Could not synthesize a termination or non-termination argument. (Analysis /cpachecker/config/components/termination-recursion.properties:TerminationAlgorithm.proveLoopTermination, WARNING)

Warning: Could not extract lasso (Loop with heads [N206]
  incoming: [lines 178-183:	N205 -{j = 0;}-> N206]
  outgoing: [line 178:	N206 -{[!(j < 2)]}-> N209]
  nodes:    [N206, N207, N208, N210, N211, N212]
). (Unknown sort in equality) (Analysis /cpachecker/config/components/termination-recursion.properties:InequalityConverter.convert, WARNING)

Could not synthesize a termination or non-termination argument. (Analysis /cpachecker/config/components/termination-recursion.properties:TerminationAlgorithm.proveLoopTermination, WARNING)

line 100: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(guessedcomp < 3); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

line 101: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((HinCnt[guessedcomp]) > 0); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

line 103: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(guessedkey < 2); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

line 104: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((Hin[guessedcomp][guessedkey]) == 1); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

Warning: Could not extract lasso (Loop with heads [N135]
  incoming: [lines 117-123:	N134 -{k = 0;}-> N135]
  outgoing: [line 117:	N135 -{[!(k < 1)]}-> N138]
  nodes:    [N135, N136, N137, N139, N140, N141, N142]
). (Unknown sort in equality) (Analysis /cpachecker/config/components/termination-recursion.properties:InequalityConverter.convert, WARNING)

Could not synthesize a termination or non-termination argument. (Analysis /cpachecker/config/components/termination-recursion.properties:TerminationAlgorithm.proveLoopTermination, WARNING)

line 138: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(guessedcomp < 3); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

line 139: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((HoutCnt[guessedcomp]) > 0); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

line 141: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(guessedkey < 2); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

line 142: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume((Hout[guessedcomp][guessedkey]) == 1); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

Warning: Could not extract lasso (Loop with heads [N180]
  incoming: [lines 153-159:	N179 -{k = 0;}-> N180]
  outgoing: [line 153:	N180 -{[!(k < 1)]}-> N183]
  nodes:    [N180, N181, N182, N184, N185, N186, N187]
). (Unknown sort in equality) (Analysis /cpachecker/config/components/termination-recursion.properties:InequalityConverter.convert, WARNING)

Could not synthesize a termination or non-termination argument. (Analysis /cpachecker/config/components/termination-recursion.properties:TerminationAlgorithm.proveLoopTermination, WARNING)

Warning: Could not extract lasso (Loop with heads [N201]
  incoming: [lines 176-187:	N200 -{i = 0;}-> N201]
  outgoing: [line 176:	N201 -{[!(i < 3)]}-> N204]
  nodes:    [N201, N202, N203, N205, N206, N207, N208, N209, N210, N211, N212, N213, N214]
). (Unknown sort in equality) (Analysis /cpachecker/config/components/termination-recursion.properties:InequalityConverter.convert, WARNING)

Could not synthesize a termination or non-termination argument. (Analysis /cpachecker/config/components/termination-recursion.properties:TerminationAlgorithm.proveLoopTermination, WARNING)

Warning: Could not extract lasso (Loop with heads [N250]
  incoming: [lines 209-226:	N249 -{i = 0;}-> N250]
  outgoing: [line 209:	N250 -{[!(i < 3)]}-> N253]
  nodes:    [N250, N251, N252, N254, N255, N256, N257, N258, N259, N260, N261, N262, N263, N264, N265, N266, N267, N268, N269, N270, N271]
). (Unknown sort in equality) (Analysis /cpachecker/config/components/termination-recursion.properties:InequalityConverter.convert, WARNING)

Could not synthesize a termination or non-termination argument. (Analysis /cpachecker/config/components/termination-recursion.properties:TerminationAlgorithm.proveLoopTermination, WARNING)

Warning: Could not extract lasso (Loop with heads [N161]
  incoming: [lines 145-164:	N160 -{i = 0;}-> N161]
  outgoing: [line 145:	N161 -{[!(i < 3)]}-> N164]
  nodes:    [N161, N162, N163, N165, N166, N167, N168, N169, N170, N171, N172, N173, N174, N175, N176, N177, N178, N179, N180, N181, N182, N183, N184, N185, N186, N187, N188]
). (Unknown sort in equality) (Analysis /cpachecker/config/components/termination-recursion.properties:InequalityConverter.convert, WARNING)

Could not synthesize a termination or non-termination argument. (Analysis /cpachecker/config/components/termination-recursion.properties:TerminationAlgorithm.proveLoopTermination, WARNING)

Warning: Could not extract lasso (Loop with heads [N112]
  incoming: [lines 107-130:	N111 -{i = 0;}-> N112]
  outgoing: [line 107:	N112 -{[!(i < 3)]}-> N115]
  nodes:    [N112, N113, N114, N116, N117, N118, N119, N120, N121, N122, N123, N124, N125, N126, N127, N128, N129, N130, N131, N132, N133, N134, N135, N136, N137, N138, N139, N140, N141, N142, N143]
). (Unknown sort in equality) (Analysis /cpachecker/config/components/termination-recursion.properties:InequalityConverter.convert, WARNING)

Could not synthesize a termination or non-termination argument. (Analysis /cpachecker/config/components/termination-recursion.properties:TerminationAlgorithm.proveLoopTermination, WARNING)

line 289: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(firstAgent < 3); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

line 90: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_0); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

line 91: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_1); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

line 277: Return type of function __VERIFIER_assume is void, but result is used as type int: __VERIFIER_assume(__CPAchecker_TMP_2); (Analysis /cpachecker/config/components/termination-recursion.properties:CtoFormulaConverter.getReturnType, WARNING)

Warning: Could not extract lasso (Loop with heads [N351]
  incoming: [line 285:	N350 -{while}-> N351]
  outgoing: [line 338:	N422 -{[__CPAchecker_TMP_7 >= 2]}-> N399]
  nodes:    [N351, N352, N354, N355, N356, N357, N358, N359, N360, N361, N363, N364, N365, N367, N368, N369, N371, N372, N373, N375, N376, N377, N379, N380, N381, N383, N384, N385, N386, N387, N388, N389, N390, N391, N392, N394, N395, N396, N397, N398, N400, N401, N402, N403, N404, N405, N406, N407, N408, N409, N410, N411, N412, N413, N414, N415, N416, N417, N418, N419, N420, N421, N422]
). (Unknown sort in equality) (Analysis /cpachecker/config/components/termination-recursion.properties:InequalityConverter.convert, WARNING)

Could not synthesize a termination or non-termination argument. (Analysis /cpachecker/config/components/termination-recursion.properties:TerminationAlgorithm.proveLoopTermination, WARNING)

Termination algorithm did not find a non-terminating loop. (Analysis /cpachecker/config/components/termination-recursion.properties:TerminationAlgorithm.run0, INFO)

Analysis 1 terminated, but result is unsound. (RestartAlgorithm.run, INFO)

No further configuration available. (RestartAlgorithm.run, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

Analysis incomplete: no errors found, but not everything could be checked. (CPAchecker.analyzeResult, WARNING)


Restart Algorithm statistics
----------------------------
Number of algorithms provided:    2
Number of algorithms used:        1
Last algorithm used:        /cpachecker/config/components/combinations-parallel-termination.properties
Total time for algorithm 1:   218.828s

PredicateCPA statistics
-----------------------
Number of abstractions:            3932 (4% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            3831 (97%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         101 (3%)
  Times precision was empty:       1265 (32%)
  Times precision was {false}:     154 (4%)
  Times result was cached:         2045 (52%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      468 (12%)
  Times result was 'false':        766 (19%)
Number of strengthen sat checks:   0
Number of coverage checks:         46117
  BDD entailment checks:           4425
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       134
Avg ABE block size:                                11.68 (sum: 45912, count: 3932, min: 0, max: 134)
Number of predicates discovered:          10
Number of abstraction locations:          7
Max number of predicates per location:    5
Avg number of predicates per location:    3
Total predicates per abstraction:         7752
Max number of predicates per abstraction: 7
Avg number of predicates per abstraction: 12.46
Number of irrelevant predicates:          1650 (21%)
Number of preds handled by boolean abs:   1201 (15%)
  Total number of models for allsat:      897
  Max number of models for allsat:        9
  Avg number of models for allsat:        1.92

Time for post operator:                                2.982s
  Time for path formula creation:                      2.953s
Time for strengthen operator:                          0.074s
Time for prec operator:                                4.402s
  Time for abstraction:                  4.274s (Max:     0.466s, Count: 3932)
    Boolean abstraction:                 0.297s
    Solving time:                        3.209s (Max:     0.461s)
    Model enumeration time:              0.109s
    Time for BDD construction:           0.057s (Max:     0.002s)
Time for merge operator:                               0.277s
Time for coverage checks:                              0.031s
  Time for BDD entailment checks:                      0.025s
Total time for SMT solver (w/o itp):     3.318s

Number of path formula cache hits:   56000 (53%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     2.754s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               726
Size of BDD node table:                            466043
Size of BDD cache:                                 46619
Size of BDD node cleanup queue:                    0.14 (sum: 1379, count: 9911, min: 0, max: 379)
Time for BDD node cleanup:                             0.011s
Time for BDD garbage collection:                       0.000s (in 0 runs)

KeyValue statistics
-------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (NonTerminationLabelAutomaton) statistics
-----------------------------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.151s
Automaton transfers with branching:                0
Automaton transfer successors:                     1.00 (sum: 98058, count: 98058, min: 1, max: 1) [1 x 98058]
Number of states with assumption transitions:      0

AutomatonAnalysis (TerminatingFunctions) statistics
---------------------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.054s
Automaton transfers with branching:                0
Automaton transfer successors:                     1.00 (sum: 98058, count: 98058, min: 1, max: 1) [1 x 98058]
Number of states with assumption transitions:      0

Termination Algorithm statistics
--------------------------------
Total time :                                          217.562s
Time for recursion analysis:                            0.000s

Number of analysed loops:                               11 (100%)
Total time for loop analysis:                         217.555s
  Avg time per loop analysis:                          19.777s
  Max time per loop analysis:                          58.875s

Number of safety analysis runs:                        22
  Avg safety analysis run per loop:                     2.00
  Max safety analysis run per loop:                     2 	 for loops [N255], [N206], [N250], [N267], [N201], [N161], [N351], [N261], [N180], [N112], [N135]
Total time for safety analysis:                        76.398s
  Avg time per safety analysis run:                     3.472s
  Max time per safety analysis run:                    21.453s

Number of analysed lassos:                              0
  Avg number of lassos per loop:                        0.00
  Max number of lassos per loop:                        0 	 for loops 
  Avg number of lassos per iteration:                   0.00
  Max number of lassos per iteration:                   0

Total time for lassos analysis:                       141.091s
  Avg time per iteration:                              12.826s
  Max time per iteration:                              47.641s
  Time for lassos construction:                       141.091s
    Avg time for lasso construction per iteration:     12.826s
    Max time for lasso construction per iteration:     47.641s
      Time for stem and loop construction:                         0.361s
        Avg time for stem and loop construction per iteration:      0.032s
        Max time for stem and loop construction per iteration:      0.138s
      Time for lassos creation:                       140.666s
        Avg time for lassos creation per iteration:     12.787s
        Max time for lassos creation per iteration:     47.609s
  Total time for non-termination analysis:              0.000s
    Avg time for non-termination analysis per lasso:    0.000s
    Max time for non-termination analysis per lasso:    0.000s
  Total time for termination analysis:                  0.000s
    Avg time for termination analysis per lasso:        0.000s
    Max time for termination analysis per lasso:        0.000s

Total number of termination arguments:                  0
  Avg termination arguments per loop:                   0.00
  Max termination arguments per loop:                   0 	 for loops 


Counterexample-Check Algorithm statistics
-----------------------------------------
Number of counterexample checks:    0

Termination Algorithm statistics
--------------------------------
Total time :                                          217.562s
Time for recursion analysis:                            0.000s

Number of analysed loops:                               11 (100%)
Total time for loop analysis:                         217.555s
  Avg time per loop analysis:                          19.777s
  Max time per loop analysis:                          58.875s

Number of safety analysis runs:                        22
  Avg safety analysis run per loop:                     2.00
  Max safety analysis run per loop:                     2 	 for loops [N255], [N206], [N250], [N267], [N201], [N161], [N351], [N261], [N180], [N112], [N135]
Total time for safety analysis:                        76.398s
  Avg time per safety analysis run:                     3.472s
  Max time per safety analysis run:                    21.453s

Number of analysed lassos:                              0
  Avg number of lassos per loop:                        0.00
  Max number of lassos per loop:                        0 	 for loops 
  Avg number of lassos per iteration:                   0.00
  Max number of lassos per iteration:                   0

Total time for lassos analysis:                       141.091s
  Avg time per iteration:                              12.826s
  Max time per iteration:                              47.641s
  Time for lassos construction:                       141.091s
    Avg time for lasso construction per iteration:     12.826s
    Max time for lasso construction per iteration:     47.641s
      Time for stem and loop construction:                         0.361s
        Avg time for stem and loop construction per iteration:      0.032s
        Max time for stem and loop construction per iteration:      0.138s
      Time for lassos creation:                       140.666s
        Avg time for lassos creation per iteration:     12.787s
        Max time for lassos creation per iteration:     47.609s
  Total time for non-termination analysis:              0.000s
    Avg time for non-termination analysis per lasso:    0.000s
    Max time for non-termination analysis per lasso:    0.000s
  Total time for termination analysis:                  0.000s
    Avg time for termination analysis per lasso:        0.000s
    Max time for termination analysis per lasso:        0.000s

Total number of termination arguments:                  0
  Avg termination arguments per loop:                   0.00
  Max termination arguments per loop:                   0 	 for loops 


Counterexample-Check Algorithm statistics
-----------------------------------------
Number of counterexample checks:    0

Code Coverage
-----------------------------
  Function coverage:      1.000
  Visited lines:          247
  Total lines:            247
  Line coverage:          1.000
  Visited conditions:     136
  Total conditions:       136
  Condition coverage:     1.000

CPAchecker general statistics
-----------------------------
Number of program locations:                       449
Number of CFA edges (per node):                         545 (count: 449, min: 0, max: 9, avg: 1.21)
Number of relevant variables:                      96
Number of functions:                               19
Number of loops (and loop nodes):                        11 (sum: 187, min: 4, max: 63, avg: 17.00)
Size of reached set:             2088
  Number of reached locations:   345 (77%)
    Avg states per location:     6
    Max states per location:     54 (at node N1)
  Number of reached functions:   19 (100%)
  Number of partitions:          345
    Avg size of partitions:      6
    Max size of partitions:      54 (with key N1)
  Number of target states:       0

Time for analysis setup:          1.507s
  Time for loading CPAs:          0.011s
  Time for loading parser:        0.221s
  Time for CFA construction:      1.230s
    Time for parsing file(s):     0.383s
    Time for AST to CFA:          0.350s
    Time for CFA sanity check:    0.091s
    Time for post-processing:     0.301s
    Time for loop structure:      0.020s
    Time for AST structure:       0.000s
    Time for CFA export:          0.647s
      Time for function pointers resolving:            0.006s
        Function calls via function pointers:             0 (count: 1, min: 0, max: 0, avg: 0.00)
        Instrumented function pointer calls:              0 (count: 1, min: 0, max: 0, avg: 0.00)
        Function calls with function pointer arguments:        0 (count: 1, min: 0, max: 0, avg: 0.00)
        Instrumented function pointer arguments:          0 (count: 1, min: 0, max: 0, avg: 0.00)
      Time for classifying variables:                  0.173s
        Time for collecting variables:                 0.119s
        Time for solving dependencies:                 0.004s
        Time for building hierarchy:                   0.000s
        Time for building classification:              0.041s
        Time for exporting data:                       0.008s
Time for Analysis:              218.830s
CPU time for analysis:          262.900s
Time for analyzing result:        0.002s
Total time for CPAchecker:      220.347s
Total CPU time for CPAchecker:  265.500s
Time for statistics:              0.189s

Time for Garbage Collector:       2.684s (in 1491 runs)
Garbage Collector(s) used:    PS MarkSweep, PS Scavenge
Used heap memory:                328MB (   313 MiB) max;    158MB (   151 MiB) avg;    354MB (   338 MiB) peak
Used non-heap memory:             70MB (    67 MiB) max;     67MB (    64 MiB) avg;     72MB (    69 MiB) peak
Used in PS Old Gen pool:         227MB (   216 MiB) max;    109MB (   104 MiB) avg;    227MB (   216 MiB) peak
Allocated heap memory:           354MB (   338 MiB) max;    316MB (   302 MiB) avg
Allocated non-heap memory:        74MB (    70 MiB) max;     71MB (    68 MiB) avg
Total process virtual memory:  14913MB ( 14223 MiB) max;  14897MB ( 14207 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
Graphical representation included in the file "./output/Report.html".
Runtime: 223271 milliseconds