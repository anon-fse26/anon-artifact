NODE   2: <2> PSNodeType::ENTRY (points-to size: 0)
NODE   3:   %retval = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %retval = alloca i32, align 4 + 0
NODE   4:   %len = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %len = alloca i32, align 4 + 0
NODE   5:   %saved_stack = alloca i8*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %saved_stack = alloca i8*, align 8 + 0
NODE   6:   %__vla_expr0 = alloca i64, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %__vla_expr0 = alloca i64, align 8 + 0
NODE   7:   %i = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %i = alloca i32, align 4 + 0
NODE   8:   %argv = alloca i32*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %argv = alloca i32*, align 8 + 0
NODE   9:   %fp = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %fp = alloca i32, align 4 + 0
NODE  10:   store i32 0, i32* %retval, align 4 (points-to size: 0)
NODE  11:   %call = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  12:   store i32 %call, i32* %len, align 4 (points-to size: 0)
NODE  13:   %0 = load i32, i32* %len, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  14:   store i32 0, i32* %retval, align 4 (points-to size: 0)
NODE  15:   %19 = load i32, i32* %retval, align 4 (points-to size: 1)
    -> null + 0
NODE  16:   ret i32 %19 (points-to size: 0)
NODE  17:   %1 = load i32, i32* %len, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  18:   %2 = zext i32 %1 to i64 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  19:   %3 = call i8* @llvm.stacksave() (points-to size: 1)
    ->   %3 = call i8* @llvm.stacksave() + 0
NODE  20:   store i8* %3, i8** %saved_stack, align 8 (points-to size: 0)
NODE  21:   %vla = alloca i32, i64 %2, align 16 (points-to size: 1)
    ->   %vla = alloca i32, i64 %2, align 16 + 0
NODE  22:   store i64 %2, i64* %__vla_expr0, align 8 (points-to size: 0)
NODE  23:   store i32 0, i32* %i, align 4 (points-to size: 0)
NODE  24:   %4 = load i32, i32* %i, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  25:   %5 = load i32, i32* %len, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  26:   %sub = sub nsw i32 %5, 1 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  27:   %call2 = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  28:   %6 = load i32, i32* %i, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  29:   %idxprom = sext i32 %6 to i64 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  30:   %arrayidx = getelementptr inbounds i32, i32* %vla, i64 %idxprom (points-to size: 1)
    ->   %vla = alloca i32, i64 %2, align 16 + Offset::UNKNOWN
NODE  31:   store i32 %call2, i32* %arrayidx, align 4 (points-to size: 0)
NODE  32:   %8 = load i32, i32* %len, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  33:   %sub3 = sub nsw i32 %8, 1 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  34:   %idxprom4 = sext i32 %sub3 to i64 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  35:   %arrayidx5 = getelementptr inbounds i32, i32* %vla, i64 %idxprom4 (points-to size: 1)
    ->   %vla = alloca i32, i64 %2, align 16 + Offset::UNKNOWN
NODE  36:   store i32 0, i32* %arrayidx5, align 4 (points-to size: 0)
NODE  37:   store i32* %vla, i32** %argv, align 8 (points-to size: 0)
NODE  38:   store i32 0, i32* %fp, align 4 (points-to size: 0)
NODE  39:   %7 = load i32, i32* %i, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  40:   %inc = add nsw i32 %7, 1 (points-to size: 1)
    -> null + Offset::UNKNOWN
NODE  41:   store i32 %inc, i32* %i, align 4 (points-to size: 0)
NODE  42:   %15 = load i32, i32* %fp, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  43:   %inc14 = add nsw i32 %15, 1 (points-to size: 1)
    -> null + Offset::UNKNOWN
NODE  44:   store i32 %inc14, i32* %fp, align 4 (points-to size: 0)
NODE  45:   %16 = load i32*, i32** %argv, align 8 (points-to size: 2)
    ->   %vla = alloca i32, i64 %2, align 16 + 0
    ->   %vla = alloca i32, i64 %2, align 16 + Offset::UNKNOWN
NODE  46:   %17 = load i32, i32* %16, align 4 (points-to size: 1)
    -> null + 0
NODE  47:   %10 = load i32*, i32** %argv, align 8 (points-to size: 2)
    ->   %vla = alloca i32, i64 %2, align 16 + 0
    ->   %vla = alloca i32, i64 %2, align 16 + Offset::UNKNOWN
NODE  48:   %11 = load i32, i32* %10, align 4 (points-to size: 1)
    -> null + 0
NODE  49:   store i32 0, i32* %retval, align 4 (points-to size: 0)
NODE  50:   %18 = load i8*, i8** %saved_stack, align 8 (points-to size: 1)
    ->   %3 = call i8* @llvm.stacksave() + 0
NODE  51:   call void @llvm.stackrestore(i8* %18) (points-to size: 0)
NODE  52: <52> PSNodeType::CALL (points-to size: 0)
NODE  53: <53> PSNodeType::ENTRY (points-to size: 0)
NODE  54:   %retval = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %retval = alloca i32, align 4 + 0
NODE  55:   %i = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %i = alloca i32, align 4 + 0
NODE  56:   %0 = load i32, i32* @flag, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  57:   %inc = add nsw i32 %0, 1 (points-to size: 1)
    -> null + Offset::UNKNOWN
NODE  58:   store i32 %inc, i32* @flag, align 4 (points-to size: 0)
NODE  59:   %1 = load i32, i32* @flag, align 4 (points-to size: 1)
    -> null + Offset::UNKNOWN
NODE  60:   store i32 0, i32* %retval, align 4 (points-to size: 0)
NODE  61:   %4 = load i32, i32* %retval, align 4 (points-to size: 2)
    -> null + 0
    -> unknown + Offset::UNKNOWN
NODE  62:   ret i32 %4 (points-to size: 0)
NODE  63:   %call = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  64:   store i32 %call, i32* %i, align 4 (points-to size: 0)
NODE  65:   %2 = load i32, i32* %i, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  66:   store i32 0, i32* %retval, align 4 (points-to size: 0)
NODE  67:   %3 = load i32, i32* %i, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  68:   store i32 %3, i32* %retval, align 4 (points-to size: 0)
NODE  69: fopen_or_warn (points-to size: 1)
    -> fopen_or_warn + 0
NODE  70: main (points-to size: 1)
    -> main + 0
NODE  71:   %call8 = call i32 @fopen_or_warn() (points-to size: 0)
NODE  72:   store i32 %call8, i32* %fp, align 4 (points-to size: 0)
NODE  73:   %12 = load i32, i32* %fp, align 4 (points-to size: 0)
NODE  74:   %14 = load i32*, i32** %argv, align 8 (points-to size: 2)
    ->   %vla = alloca i32, i64 %2, align 16 + 0
    ->   %vla = alloca i32, i64 %2, align 16 + Offset::UNKNOWN
NODE  75:   %incdec.ptr13 = getelementptr inbounds i32, i32* %14, i32 1 (points-to size: 1)
    ->   %vla = alloca i32, i64 %2, align 16 + Offset::UNKNOWN
NODE  76:   store i32* %incdec.ptr13, i32** %argv, align 8 (points-to size: 0)
NODE  77:   %13 = load i32*, i32** %argv, align 8 (points-to size: 2)
    ->   %vla = alloca i32, i64 %2, align 16 + 0
    ->   %vla = alloca i32, i64 %2, align 16 + Offset::UNKNOWN
NODE  78:   %incdec.ptr = getelementptr inbounds i32, i32* %13, i32 1 (points-to size: 1)
    ->   %vla = alloca i32, i64 %2, align 16 + Offset::UNKNOWN
NODE  79:   store i32* %incdec.ptr, i32** %argv, align 8 (points-to size: 0)
