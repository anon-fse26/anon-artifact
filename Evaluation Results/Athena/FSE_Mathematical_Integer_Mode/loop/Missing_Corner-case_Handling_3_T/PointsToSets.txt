NODE   1: <1> PSNodeType::ENTRY (points-to size: 0)
NODE   2:   %retval = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %retval = alloca i32, align 4 + 0
NODE   3:   %ROWNO = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %ROWNO = alloca i32, align 4 + 0
NODE   4:   %COLNO = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %COLNO = alloca i32, align 4 + 0
NODE   5:   %saved_stack = alloca i8*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %saved_stack = alloca i8*, align 8 + 0
NODE   6:   %__vla_expr0 = alloca i64, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %__vla_expr0 = alloca i64, align 8 + 0
NODE   7:   %__vla_expr1 = alloca i64, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %__vla_expr1 = alloca i64, align 8 + 0
NODE   8:   %i = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %i = alloca i32, align 4 + 0
NODE   9:   %j = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %j = alloca i32, align 4 + 0
NODE  10:   %num = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %num = alloca i32, align 4 + 0
NODE  11:   %STONE = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %STONE = alloca i32, align 4 + 0
NODE  12:   %found = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %found = alloca i32, align 4 + 0
NODE  13:   %xmin = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %xmin = alloca i32, align 4 + 0
NODE  14:   %y = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %y = alloca i32, align 4 + 0
NODE  15:   store i32 0, i32* %retval, align 4 (points-to size: 0)
NODE  16:   %call = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  17:   store i32 %call, i32* %ROWNO, align 4 (points-to size: 0)
NODE  18:   %call1 = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  19:   store i32 %call1, i32* %COLNO, align 4 (points-to size: 0)
NODE  20:   %0 = load i32, i32* %ROWNO, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  21:   store i32 0, i32* %retval, align 4 (points-to size: 0)
NODE  22:   %36 = load i32, i32* %retval, align 4 (points-to size: 1)
    -> null + 0
NODE  23:   ret i32 %36 (points-to size: 0)
NODE  24:   %1 = load i32, i32* %COLNO, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  25:   %2 = load i32, i32* %ROWNO, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  26:   %3 = load i32, i32* %COLNO, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  27:   %4 = load i32, i32* %ROWNO, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  28:   %5 = zext i32 %4 to i64 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  29:   %6 = load i32, i32* %COLNO, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  30:   %7 = zext i32 %6 to i64 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  31:   %8 = call i8* @llvm.stacksave() (points-to size: 1)
    ->   %8 = call i8* @llvm.stacksave() + 0
NODE  32:   store i8* %8, i8** %saved_stack, align 8 (points-to size: 0)
NODE  33:   %9 = mul nuw i64 %5, %7 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  34:   %vla = alloca i32, i64 %9, align 16 (points-to size: 1)
    ->   %vla = alloca i32, i64 %9, align 16 + 0
NODE  35:   store i64 %5, i64* %__vla_expr0, align 8 (points-to size: 0)
NODE  36:   store i64 %7, i64* %__vla_expr1, align 8 (points-to size: 0)
NODE  37:   store i32 0, i32* %i, align 4 (points-to size: 0)
NODE  38:   %10 = load i32, i32* %i, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  39:   %11 = load i32, i32* %ROWNO, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  40:   store i32 0, i32* %j, align 4 (points-to size: 0)
NODE  41:   store i32 0, i32* %STONE, align 4 (points-to size: 0)
NODE  42:   store i32 0, i32* %found, align 4 (points-to size: 0)
NODE  43:   store i32 0, i32* %xmin, align 4 (points-to size: 0)
NODE  44:   %12 = load i32, i32* %j, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  45:   %13 = load i32, i32* %COLNO, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  46:   %22 = load i32, i32* %found, align 4 (points-to size: 2)
    -> null + 0
    -> unknown + Offset::UNKNOWN
NODE  47:   %call11 = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  48:   store i32 %call11, i32* %num, align 4 (points-to size: 0)
NODE  49:   %14 = load i32, i32* %num, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  50:   %25 = phi i1 [ false, %for.cond20 ], [ %cmp21, %land.rhs ] (points-to size: 1)
    -> null + 0
NODE  51:   %23 = load i32, i32* %xmin, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  52:   %24 = load i32, i32* %ROWNO, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  53:   %15 = load i32, i32* %num, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  54:   %sub = sub nsw i32 0, %15 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  55:   store i32 %sub, i32* %num, align 4 (points-to size: 0)
NODE  56:   %16 = load i32, i32* %num, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  57:   %rem = srem i32 %16, 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  58:   %17 = load i32, i32* %i, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  59:   %idxprom = sext i32 %17 to i64 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  60:   %18 = mul nsw i64 %idxprom, %7 (points-to size: 1)
    -> null + Offset::UNKNOWN
NODE  61:   %arrayidx = getelementptr inbounds i32, i32* %vla, i64 %18 (points-to size: 1)
    ->   %vla = alloca i32, i64 %9, align 16 + Offset::UNKNOWN
NODE  62:   %19 = load i32, i32* %j, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  63:   %idxprom15 = sext i32 %19 to i64 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  64:   %arrayidx16 = getelementptr inbounds i32, i32* %arrayidx, i64 %idxpr ... (points-to size: 1)
    ->   %vla = alloca i32, i64 %9, align 16 + Offset::UNKNOWN
NODE  65:   store i32 %rem, i32* %arrayidx16, align 4 (points-to size: 0)
NODE  66:   %21 = load i32, i32* %i, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  67:   %inc18 = add nsw i32 %21, 1 (points-to size: 1)
    -> null + Offset::UNKNOWN
NODE  68:   store i32 %inc18, i32* %i, align 4 (points-to size: 0)
NODE  69:   store i32 0, i32* %y, align 4 (points-to size: 0)
NODE  70:   store i32 0, i32* %retval, align 4 (points-to size: 0)
NODE  71:   %35 = load i8*, i8** %saved_stack, align 8 (points-to size: 1)
    ->   %8 = call i8* @llvm.stacksave() + 0
NODE  72:   call void @llvm.stackrestore(i8* %35) (points-to size: 0)
NODE  73:   %20 = load i32, i32* %j, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  74:   %inc = add nsw i32 %20, 1 (points-to size: 1)
    -> null + Offset::UNKNOWN
NODE  75:   store i32 %inc, i32* %j, align 4 (points-to size: 0)
NODE  76:   %26 = load i32, i32* %y, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  77:   %27 = load i32, i32* %COLNO, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  78:   %sub24 = sub nsw i32 %27, 1 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  79:   %28 = load i32, i32* %xmin, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  80:   %idxprom27 = sext i32 %28 to i64 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  81:   %29 = mul nsw i64 %idxprom27, %7 (points-to size: 1)
    -> null + Offset::UNKNOWN
NODE  82:   %arrayidx28 = getelementptr inbounds i32, i32* %vla, i64 %29 (points-to size: 1)
    ->   %vla = alloca i32, i64 %9, align 16 + Offset::UNKNOWN
NODE  83:   %30 = load i32, i32* %y, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  84:   %idxprom29 = sext i32 %30 to i64 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  85:   %arrayidx30 = getelementptr inbounds i32, i32* %arrayidx28, i64 %idx ... (points-to size: 1)
    ->   %vla = alloca i32, i64 %9, align 16 + Offset::UNKNOWN
NODE  86:   %31 = load i32, i32* %arrayidx30, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  87:   %32 = load i32, i32* %STONE, align 4 (points-to size: 1)
    -> null + 0
NODE  88:   store i32 1, i32* %found, align 4 (points-to size: 0)
NODE  89:   %34 = load i32, i32* %xmin, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  90:   %inc38 = add nsw i32 %34, 1 (points-to size: 1)
    -> null + Offset::UNKNOWN
NODE  91:   store i32 %inc38, i32* %xmin, align 4 (points-to size: 0)
NODE  92:   %33 = load i32, i32* %y, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  93:   %inc35 = add nsw i32 %33, 1 (points-to size: 1)
    -> null + Offset::UNKNOWN
NODE  94:   store i32 %inc35, i32* %y, align 4 (points-to size: 0)
NODE  95: main (points-to size: 1)
    -> main + 0
