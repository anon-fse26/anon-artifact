NODE   3: <3> PSNodeType::ENTRY (points-to size: 0)
NODE   4:   %retval = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %retval = alloca i32, align 4 + 0
NODE   5:   store i32 0, i32* %retval, align 4 (points-to size: 0)
NODE   6: <6> PSNodeType::CALL (points-to size: 0)
NODE   7: <7> PSNodeType::ENTRY (points-to size: 0)
NODE   8:   %retval = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %retval = alloca i32, align 4 + 0
NODE   9:   %num = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %num = alloca i32, align 4 + 0
NODE  10:   %0 = load i32, i32* @flag, align 4 (points-to size: 2)
    -> null + 0
    -> unknown + Offset::UNKNOWN
NODE  11:   store i32 0, i32* %retval, align 4 (points-to size: 0)
NODE  12:   %7 = load i32, i32* %retval, align 4 (points-to size: 2)
    -> null + 0
    -> unknown + Offset::UNKNOWN
NODE  13:   ret i32 %7 (points-to size: 0)
NODE  14:   %1 = load i32, i32* @count, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  15:   %call = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  16:   store i32 %call, i32* %num, align 4 (points-to size: 0)
NODE  17:   %2 = load i32, i32* %num, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  18:   store i32 -1, i32* %retval, align 4 (points-to size: 0)
NODE  19:   %3 = load i32, i32* %num, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  20:   %rem = srem i32 %3, 1000 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  21:   store i32 %rem, i32* %num, align 4 (points-to size: 0)
NODE  22:   %4 = load i32, i32* %num, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  23:   %5 = load i32, i32* @count, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  24:   %inc = add nsw i32 %5, 1 (points-to size: 1)
    -> null + Offset::UNKNOWN
NODE  25:   store i32 %inc, i32* @count, align 4 (points-to size: 0)
NODE  26:   %6 = load i32, i32* %num, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  27:   store i32 %6, i32* %retval, align 4 (points-to size: 0)
NODE  28:   store i32 1, i32* @flag, align 4 (points-to size: 0)
NODE  29:   store i32 0, i32* %retval, align 4 (points-to size: 0)
NODE  30: read (points-to size: 1)
    -> read + 0
NODE  31: main (points-to size: 1)
    -> main + 0
NODE  32:   %call = call i32 @read() (points-to size: 0)
NODE  33:   ret i32 0 (points-to size: 1)
    -> null + 0
