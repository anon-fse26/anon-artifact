NODE   1: <1> PSNodeType::ENTRY (points-to size: 0)
NODE   2:   %retval = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %retval = alloca i32, align 4 + 0
NODE   3:   %max_msg_size = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %max_msg_size = alloca i32, align 4 + 0
NODE   4:   %buffer_read_offset = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %buffer_read_offset = alloca i32, align 4 + 0
NODE   5:   %buffer_bytes_left = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %buffer_bytes_left = alloca i32, align 4 + 0
NODE   6:   %size = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %size = alloca i32, align 4 + 0
NODE   7:   store i32 0, i32* %retval, align 4 (points-to size: 0)
NODE   8:   %call = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE   9:   store i32 %call, i32* %max_msg_size, align 4 (points-to size: 0)
NODE  10:   %call1 = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  11:   store i32 %call1, i32* %buffer_read_offset, align 4 (points-to size: 0)
NODE  12:   %call2 = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  13:   store i32 %call2, i32* %buffer_bytes_left, align 4 (points-to size: 0)
NODE  14:   %0 = load i32, i32* %max_msg_size, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  15:   store i32 0, i32* %retval, align 4 (points-to size: 0)
NODE  16:   %12 = load i32, i32* %retval, align 4 (points-to size: 1)
    -> null + 0
NODE  17:   ret i32 %12 (points-to size: 0)
NODE  18:   %1 = load i32, i32* %buffer_read_offset, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  19:   %2 = load i32, i32* %buffer_bytes_left, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  20:   store i32 64, i32* %size, align 4 (points-to size: 0)
NODE  21:   %3 = load i32, i32* %buffer_bytes_left, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  22:   %4 = load i32, i32* %size, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  23:   %div = sdiv i32 %4, 2 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  24:   %5 = load i32, i32* %size, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  25:   %mul = mul nsw i32 %5, 2 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  26:   store i32 %mul, i32* %size, align 4 (points-to size: 0)
NODE  27:   %6 = load i32, i32* %max_msg_size, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  28:   store i32 0, i32* %retval, align 4 (points-to size: 0)
NODE  29:   %7 = load i32, i32* %size, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  30:   %8 = load i32, i32* %max_msg_size, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  31:   %10 = load i32, i32* %size, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  32:   %11 = load i32, i32* %buffer_read_offset, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  33:   %sub = sub nsw i32 %10, %11 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  34:   store i32 %sub, i32* %buffer_bytes_left, align 4 (points-to size: 0)
NODE  35:   %9 = load i32, i32* %max_msg_size, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  36:   store i32 %9, i32* %size, align 4 (points-to size: 0)
NODE  37: main (points-to size: 1)
    -> main + 0
