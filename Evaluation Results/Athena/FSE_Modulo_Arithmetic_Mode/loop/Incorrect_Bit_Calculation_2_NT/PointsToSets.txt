NODE   1: <1> PSNodeType::ENTRY (points-to size: 0)
NODE   2:   %retval = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %retval = alloca i32, align 4 + 0
NODE   3:   %a0 = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %a0 = alloca i32, align 4 + 0
NODE   4:   %a1 = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %a1 = alloca i32, align 4 + 0
NODE   5:   store i32 0, i32* %retval, align 4 (points-to size: 0)
NODE   6:   %call = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE   7:   store i32 %call, i32* %a0, align 4 (points-to size: 0)
NODE   8:   %call1 = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE   9:   store i32 %call1, i32* %a1, align 4 (points-to size: 0)
NODE  10:   %0 = load i32, i32* %a0, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  11:   %and = and i32 %0, 1 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  12:   %1 = load i32, i32* %a1, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  13:   %shl = shl i32 %1, 31 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  14:   %2 = load i32, i32* %a0, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  15:   %shr = ashr i32 %2, 1 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  16:   %or = or i32 %shl, %shr (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  17:   store i32 %or, i32* %a0, align 4 (points-to size: 0)
NODE  18:   %3 = load i32, i32* %a1, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  19:   %shr2 = ashr i32 %3, 1 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  20:   store i32 %shr2, i32* %a1, align 4 (points-to size: 0)
NODE  21:   ret i32 0 (points-to size: 1)
    -> null + 0
NODE  22: main (points-to size: 1)
    -> main + 0
