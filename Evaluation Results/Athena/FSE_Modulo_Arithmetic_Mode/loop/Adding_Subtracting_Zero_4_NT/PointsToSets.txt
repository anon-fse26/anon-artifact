NODE   2: <2> PSNodeType::ENTRY (points-to size: 0)
NODE   3:   %retval = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %retval = alloca i32, align 4 + 0
NODE   4:   %count = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %count = alloca i32, align 4 + 0
NODE   5:   %ret = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %ret = alloca i32, align 4 + 0
NODE   6:   %buf = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %buf = alloca i32, align 4 + 0
NODE   7:   store i32 0, i32* %retval, align 4 (points-to size: 0)
NODE   8:   %call = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE   9:   store i32 %call, i32* %count, align 4 (points-to size: 0)
NODE  10:   %0 = load i32, i32* %count, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  11:   store i32 0, i32* %retval, align 4 (points-to size: 0)
NODE  12:   %9 = load i32, i32* %retval, align 4 (points-to size: 1)
    -> null + 0
NODE  13:   ret i32 %9 (points-to size: 0)
NODE  14:   store i32 0, i32* %buf, align 4 (points-to size: 0)
NODE  15:   %1 = load i32, i32* %count, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  16:   %2 = load i32, i32* %buf, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  17:   %3 = load i32, i32* %count, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  18: <18> PSNodeType::CALL (points-to size: 0)
NODE  19: <19> PSNodeType::ENTRY (points-to size: 0)
NODE  20: i32 %loc (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  21: i32 %len (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  22:   %retval = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %retval = alloca i32, align 4 + 0
NODE  23:   %loc.addr = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %loc.addr = alloca i32, align 4 + 0
NODE  24:   %len.addr = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %len.addr = alloca i32, align 4 + 0
NODE  25:   %count = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %count = alloca i32, align 4 + 0
NODE  26:   %num = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %num = alloca i32, align 4 + 0
NODE  27:   store i32 %loc, i32* %loc.addr, align 4 (points-to size: 0)
NODE  28:   store i32 %len, i32* %len.addr, align 4 (points-to size: 0)
NODE  29:   store i32 0, i32* %count, align 4 (points-to size: 0)
NODE  30:   %0 = load i32, i32* @flag, align 4 (points-to size: 2)
    -> null + 0
    -> unknown + Offset::UNKNOWN
NODE  31:   store i32 0, i32* %retval, align 4 (points-to size: 0)
NODE  32:   %12 = load i32, i32* %retval, align 4 (points-to size: 3)
    -> null + 0
    -> null + Offset::UNKNOWN
    -> unknown + Offset::UNKNOWN
NODE  33:   ret i32 %12 (points-to size: 0)
NODE  34:   %1 = load i32, i32* %loc.addr, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  35:   %2 = load i32, i32* %len.addr, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  36:   %call = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  37:   store i32 %call, i32* %num, align 4 (points-to size: 0)
NODE  38:   %3 = load i32, i32* %num, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  39:   %11 = load i32, i32* %count, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  40:   store i32 %11, i32* %retval, align 4 (points-to size: 0)
NODE  41:   store i32 -1, i32* %retval, align 4 (points-to size: 0)
NODE  42:   %4 = load i32, i32* %num, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  43:   %5 = load i32, i32* %num, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  44:   %sub = sub nsw i32 0, %5 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  45:   store i32 %sub, i32* %num, align 4 (points-to size: 0)
NODE  46:   %6 = load i32, i32* %num, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  47:   %rem = srem i32 %6, 1000 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  48:   store i32 %rem, i32* %num, align 4 (points-to size: 0)
NODE  49:   %7 = load i32, i32* %count, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  50:   %inc = add nsw i32 %7, 1 (points-to size: 1)
    -> null + Offset::UNKNOWN
NODE  51:   store i32 %inc, i32* %count, align 4 (points-to size: 0)
NODE  52:   %8 = load i32, i32* %num, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  53:   %9 = load i32, i32* %loc.addr, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  54:   %inc9 = add nsw i32 %9, 1 (points-to size: 1)
    -> null + Offset::UNKNOWN
NODE  55:   store i32 %inc9, i32* %loc.addr, align 4 (points-to size: 0)
NODE  56:   store i32 1, i32* @flag, align 4 (points-to size: 0)
NODE  57:   %10 = load i32, i32* %count, align 4 (points-to size: 1)
    -> null + Offset::UNKNOWN
NODE  58:   store i32 %10, i32* %retval, align 4 (points-to size: 0)
NODE  59: read (points-to size: 1)
    -> read + 0
NODE  60: main (points-to size: 1)
    -> main + 0
NODE  61:   %call2 = call i32 @read(i32 %2, i32 %3) (points-to size: 0)
NODE  62:   store i32 %call2, i32* %ret, align 4 (points-to size: 0)
NODE  63:   %4 = load i32, i32* %ret, align 4 (points-to size: 0)
NODE  64:   store i32 0, i32* %retval, align 4 (points-to size: 0)
NODE  65:   store i32 0, i32* %retval, align 4 (points-to size: 0)
NODE  66:   %5 = load i32, i32* %ret, align 4 (points-to size: 0)
NODE  67:   %6 = load i32, i32* %count, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  68:   %sub = sub nsw i32 %6, %5 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  69:   store i32 %sub, i32* %count, align 4 (points-to size: 0)
NODE  70:   %7 = load i32, i32* %ret, align 4 (points-to size: 0)
NODE  71:   %8 = load i32, i32* %buf, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  72:   %add = add nsw i32 %8, %7 (points-to size: 1)
    -> null + Offset::UNKNOWN
NODE  73:   store i32 %add, i32* %buf, align 4 (points-to size: 0)
