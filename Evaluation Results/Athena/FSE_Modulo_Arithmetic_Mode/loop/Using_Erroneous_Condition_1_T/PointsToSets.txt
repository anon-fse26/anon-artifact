NODE   1: <1> PSNodeType::ENTRY (points-to size: 0)
NODE   2:   %retval = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %retval = alloca i32, align 4 + 0
NODE   3:   %menu = alloca %struct.Node*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %menu = alloca %struct.Node*, align 8 + 0
NODE   4:   %pos = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %pos = alloca i32, align 4 + 0
NODE   5:   %direction = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %direction = alloca i32, align 4 + 0
NODE   6:   %action_id = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %action_id = alloca i32, align 4 + 0
NODE   7:   %start = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %start = alloca i32, align 4 + 0
NODE   8:   store i32 0, i32* %retval, align 4 (points-to size: 0)
NODE   9:   %call = call i8* @malloc(i64 8) [size: 8, heap: 1, zeroed: 0] (points-to size: 1)
    ->   %call = call i8* @malloc(i64 8) + 0
NODE  10:   %0 = bitcast i8* %call to %struct.Node* (points-to size: 1)
    ->   %call = call i8* @malloc(i64 8) + 0
NODE  11:   store %struct.Node* %0, %struct.Node** %menu, align 8 (points-to size: 0)
NODE  12:   %call1 = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  13:   %1 = load %struct.Node*, %struct.Node** %menu, align 8 (points-to size: 1)
    ->   %call = call i8* @malloc(i64 8) + 0
NODE  14:   %selected = getelementptr inbounds %struct.Node, %struct.Node* %1, i ... (points-to size: 1)
    ->   %call = call i8* @malloc(i64 8) + 4
NODE  15:   store i32 %call1, i32* %selected, align 4 (points-to size: 0)
NODE  16:   %call2 = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  17:   %2 = load %struct.Node*, %struct.Node** %menu, align 8 (points-to size: 1)
    ->   %call = call i8* @malloc(i64 8) + 0
NODE  18:   %size = getelementptr inbounds %struct.Node, %struct.Node* %2, i32 0 ... (points-to size: 1)
    ->   %call = call i8* @malloc(i64 8) + 0
NODE  19:   store i32 %call2, i32* %size, align 4 (points-to size: 0)
NODE  20:   %3 = load %struct.Node*, %struct.Node** %menu, align 8 (points-to size: 1)
    ->   %call = call i8* @malloc(i64 8) + 0
NODE  21:   %selected3 = getelementptr inbounds %struct.Node, %struct.Node* %3,  ... (points-to size: 1)
    ->   %call = call i8* @malloc(i64 8) + 4
NODE  22:   %4 = load i32, i32* %selected3, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  23:   store i32 0, i32* %retval, align 4 (points-to size: 0)
NODE  24:   %27 = load i32, i32* %retval, align 4 (points-to size: 1)
    -> null + 0
NODE  25:   ret i32 %27 (points-to size: 0)
NODE  26:   %5 = load %struct.Node*, %struct.Node** %menu, align 8 (points-to size: 1)
    ->   %call = call i8* @malloc(i64 8) + 0
NODE  27:   %size4 = getelementptr inbounds %struct.Node, %struct.Node* %5, i32  ... (points-to size: 1)
    ->   %call = call i8* @malloc(i64 8) + 0
NODE  28:   %6 = load i32, i32* %size4, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  29:   %7 = load %struct.Node*, %struct.Node** %menu, align 8 (points-to size: 1)
    ->   %call = call i8* @malloc(i64 8) + 0
NODE  30:   %selected6 = getelementptr inbounds %struct.Node, %struct.Node* %7,  ... (points-to size: 1)
    ->   %call = call i8* @malloc(i64 8) + 4
NODE  31:   %8 = load i32, i32* %selected6, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  32:   store i32 %8, i32* %pos, align 4 (points-to size: 0)
NODE  33:   %call7 = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  34:   store i32 %call7, i32* %action_id, align 4 (points-to size: 0)
NODE  35:   %9 = load i32, i32* %action_id, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  36:   %10 = load i32, i32* %pos, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  37:   %13 = load %struct.Node*, %struct.Node** %menu, align 8 (points-to size: 1)
    ->   %call = call i8* @malloc(i64 8) + 0
NODE  38:   %size12 = getelementptr inbounds %struct.Node, %struct.Node* %13, i3 ... (points-to size: 1)
    ->   %call = call i8* @malloc(i64 8) + 0
NODE  39:   %14 = load i32, i32* %size12, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  40:   %15 = load i32, i32* %pos, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  41:   %rem = srem i32 %15, %14 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  42:   store i32 %rem, i32* %pos, align 4 (points-to size: 0)
NODE  43:   %16 = load i32, i32* %pos, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  44:   store i32 %16, i32* %start, align 4 (points-to size: 0)
NODE  45:   %12 = load i32, i32* %pos, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  46:   %inc = add nsw i32 %12, 1 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  47:   store i32 %inc, i32* %pos, align 4 (points-to size: 0)
NODE  48:   store i32 1, i32* %direction, align 4 (points-to size: 0)
NODE  49:   %11 = load i32, i32* %pos, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  50:   %dec = add nsw i32 %11, -1 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  51:   store i32 %dec, i32* %pos, align 4 (points-to size: 0)
NODE  52:   store i32 -1, i32* %direction, align 4 (points-to size: 0)
NODE  53:   %17 = load i32, i32* %direction, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  54:   %18 = load i32, i32* %pos, align 4 (points-to size: 3)
    -> null + 0
    -> null + Offset::UNKNOWN
    -> unknown + Offset::UNKNOWN
NODE  55:   %add = add nsw i32 %18, %17 (points-to size: 2)
    -> null + Offset::UNKNOWN
    -> unknown + Offset::UNKNOWN
NODE  56:   store i32 %add, i32* %pos, align 4 (points-to size: 0)
NODE  57:   %19 = load i32, i32* %pos, align 4 (points-to size: 2)
    -> null + Offset::UNKNOWN
    -> unknown + Offset::UNKNOWN
NODE  58:   %20 = load %struct.Node*, %struct.Node** %menu, align 8 (points-to size: 1)
    ->   %call = call i8* @malloc(i64 8) + 0
NODE  59:   %size13 = getelementptr inbounds %struct.Node, %struct.Node* %20, i3 ... (points-to size: 1)
    ->   %call = call i8* @malloc(i64 8) + 0
NODE  60:   %21 = load i32, i32* %size13, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  61:   store i32 0, i32* %pos, align 4 (points-to size: 0)
NODE  62:   %22 = load i32, i32* %pos, align 4 (points-to size: 2)
    -> null + Offset::UNKNOWN
    -> unknown + Offset::UNKNOWN
NODE  63:   %25 = load i32, i32* %pos, align 4 (points-to size: 3)
    -> null + 0
    -> null + Offset::UNKNOWN
    -> unknown + Offset::UNKNOWN
NODE  64:   %26 = load i32, i32* %start, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  65:   %23 = load %struct.Node*, %struct.Node** %menu, align 8 (points-to size: 1)
    ->   %call = call i8* @malloc(i64 8) + 0
NODE  66:   %size19 = getelementptr inbounds %struct.Node, %struct.Node* %23, i3 ... (points-to size: 1)
    ->   %call = call i8* @malloc(i64 8) + 0
NODE  67:   %24 = load i32, i32* %size19, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  68:   %sub = sub nsw i32 %24, 1 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  69:   store i32 %sub, i32* %pos, align 4 (points-to size: 0)
NODE  70:   store i32 0, i32* %retval, align 4 (points-to size: 0)
NODE  71: main (points-to size: 1)
    -> main + 0
