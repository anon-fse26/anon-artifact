NODE   1: <1> PSNodeType::ENTRY (points-to size: 0)
NODE   2:   %retval = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %retval = alloca i32, align 4 + 0
NODE   3:   %i = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %i = alloca i32, align 4 + 0
NODE   4:   %base = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %base = alloca i32, align 4 + 0
NODE   5:   %count = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %count = alloca i32, align 4 + 0
NODE   6:   %old_ = alloca [10 x i32], align 16 [size: 40, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %old_ = alloca [10 x i32], align 16 + 0
NODE   7:   %new_ = alloca [10 x i32], align 16 [size: 40, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %new_ = alloca [10 x i32], align 16 + 0
NODE   8:   %j = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %j = alloca i32, align 4 + 0
NODE   9:   %number = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %number = alloca i32, align 4 + 0
NODE  10:   store i32 0, i32* %retval, align 4 (points-to size: 0)
NODE  11:   store i32 0, i32* %i, align 4 (points-to size: 0)
NODE  12:   %call = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  13:   store i32 %call, i32* %base, align 4 (points-to size: 0)
NODE  14:   %call1 = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  15:   store i32 %call1, i32* %count, align 4 (points-to size: 0)
NODE  16:   store i32 0, i32* %j, align 4 (points-to size: 0)
NODE  17:   %0 = load i32, i32* %j, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  18:   %call2 = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  19:   %1 = load i32, i32* %j, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  20:   %idxprom = sext i32 %1 to i64 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  21:   %arrayidx = getelementptr inbounds [10 x i32], [10 x i32]* %old_, i6 ... (points-to size: 1)
    ->   %old_ = alloca [10 x i32], align 16 + Offset::UNKNOWN
NODE  22:   store i32 %call2, i32* %arrayidx, align 4 (points-to size: 0)
NODE  23:   %call3 = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  24:   %2 = load i32, i32* %j, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  25:   %idxprom4 = sext i32 %2 to i64 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  26:   %arrayidx5 = getelementptr inbounds [10 x i32], [10 x i32]* %new_, i ... (points-to size: 1)
    ->   %new_ = alloca [10 x i32], align 16 + Offset::UNKNOWN
NODE  27:   store i32 %call3, i32* %arrayidx5, align 4 (points-to size: 0)
NODE  28:   %arrayidx6 = getelementptr inbounds [10 x i32], [10 x i32]* %old_, i ... (points-to size: 1)
    ->   %old_ = alloca [10 x i32], align 16 + 36
NODE  29:   store i32 0, i32* %arrayidx6, align 4 (points-to size: 0)
NODE  30:   %arrayidx7 = getelementptr inbounds [10 x i32], [10 x i32]* %new_, i ... (points-to size: 1)
    ->   %new_ = alloca [10 x i32], align 16 + 36
NODE  31:   store i32 0, i32* %arrayidx7, align 4 (points-to size: 0)
NODE  32:   %3 = load i32, i32* %j, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  33:   %inc = add nsw i32 %3, 1 (points-to size: 1)
    -> null + Offset::UNKNOWN
NODE  34:   store i32 %inc, i32* %j, align 4 (points-to size: 0)
NODE  35:   %4 = load i32, i32* %base, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  36:   %5 = load i32, i32* %count, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  37:   %6 = load i32, i32* %base, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  38:   store i32 %6, i32* %number, align 4 (points-to size: 0)
NODE  39:   ret i32 0 (points-to size: 1)
    -> null + 0
NODE  40:   %7 = load i32, i32* %i, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  41:   %idxprom10 = sext i32 %7 to i64 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  42:   %arrayidx11 = getelementptr inbounds [10 x i32], [10 x i32]* %old_,  ... (points-to size: 1)
    ->   %old_ = alloca [10 x i32], align 16 + Offset::UNKNOWN
NODE  43:   %8 = load i32, i32* %arrayidx11, align 4 (points-to size: 2)
    -> null + 0
    -> unknown + Offset::UNKNOWN
NODE  44:   %9 = load i32, i32* %i, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  45:   %idxprom12 = sext i32 %9 to i64 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  46:   %arrayidx13 = getelementptr inbounds [10 x i32], [10 x i32]* %new_,  ... (points-to size: 1)
    ->   %new_ = alloca [10 x i32], align 16 + Offset::UNKNOWN
NODE  47:   %10 = load i32, i32* %arrayidx13, align 4 (points-to size: 2)
    -> null + 0
    -> unknown + Offset::UNKNOWN
NODE  48:   %11 = load i32, i32* %number, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  49:   %inc16 = add nsw i32 %11, 1 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  50:   store i32 %inc16, i32* %number, align 4 (points-to size: 0)
NODE  51:   %12 = load i32, i32* %count, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  52:   %13 = load i32, i32* %i, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  53:   %inc18 = add nsw i32 %13, 1 (points-to size: 1)
    -> null + Offset::UNKNOWN
NODE  54:   store i32 %inc18, i32* %i, align 4 (points-to size: 0)
NODE  55:   %14 = load i32, i32* %base, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  56:   %add = add nsw i32 %14, 8 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  57:   store i32 %add, i32* %base, align 4 (points-to size: 0)
NODE  58: main (points-to size: 1)
    -> main + 0
