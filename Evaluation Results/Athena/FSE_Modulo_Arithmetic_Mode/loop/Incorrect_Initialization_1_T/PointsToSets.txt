NODE   2: <2> PSNodeType::ENTRY (points-to size: 0)
NODE   3:   %retval = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %retval = alloca i32, align 4 + 0
NODE   4:   %buf = alloca [100 x i8], align 16 [size: 100, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %buf = alloca [100 x i8], align 16 + 0
NODE   5:   %i = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %i = alloca i32, align 4 + 0
NODE   6:   %p = alloca i8*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %p = alloca i8*, align 8 + 0
NODE   7:   %len = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %len = alloca i32, align 4 + 0
NODE   8:   store i32 0, i32* %retval, align 4 (points-to size: 0)
NODE   9:   store i32 0, i32* %i, align 4 (points-to size: 0)
NODE  10:   %0 = load i32, i32* %i, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  11:   %call = call signext i8 @__VERIFIER_nondet_char() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  12:   %1 = load i32, i32* %i, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  13:   %idxprom = sext i32 %1 to i64 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  14:   %arrayidx = getelementptr inbounds [100 x i8], [100 x i8]* %buf, i64 ... (points-to size: 1)
    ->   %buf = alloca [100 x i8], align 16 + Offset::UNKNOWN
NODE  15:   store i8 %call, i8* %arrayidx, align 1 (points-to size: 0)
NODE  16:   %arrayidx1 = getelementptr inbounds [100 x i8], [100 x i8]* %buf, i6 ... (points-to size: 1)
    ->   %buf = alloca [100 x i8], align 16 + 99
NODE  17:   store i8 0, i8* %arrayidx1, align 1 (points-to size: 0)
NODE  18:   %arraydecay = getelementptr inbounds [100 x i8], [100 x i8]* %buf, i ... (points-to size: 1)
    ->   %buf = alloca [100 x i8], align 16 + 0
NODE  19:   store i8* %arraydecay, i8** %p, align 8 (points-to size: 0)
NODE  20:   %2 = load i32, i32* %i, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  21:   %inc = add nsw i32 %2, 1 (points-to size: 1)
    -> null + Offset::UNKNOWN
NODE  22:   store i32 %inc, i32* %i, align 4 (points-to size: 0)
NODE  23:   %3 = load i8*, i8** %p, align 8 (points-to size: 2)
    ->   %buf = alloca [100 x i8], align 16 + 0
    ->   %buf = alloca [100 x i8], align 16 + Offset::UNKNOWN
NODE  24:   %4 = load i8, i8* %3, align 1 (points-to size: 2)
    -> null + 0
    -> unknown + Offset::UNKNOWN
NODE  25:   %5 = load i8*, i8** %p, align 8 (points-to size: 2)
    ->   %buf = alloca [100 x i8], align 16 + 0
    ->   %buf = alloca [100 x i8], align 16 + Offset::UNKNOWN
NODE  26: <26> PSNodeType::CALL (points-to size: 0)
NODE  27: <27> PSNodeType::ENTRY (points-to size: 0)
NODE  28: i8* %strSrc (points-to size: 2)
    ->   %buf = alloca [100 x i8], align 16 + 0
    ->   %buf = alloca [100 x i8], align 16 + Offset::UNKNOWN
NODE  29: i8* %str (points-to size: 1)
    -> @.str = private unnamed_addr constant [2 x i8] c\"\0A\00\", align 1 + 0
NODE  30:   %retval = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %retval = alloca i32, align 4 + 0
NODE  31:   %strSrc.addr = alloca i8*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %strSrc.addr = alloca i8*, align 8 + 0
NODE  32:   %str.addr = alloca i8*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %str.addr = alloca i8*, align 8 + 0
NODE  33:   %s = alloca i8*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %s = alloca i8*, align 8 + 0
NODE  34:   %t = alloca i8*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %t = alloca i8*, align 8 + 0
NODE  35:   store i8* %strSrc, i8** %strSrc.addr, align 8 (points-to size: 0)
NODE  36:   store i8* %str, i8** %str.addr, align 8 (points-to size: 0)
NODE  37:   %0 = load i8*, i8** %strSrc.addr, align 8 (points-to size: 2)
    ->   %buf = alloca [100 x i8], align 16 + 0
    ->   %buf = alloca [100 x i8], align 16 + Offset::UNKNOWN
NODE  38:   store i8* %0, i8** %t, align 8 (points-to size: 0)
NODE  39:   %1 = load i8*, i8** %t, align 8 (points-to size: 2)
    ->   %buf = alloca [100 x i8], align 16 + 0
    ->   %buf = alloca [100 x i8], align 16 + Offset::UNKNOWN
NODE  40:   %2 = load i8, i8* %1, align 1 (points-to size: 2)
    -> null + 0
    -> unknown + Offset::UNKNOWN
NODE  41:   %conv = sext i8 %2 to i32 (points-to size: 2)
    -> null + 0
    -> unknown + Offset::UNKNOWN
NODE  42:   %3 = load i8*, i8** %str.addr, align 8 (points-to size: 1)
    -> @.str = private unnamed_addr constant [2 x i8] c\"\0A\00\", align 1 + 0
NODE  43:   store i8* %3, i8** %s, align 8 (points-to size: 0)
NODE  44:   %14 = load i32, i32* %retval, align 4 (points-to size: 2)
    -> null + 0
    -> unknown + Offset::UNKNOWN
NODE  45:   ret i32 %14 (points-to size: 0)
NODE  46:   store i32 0, i32* %retval, align 4 (points-to size: 0)
NODE  47:   %4 = load i8*, i8** %s, align 8 (points-to size: 3)
    -> @.str = private unnamed_addr constant [2 x i8] c\"\0A\00\", align 1 + 0
    -> @.str = private unnamed_addr constant [2 x i8] c\"\0A\00\", align 1 + 1
    -> @.str = private unnamed_addr constant [2 x i8] c\"\0A\00\", align 1 + Offset::UNKNOWN
NODE  48:   %5 = load i8, i8* %4, align 1 (points-to size: 0)
NODE  49:   %conv3 = sext i8 %5 to i32 (points-to size: 0)
NODE  50:   %6 = load i8*, i8** %t, align 8 (points-to size: 2)
    ->   %buf = alloca [100 x i8], align 16 + 0
    ->   %buf = alloca [100 x i8], align 16 + Offset::UNKNOWN
NODE  51:   %7 = load i8, i8* %6, align 1 (points-to size: 2)
    -> null + 0
    -> unknown + Offset::UNKNOWN
NODE  52:   %conv7 = sext i8 %7 to i32 (points-to size: 2)
    -> null + 0
    -> unknown + Offset::UNKNOWN
NODE  53:   %8 = load i8*, i8** %s, align 8 (points-to size: 3)
    -> @.str = private unnamed_addr constant [2 x i8] c\"\0A\00\", align 1 + 0
    -> @.str = private unnamed_addr constant [2 x i8] c\"\0A\00\", align 1 + 1
    -> @.str = private unnamed_addr constant [2 x i8] c\"\0A\00\", align 1 + Offset::UNKNOWN
NODE  54:   %9 = load i8, i8* %8, align 1 (points-to size: 0)
NODE  55:   %conv8 = sext i8 %9 to i32 (points-to size: 0)
NODE  56:   %13 = load i8*, i8** %t, align 8 (points-to size: 2)
    ->   %buf = alloca [100 x i8], align 16 + 0
    ->   %buf = alloca [100 x i8], align 16 + Offset::UNKNOWN
NODE  57:   %incdec.ptr12 = getelementptr inbounds i8, i8* %13, i32 1 (points-to size: 1)
    ->   %buf = alloca [100 x i8], align 16 + Offset::UNKNOWN
NODE  58:   store i8* %incdec.ptr12, i8** %t, align 8 (points-to size: 0)
NODE  59:   %10 = load i8*, i8** %t, align 8 (points-to size: 2)
    ->   %buf = alloca [100 x i8], align 16 + 0
    ->   %buf = alloca [100 x i8], align 16 + Offset::UNKNOWN
NODE  60:   %11 = load i8*, i8** %strSrc.addr, align 8 (points-to size: 2)
    ->   %buf = alloca [100 x i8], align 16 + 0
    ->   %buf = alloca [100 x i8], align 16 + Offset::UNKNOWN
NODE  61:   %sub.ptr.lhs.cast = ptrtoint i8* %10 to i64 (points-to size: 1)
    ->   %buf = alloca [100 x i8], align 16 + Offset::UNKNOWN
NODE  62:   %sub.ptr.rhs.cast = ptrtoint i8* %11 to i64 (points-to size: 1)
    ->   %buf = alloca [100 x i8], align 16 + Offset::UNKNOWN
NODE  63:   %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast (points-to size: 1)
    ->   %buf = alloca [100 x i8], align 16 + Offset::UNKNOWN
NODE  64:   %conv11 = trunc i64 %sub.ptr.sub to i32 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  65:   store i32 %conv11, i32* %retval, align 4 (points-to size: 0)
NODE  66:   %12 = load i8*, i8** %s, align 8 (points-to size: 3)
    -> @.str = private unnamed_addr constant [2 x i8] c\"\0A\00\", align 1 + 0
    -> @.str = private unnamed_addr constant [2 x i8] c\"\0A\00\", align 1 + 1
    -> @.str = private unnamed_addr constant [2 x i8] c\"\0A\00\", align 1 + Offset::UNKNOWN
NODE  67:   %incdec.ptr = getelementptr inbounds i8, i8* %12, i32 1 (points-to size: 1)
    -> @.str = private unnamed_addr constant [2 x i8] c\"\0A\00\", align 1 + Offset::UNKNOWN
NODE  68:   store i8* %incdec.ptr, i8** %s, align 8 (points-to size: 0)
NODE  69: strcspn (points-to size: 1)
    -> strcspn + 0
NODE  70: main (points-to size: 1)
    -> main + 0
NODE  71:   %call2 = call i32 @strcspn(i8* %5, i8* getelementptr inbounds ([2 x  ... (points-to size: 0)
NODE  72:   store i32 %call2, i32* %len, align 4 (points-to size: 0)
NODE  73:   %6 = load i32, i32* %len, align 4 (points-to size: 0)
NODE  74:   %7 = load i8*, i8** %p, align 8 (points-to size: 2)
    ->   %buf = alloca [100 x i8], align 16 + 0
    ->   %buf = alloca [100 x i8], align 16 + Offset::UNKNOWN
NODE  75:   %idx.ext = sext i32 %6 to i64 (points-to size: 0)
NODE  76:   %add.ptr = getelementptr inbounds i8, i8* %7, i64 %idx.ext (points-to size: 1)
    ->   %buf = alloca [100 x i8], align 16 + Offset::UNKNOWN
NODE  77:   store i8* %add.ptr, i8** %p, align 8 (points-to size: 0)
NODE  78:   %8 = load i8*, i8** %p, align 8 (points-to size: 1)
    ->   %buf = alloca [100 x i8], align 16 + Offset::UNKNOWN
NODE  79:   %9 = load i8, i8* %8, align 1 (points-to size: 2)
    -> null + 0
    -> unknown + Offset::UNKNOWN
NODE  80:   ret i32 0 (points-to size: 1)
    -> null + 0
NODE  81:   %10 = load i8*, i8** %p, align 8 (points-to size: 1)
    ->   %buf = alloca [100 x i8], align 16 + Offset::UNKNOWN
NODE  82:   %incdec.ptr = getelementptr inbounds i8, i8* %10, i32 1 (points-to size: 1)
    ->   %buf = alloca [100 x i8], align 16 + Offset::UNKNOWN
NODE  83:   store i8* %incdec.ptr, i8** %p, align 8 (points-to size: 0)
NODE  84: i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0) (points-to size: 1)
    -> @.str = private unnamed_addr constant [2 x i8] c\"\0A\00\", align 1 + 0
