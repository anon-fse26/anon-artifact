NODE   1: <1> PSNodeType::ENTRY (points-to size: 0)
NODE   2:   %retval = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %retval = alloca i32, align 4 + 0
NODE   3:   %length = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %length = alloca i32, align 4 + 0
NODE   4:   %n = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %n = alloca i32, align 4 + 0
NODE   5:   %nondetArea = alloca i8*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %nondetArea = alloca i8*, align 8 + 0
NODE   6:   %nondetString = alloca i8*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %nondetString = alloca i8*, align 8 + 0
NODE   7:   store i32 0, i32* %retval, align 4 (points-to size: 0)
NODE   8:   %call = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE   9:   store i32 %call, i32* %length, align 4 (points-to size: 0)
NODE  10:   %call1 = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  11:   store i32 %call1, i32* %n, align 4 (points-to size: 0)
NODE  12:   %0 = load i32, i32* %length, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  13:   store i32 1, i32* %length, align 4 (points-to size: 0)
NODE  14:   %1 = load i32, i32* %n, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  15:   store i32 1, i32* %n, align 4 (points-to size: 0)
NODE  16:   %2 = load i32, i32* %n, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  17:   %conv = sext i32 %2 to i64 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  18:   %mul = mul i64 %conv, 1 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  19:   %3 = alloca i8, i64 %mul, align 16 (points-to size: 1)
    ->   %3 = alloca i8, i64 %mul, align 16 + 0
NODE  20:   store i8* %3, i8** %nondetArea, align 8 (points-to size: 0)
NODE  21:   %4 = load i32, i32* %length, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  22:   %conv5 = sext i32 %4 to i64 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  23:   %mul6 = mul i64 %conv5, 1 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  24:   %5 = alloca i8, i64 %mul6, align 16 (points-to size: 1)
    ->   %5 = alloca i8, i64 %mul6, align 16 + 0
NODE  25:   store i8* %5, i8** %nondetString, align 8 (points-to size: 0)
NODE  26:   %6 = load i8*, i8** %nondetString, align 8 (points-to size: 1)
    ->   %5 = alloca i8, i64 %mul6, align 16 + 0
NODE  27:   %7 = load i32, i32* %length, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  28:   %sub = sub nsw i32 %7, 1 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  29:   %idxprom = sext i32 %sub to i64 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  30:   %arrayidx = getelementptr inbounds i8, i8* %6, i64 %idxprom (points-to size: 1)
    ->   %5 = alloca i8, i64 %mul6, align 16 + Offset::UNKNOWN
NODE  31:   store i8 0, i8* %arrayidx, align 1 (points-to size: 0)
NODE  32:   %8 = load i8*, i8** %nondetArea, align 8 (points-to size: 1)
    ->   %3 = alloca i8, i64 %mul, align 16 + 0
NODE  33:   %9 = load i8*, i8** %nondetString, align 8 (points-to size: 1)
    ->   %5 = alloca i8, i64 %mul6, align 16 + 0
NODE  34:   %10 = load i32, i32* %n, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  35:   %conv7 = sext i32 %10 to i64 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  36: <36> PSNodeType::CALL (points-to size: 0)
NODE  37: <37> PSNodeType::ENTRY (points-to size: 0)
NODE  38: i8* %dst (points-to size: 1)
    ->   %3 = alloca i8, i64 %mul, align 16 + 0
NODE  39: i8* %src (points-to size: 1)
    ->   %5 = alloca i8, i64 %mul6, align 16 + 0
NODE  40: i64 %n (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  41:   %dst.addr = alloca i8*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %dst.addr = alloca i8*, align 8 + 0
NODE  42:   %src.addr = alloca i8*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %src.addr = alloca i8*, align 8 + 0
NODE  43:   %n.addr = alloca i64, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %n.addr = alloca i64, align 8 + 0
NODE  44:   %d = alloca i8*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %d = alloca i8*, align 8 + 0
NODE  45:   %s = alloca i8*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %s = alloca i8*, align 8 + 0
NODE  46:   store i8* %dst, i8** %dst.addr, align 8 (points-to size: 0)
NODE  47:   store i8* %src, i8** %src.addr, align 8 (points-to size: 0)
NODE  48:   store i64 %n, i64* %n.addr, align 8 (points-to size: 0)
NODE  49:   %0 = load i64, i64* %n.addr, align 8 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  50:   %1 = load i8*, i8** %dst.addr, align 8 (points-to size: 1)
    ->   %3 = alloca i8, i64 %mul, align 16 + 0
NODE  51:   store i8* %1, i8** %d, align 8 (points-to size: 0)
NODE  52:   %2 = load i8*, i8** %src.addr, align 8 (points-to size: 1)
    ->   %5 = alloca i8, i64 %mul6, align 16 + 0
NODE  53:   store i8* %2, i8** %s, align 8 (points-to size: 0)
NODE  54:   %3 = load i8*, i8** %dst.addr, align 8 (points-to size: 1)
    ->   %3 = alloca i8, i64 %mul, align 16 + 0
NODE  55:   %4 = load i64, i64* %n.addr, align 8 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  56:   %arrayidx = getelementptr inbounds i8, i8* %3, i64 %4 (points-to size: 1)
    ->   %3 = alloca i8, i64 %mul, align 16 + Offset::UNKNOWN
NODE  57:   store i8* %arrayidx, i8** %dst.addr, align 8 (points-to size: 0)
NODE  58:   %12 = load i8*, i8** %dst.addr, align 8 (points-to size: 2)
    ->   %3 = alloca i8, i64 %mul, align 16 + 0
    ->   %3 = alloca i8, i64 %mul, align 16 + Offset::UNKNOWN
NODE  59:   ret i8* %12 (points-to size: 2)
    ->   %3 = alloca i8, i64 %mul, align 16 + 0
    ->   %3 = alloca i8, i64 %mul, align 16 + Offset::UNKNOWN
NODE  60:   %5 = load i8*, i8** %s, align 8 (points-to size: 2)
    ->   %5 = alloca i8, i64 %mul6, align 16 + 0
    ->   %5 = alloca i8, i64 %mul6, align 16 + Offset::UNKNOWN
NODE  61:   %incdec.ptr = getelementptr inbounds i8, i8* %5, i32 1 (points-to size: 1)
    ->   %5 = alloca i8, i64 %mul6, align 16 + Offset::UNKNOWN
NODE  62:   store i8* %incdec.ptr, i8** %s, align 8 (points-to size: 0)
NODE  63:   %6 = load i8, i8* %5, align 1 (points-to size: 1)
    -> null + 0
NODE  64:   %7 = load i8*, i8** %d, align 8 (points-to size: 2)
    ->   %3 = alloca i8, i64 %mul, align 16 + 0
    ->   %3 = alloca i8, i64 %mul, align 16 + Offset::UNKNOWN
NODE  65:   %incdec.ptr1 = getelementptr inbounds i8, i8* %7, i32 1 (points-to size: 1)
    ->   %3 = alloca i8, i64 %mul, align 16 + Offset::UNKNOWN
NODE  66:   store i8* %incdec.ptr1, i8** %d, align 8 (points-to size: 0)
NODE  67:   store i8 %6, i8* %7, align 1 (points-to size: 0)
NODE  68:   %conv = sext i8 %6 to i32 (points-to size: 1)
    -> null + 0
NODE  69:   %8 = load i8*, i8** %d, align 8 (points-to size: 1)
    ->   %3 = alloca i8, i64 %mul, align 16 + Offset::UNKNOWN
NODE  70:   %add.ptr = getelementptr inbounds i8, i8* %8, i64 -1 (points-to size: 1)
    ->   %3 = alloca i8, i64 %mul, align 16 + Offset::UNKNOWN
NODE  71:   store i8* %add.ptr, i8** %dst.addr, align 8 (points-to size: 0)
NODE  72:   %9 = load i64, i64* %n.addr, align 8 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  73:   %dec = add i64 %9, -1 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  74:   store i64 %dec, i64* %n.addr, align 8 (points-to size: 0)
NODE  75:   %11 = load i64, i64* %n.addr, align 8 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  76:   %dec8 = add i64 %11, -1 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  77:   store i64 %dec8, i64* %n.addr, align 8 (points-to size: 0)
NODE  78:   %10 = load i8*, i8** %d, align 8 (points-to size: 1)
    ->   %3 = alloca i8, i64 %mul, align 16 + Offset::UNKNOWN
NODE  79:   %incdec.ptr7 = getelementptr inbounds i8, i8* %10, i32 1 (points-to size: 1)
    ->   %3 = alloca i8, i64 %mul, align 16 + Offset::UNKNOWN
NODE  80:   store i8* %incdec.ptr7, i8** %d, align 8 (points-to size: 0)
NODE  81:   store i8 0, i8* %10, align 1 (points-to size: 0)
NODE  82: cstpncpy (points-to size: 1)
    -> cstpncpy + 0
NODE  83: main (points-to size: 1)
    -> main + 0
NODE  84:   %call8 = call i8* @cstpncpy(i8* %8, i8* %9, i64 %conv7) (points-to size: 2)
    ->   %3 = alloca i8, i64 %mul, align 16 + 0
    ->   %3 = alloca i8, i64 %mul, align 16 + Offset::UNKNOWN
NODE  85:   ret i32 0 (points-to size: 1)
    -> null + 0
