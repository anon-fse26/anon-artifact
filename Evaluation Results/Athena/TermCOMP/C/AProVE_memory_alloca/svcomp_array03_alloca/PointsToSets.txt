NODE   1: <1> PSNodeType::ENTRY (points-to size: 0)
NODE   2:   %retval = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %retval = alloca i32, align 4 + 0
NODE   3:   %array_size = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %array_size = alloca i32, align 4 + 0
NODE   4:   %numbers = alloca i32*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %numbers = alloca i32*, align 8 + 0
NODE   5:   store i32 0, i32* %retval, align 4 (points-to size: 0)
NODE   6:   %call = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE   7:   store i32 %call, i32* %array_size, align 4 (points-to size: 0)
NODE   8:   %0 = load i32, i32* %array_size, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE   9:   store i32 1, i32* %array_size, align 4 (points-to size: 0)
NODE  10:   %1 = load i32, i32* %array_size, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  11:   %conv = sext i32 %1 to i64 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  12:   %mul = mul i64 %conv, 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  13:   %2 = alloca i8, i64 %mul, align 16 (points-to size: 1)
    ->   %2 = alloca i8, i64 %mul, align 16 + 0
NODE  14:   %3 = bitcast i8* %2 to i32* (points-to size: 1)
    ->   %2 = alloca i8, i64 %mul, align 16 + 0
NODE  15:   store i32* %3, i32** %numbers, align 8 (points-to size: 0)
NODE  16:   %4 = load i32*, i32** %numbers, align 8 (points-to size: 1)
    ->   %2 = alloca i8, i64 %mul, align 16 + 0
NODE  17:   %5 = load i32, i32* %array_size, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  18: <18> PSNodeType::CALL (points-to size: 0)
NODE  19: <19> PSNodeType::ENTRY (points-to size: 0)
NODE  20: i32* %a (points-to size: 1)
    ->   %2 = alloca i8, i64 %mul, align 16 + 0
NODE  21: i32 %N (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  22:   %a.addr = alloca i32*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %a.addr = alloca i32*, align 8 + 0
NODE  23:   %N.addr = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %N.addr = alloca i32, align 4 + 0
NODE  24:   %i = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %i = alloca i32, align 4 + 0
NODE  25:   %res = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %res = alloca i32, align 4 + 0
NODE  26:   store i32* %a, i32** %a.addr, align 8 (points-to size: 0)
NODE  27:   store i32 %N, i32* %N.addr, align 4 (points-to size: 0)
NODE  28:   store i32 0, i32* %i, align 4 (points-to size: 0)
NODE  29:   %0 = load i32, i32* %i, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  30:   %1 = load i32, i32* %N.addr, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  31:   store i32 1, i32* %res, align 4 (points-to size: 0)
NODE  32:   %2 = load i32*, i32** %a.addr, align 8 (points-to size: 1)
    ->   %2 = alloca i8, i64 %mul, align 16 + 0
NODE  33:   %3 = load i32, i32* %i, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  34:   %idxprom = sext i32 %3 to i64 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  35:   %arrayidx = getelementptr inbounds i32, i32* %2, i64 %idxprom (points-to size: 1)
    ->   %2 = alloca i8, i64 %mul, align 16 + Offset::UNKNOWN
NODE  36:   %4 = load i32, i32* %arrayidx, align 4 (points-to size: 3)
    -> null + 0
    -> null + Offset::UNKNOWN
    -> unknown + Offset::UNKNOWN
NODE  37:   ret void (points-to size: 0)
NODE  38:   store i32 1, i32* %res, align 4 (points-to size: 0)
NODE  39:   %5 = load i32*, i32** %a.addr, align 8 (points-to size: 1)
    ->   %2 = alloca i8, i64 %mul, align 16 + 0
NODE  40:   %6 = load i32, i32* %i, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  41:   %idxprom2 = sext i32 %6 to i64 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  42:   %arrayidx3 = getelementptr inbounds i32, i32* %5, i64 %idxprom2 (points-to size: 1)
    ->   %2 = alloca i8, i64 %mul, align 16 + Offset::UNKNOWN
NODE  43:   %7 = load i32, i32* %arrayidx3, align 4 (points-to size: 3)
    -> null + 0
    -> null + Offset::UNKNOWN
    -> unknown + Offset::UNKNOWN
NODE  44:   %8 = load i32*, i32** %a.addr, align 8 (points-to size: 1)
    ->   %2 = alloca i8, i64 %mul, align 16 + 0
NODE  45:   %9 = load i32, i32* %i, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  46:   %idxprom7 = sext i32 %9 to i64 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  47:   %arrayidx8 = getelementptr inbounds i32, i32* %8, i64 %idxprom7 (points-to size: 1)
    ->   %2 = alloca i8, i64 %mul, align 16 + Offset::UNKNOWN
NODE  48:   %10 = load i32, i32* %arrayidx8, align 4 (points-to size: 3)
    -> null + 0
    -> null + Offset::UNKNOWN
    -> unknown + Offset::UNKNOWN
NODE  49:   store i32 0, i32* %res, align 4 (points-to size: 0)
NODE  50:   %11 = load i32, i32* %res, align 4 (points-to size: 3)
    -> null + 0
    -> null + Offset::UNKNOWN
    -> unknown + Offset::UNKNOWN
NODE  51:   %12 = load i32*, i32** %a.addr, align 8 (points-to size: 1)
    ->   %2 = alloca i8, i64 %mul, align 16 + 0
NODE  52:   %13 = load i32, i32* %i, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  53:   %idxprom10 = sext i32 %13 to i64 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  54:   %arrayidx11 = getelementptr inbounds i32, i32* %12, i64 %idxprom10 (points-to size: 1)
    ->   %2 = alloca i8, i64 %mul, align 16 + Offset::UNKNOWN
NODE  55:   %14 = load i32, i32* %arrayidx11, align 4 (points-to size: 3)
    -> null + 0
    -> null + Offset::UNKNOWN
    -> unknown + Offset::UNKNOWN
NODE  56:   %mul = mul nsw i32 %11, %14 (points-to size: 2)
    -> null + Offset::UNKNOWN
    -> unknown + Offset::UNKNOWN
NODE  57:   store i32 %mul, i32* %res, align 4 (points-to size: 0)
NODE  58:   %15 = load i32*, i32** %a.addr, align 8 (points-to size: 1)
    ->   %2 = alloca i8, i64 %mul, align 16 + 0
NODE  59:   %16 = load i32, i32* %i, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  60:   %idxprom12 = sext i32 %16 to i64 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  61:   %arrayidx13 = getelementptr inbounds i32, i32* %15, i64 %idxprom12 (points-to size: 1)
    ->   %2 = alloca i8, i64 %mul, align 16 + Offset::UNKNOWN
NODE  62:   %17 = load i32, i32* %arrayidx13, align 4 (points-to size: 3)
    -> null + 0
    -> null + Offset::UNKNOWN
    -> unknown + Offset::UNKNOWN
NODE  63:   %dec = add nsw i32 %17, -1 (points-to size: 2)
    -> null + Offset::UNKNOWN
    -> unknown + Offset::UNKNOWN
NODE  64:   store i32 %dec, i32* %arrayidx13, align 4 (points-to size: 0)
NODE  65:   %18 = load i32, i32* %res, align 4 (points-to size: 3)
    -> null + 0
    -> null + Offset::UNKNOWN
    -> unknown + Offset::UNKNOWN
NODE  66:   %19 = load i32*, i32** %a.addr, align 8 (points-to size: 1)
    ->   %2 = alloca i8, i64 %mul, align 16 + 0
NODE  67:   %20 = load i32, i32* %i, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  68:   %idxprom14 = sext i32 %20 to i64 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  69:   %arrayidx15 = getelementptr inbounds i32, i32* %19, i64 %idxprom14 (points-to size: 1)
    ->   %2 = alloca i8, i64 %mul, align 16 + Offset::UNKNOWN
NODE  70:   store i32 %18, i32* %arrayidx15, align 4 (points-to size: 0)
NODE  71:   %21 = load i32, i32* %i, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  72:   %inc = add nsw i32 %21, 1 (points-to size: 1)
    -> null + Offset::UNKNOWN
NODE  73:   store i32 %inc, i32* %i, align 4 (points-to size: 0)
NODE  74: test_fun (points-to size: 1)
    -> test_fun + 0
NODE  75: main (points-to size: 1)
    -> main + 0
NODE  76:   call void @test_fun(i32* %4, i32 %5) (points-to size: 0)
NODE  77:   %6 = load i32, i32* %retval, align 4 (points-to size: 1)
    -> null + 0
NODE  78:   ret i32 %6 (points-to size: 0)
