NODE   1: <1> PSNodeType::ENTRY (points-to size: 0)
NODE   2:   %retval = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %retval = alloca i32, align 4 + 0
NODE   3:   %x = alloca i32*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %x = alloca i32*, align 8 + 0
NODE   4:   %y = alloca i32*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %y = alloca i32*, align 8 + 0
NODE   5:   %z = alloca i32*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %z = alloca i32*, align 8 + 0
NODE   6:   %m = alloca i32*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %m = alloca i32*, align 8 + 0
NODE   7:   %n = alloca i32*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %n = alloca i32*, align 8 + 0
NODE   8:   store i32 0, i32* %retval, align 4 (points-to size: 0)
NODE   9:   %0 = alloca i8, i64 4, align 16 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %0 = alloca i8, i64 4, align 16 + 0
NODE  10:   %1 = bitcast i8* %0 to i32* (points-to size: 1)
    ->   %0 = alloca i8, i64 4, align 16 + 0
NODE  11:   store i32* %1, i32** %x, align 8 (points-to size: 0)
NODE  12:   %2 = alloca i8, i64 4, align 16 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %2 = alloca i8, i64 4, align 16 + 0
NODE  13:   %3 = bitcast i8* %2 to i32* (points-to size: 1)
    ->   %2 = alloca i8, i64 4, align 16 + 0
NODE  14:   store i32* %3, i32** %y, align 8 (points-to size: 0)
NODE  15:   %4 = alloca i8, i64 4, align 16 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %4 = alloca i8, i64 4, align 16 + 0
NODE  16:   %5 = bitcast i8* %4 to i32* (points-to size: 1)
    ->   %4 = alloca i8, i64 4, align 16 + 0
NODE  17:   store i32* %5, i32** %z, align 8 (points-to size: 0)
NODE  18:   %6 = alloca i8, i64 4, align 16 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %6 = alloca i8, i64 4, align 16 + 0
NODE  19:   %7 = bitcast i8* %6 to i32* (points-to size: 1)
    ->   %6 = alloca i8, i64 4, align 16 + 0
NODE  20:   store i32* %7, i32** %m, align 8 (points-to size: 0)
NODE  21:   %8 = alloca i8, i64 4, align 16 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %8 = alloca i8, i64 4, align 16 + 0
NODE  22:   %9 = bitcast i8* %8 to i32* (points-to size: 1)
    ->   %8 = alloca i8, i64 4, align 16 + 0
NODE  23:   store i32* %9, i32** %n, align 8 (points-to size: 0)
NODE  24:   %call = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  25:   %10 = load i32*, i32** %x, align 8 (points-to size: 1)
    ->   %0 = alloca i8, i64 4, align 16 + 0
NODE  26:   store i32 1, i32* %10, align 4 (points-to size: 0)
NODE  27:   %11 = load i32*, i32** %x, align 8 (points-to size: 1)
    ->   %0 = alloca i8, i64 4, align 16 + 0
NODE  28:   store i32 -1, i32* %11, align 4 (points-to size: 0)
NODE  29:   %12 = load i32*, i32** %y, align 8 (points-to size: 1)
    ->   %2 = alloca i8, i64 4, align 16 + 0
NODE  30:   %13 = load i32, i32* %12, align 4 (points-to size: 0)
NODE  31:   %14 = load i32*, i32** %z, align 8 (points-to size: 1)
    ->   %4 = alloca i8, i64 4, align 16 + 0
NODE  32:   %15 = load i32, i32* %14, align 4 (points-to size: 0)
NODE  33:   %16 = phi i1 [ false, %while.cond ], [ %cmp1, %land.rhs ] (points-to size: 1)
    -> null + 0
NODE  34:   %17 = load i32*, i32** %y, align 8 (points-to size: 1)
    ->   %2 = alloca i8, i64 4, align 16 + 0
NODE  35:   %18 = load i32, i32* %17, align 4 (points-to size: 0)
NODE  36:   %19 = load i32*, i32** %x, align 8 (points-to size: 1)
    ->   %0 = alloca i8, i64 4, align 16 + 0
NODE  37:   %20 = load i32, i32* %19, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  38:   %add = add nsw i32 %18, %20 (points-to size: 0)
NODE  39:   %21 = load i32*, i32** %y, align 8 (points-to size: 1)
    ->   %2 = alloca i8, i64 4, align 16 + 0
NODE  40:   store i32 %add, i32* %21, align 4 (points-to size: 0)
NODE  41:   %22 = load i32*, i32** %z, align 8 (points-to size: 1)
    ->   %4 = alloca i8, i64 4, align 16 + 0
NODE  42:   %23 = load i32, i32* %22, align 4 (points-to size: 0)
NODE  43:   %24 = load i32*, i32** %x, align 8 (points-to size: 1)
    ->   %0 = alloca i8, i64 4, align 16 + 0
NODE  44:   %25 = load i32, i32* %24, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  45:   %sub = sub nsw i32 %23, %25 (points-to size: 0)
NODE  46:   %26 = load i32*, i32** %z, align 8 (points-to size: 1)
    ->   %4 = alloca i8, i64 4, align 16 + 0
NODE  47:   store i32 %sub, i32* %26, align 4 (points-to size: 0)
NODE  48:   ret i32 0 (points-to size: 1)
    -> null + 0
NODE  49: main (points-to size: 1)
    -> main + 0
