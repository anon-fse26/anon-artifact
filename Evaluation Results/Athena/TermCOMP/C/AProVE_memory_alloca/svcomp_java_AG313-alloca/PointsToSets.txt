NODE   1: <1> PSNodeType::ENTRY (points-to size: 0)
NODE   2:   %retval = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %retval = alloca i32, align 4 + 0
NODE   3:   store i32 0, i32* %retval, align 4 (points-to size: 0)
NODE   4:   %call = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE   5:   %call1 = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE   6: <6> PSNodeType::CALL (points-to size: 0)
NODE   7: <7> PSNodeType::ENTRY (points-to size: 0)
NODE   8: i32 %x (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE   9: i32 %y (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  10:   %retval = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %retval = alloca i32, align 4 + 0
NODE  11:   %x.addr = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %x.addr = alloca i32, align 4 + 0
NODE  12:   %y.addr = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %y.addr = alloca i32, align 4 + 0
NODE  13:   %x_ref = alloca i32*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %x_ref = alloca i32*, align 8 + 0
NODE  14:   %y_ref = alloca i32*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %y_ref = alloca i32*, align 8 + 0
NODE  15:   %i = alloca i32*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %i = alloca i32*, align 8 + 0
NODE  16:   store i32 %x, i32* %x.addr, align 4 (points-to size: 0)
NODE  17:   store i32 %y, i32* %y.addr, align 4 (points-to size: 0)
NODE  18:   %0 = alloca i8, i64 4, align 16 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %0 = alloca i8, i64 4, align 16 + 0
NODE  19:   %1 = bitcast i8* %0 to i32* (points-to size: 1)
    ->   %0 = alloca i8, i64 4, align 16 + 0
NODE  20:   store i32* %1, i32** %x_ref, align 8 (points-to size: 0)
NODE  21:   %2 = alloca i8, i64 4, align 16 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %2 = alloca i8, i64 4, align 16 + 0
NODE  22:   %3 = bitcast i8* %2 to i32* (points-to size: 1)
    ->   %2 = alloca i8, i64 4, align 16 + 0
NODE  23:   store i32* %3, i32** %y_ref, align 8 (points-to size: 0)
NODE  24:   %4 = alloca i8, i64 4, align 16 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %4 = alloca i8, i64 4, align 16 + 0
NODE  25:   %5 = bitcast i8* %4 to i32* (points-to size: 1)
    ->   %4 = alloca i8, i64 4, align 16 + 0
NODE  26:   store i32* %5, i32** %i, align 8 (points-to size: 0)
NODE  27:   %6 = load i32, i32* %x.addr, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  28:   %7 = load i32*, i32** %x_ref, align 8 (points-to size: 1)
    ->   %0 = alloca i8, i64 4, align 16 + 0
NODE  29:   store i32 %6, i32* %7, align 4 (points-to size: 0)
NODE  30:   %8 = load i32, i32* %y.addr, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  31:   %9 = load i32*, i32** %y_ref, align 8 (points-to size: 1)
    ->   %2 = alloca i8, i64 4, align 16 + 0
NODE  32:   store i32 %8, i32* %9, align 4 (points-to size: 0)
NODE  33:   %10 = load i32*, i32** %i, align 8 (points-to size: 1)
    ->   %4 = alloca i8, i64 4, align 16 + 0
NODE  34:   store i32 0, i32* %10, align 4 (points-to size: 0)
NODE  35:   %11 = load i32*, i32** %x_ref, align 8 (points-to size: 1)
    ->   %0 = alloca i8, i64 4, align 16 + 0
NODE  36:   %12 = load i32, i32* %11, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  37:   store i32 0, i32* %retval, align 4 (points-to size: 0)
NODE  38:   %27 = load i32, i32* %retval, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  39:   ret i32 %27 (points-to size: 0)
NODE  40:   %13 = load i32*, i32** %x_ref, align 8 (points-to size: 1)
    ->   %0 = alloca i8, i64 4, align 16 + 0
NODE  41:   %14 = load i32, i32* %13, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  42:   %15 = load i32*, i32** %y_ref, align 8 (points-to size: 1)
    ->   %2 = alloca i8, i64 4, align 16 + 0
NODE  43:   %16 = load i32, i32* %15, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  44:   %17 = phi i1 [ false, %while.cond ], [ %cmp2, %land.rhs ] (points-to size: 1)
    -> null + 0
NODE  45:   %18 = load i32*, i32** %i, align 8 (points-to size: 1)
    ->   %4 = alloca i8, i64 4, align 16 + 0
NODE  46:   %19 = load i32, i32* %18, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  47:   %add = add nsw i32 %19, 1 (points-to size: 1)
    -> null + Offset::UNKNOWN
NODE  48:   store i32 %add, i32* %18, align 4 (points-to size: 0)
NODE  49:   %20 = load i32*, i32** %x_ref, align 8 (points-to size: 1)
    ->   %0 = alloca i8, i64 4, align 16 + 0
NODE  50:   %21 = load i32, i32* %20, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  51:   %sub = sub nsw i32 %21, 1 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  52:   %22 = load i32*, i32** %y_ref, align 8 (points-to size: 1)
    ->   %2 = alloca i8, i64 4, align 16 + 0
NODE  53:   %23 = load i32, i32* %22, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  54:   %sub3 = sub nsw i32 %23, 1 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  55:   %sub4 = sub nsw i32 %sub, %sub3 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  56:   %24 = load i32*, i32** %x_ref, align 8 (points-to size: 1)
    ->   %0 = alloca i8, i64 4, align 16 + 0
NODE  57:   store i32 %sub4, i32* %24, align 4 (points-to size: 0)
NODE  58:   %25 = load i32*, i32** %i, align 8 (points-to size: 1)
    ->   %4 = alloca i8, i64 4, align 16 + 0
NODE  59:   %26 = load i32, i32* %25, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  60:   store i32 %26, i32* %retval, align 4 (points-to size: 0)
NODE  61: quot (points-to size: 1)
    -> quot + 0
NODE  62: main (points-to size: 1)
    -> main + 0
NODE  63:   %call2 = call i32 @quot(i32 %call, i32 %call1) (points-to size: 0)
NODE  64:   ret i32 %call2 (points-to size: 0)
