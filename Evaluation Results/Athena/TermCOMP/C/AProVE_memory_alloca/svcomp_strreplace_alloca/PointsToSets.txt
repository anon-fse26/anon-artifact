NODE   1: <1> PSNodeType::ENTRY (points-to size: 0)
NODE   2:   %retval = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %retval = alloca i32, align 4 + 0
NODE   3:   %length1 = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %length1 = alloca i32, align 4 + 0
NODE   4:   %nondetString1 = alloca i8*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %nondetString1 = alloca i8*, align 8 + 0
NODE   5:   store i32 0, i32* %retval, align 4 (points-to size: 0)
NODE   6:   %call = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE   7:   store i32 %call, i32* %length1, align 4 (points-to size: 0)
NODE   8:   %0 = load i32, i32* %length1, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE   9:   store i32 1, i32* %length1, align 4 (points-to size: 0)
NODE  10:   %1 = load i32, i32* %length1, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  11:   %conv = sext i32 %1 to i64 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  12:   %mul = mul i64 %conv, 1 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  13:   %2 = alloca i8, i64 %mul, align 16 (points-to size: 1)
    ->   %2 = alloca i8, i64 %mul, align 16 + 0
NODE  14:   store i8* %2, i8** %nondetString1, align 8 (points-to size: 0)
NODE  15:   %3 = load i8*, i8** %nondetString1, align 8 (points-to size: 1)
    ->   %2 = alloca i8, i64 %mul, align 16 + 0
NODE  16:   %4 = load i32, i32* %length1, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  17:   %sub = sub nsw i32 %4, 1 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  18:   %idxprom = sext i32 %sub to i64 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  19:   %arrayidx = getelementptr inbounds i8, i8* %3, i64 %idxprom (points-to size: 1)
    ->   %2 = alloca i8, i64 %mul, align 16 + Offset::UNKNOWN
NODE  20:   store i8 0, i8* %arrayidx, align 1 (points-to size: 0)
NODE  21:   %5 = load i8*, i8** %nondetString1, align 8 (points-to size: 1)
    ->   %2 = alloca i8, i64 %mul, align 16 + 0
NODE  22:   %call1 = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  23:   %conv2 = trunc i32 %call1 to i8 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  24:   %call3 = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  25:   %conv4 = trunc i32 %call3 to i8 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  26: <26> PSNodeType::CALL (points-to size: 0)
NODE  27: <27> PSNodeType::ENTRY (points-to size: 0)
NODE  28: i8* %s (points-to size: 1)
    ->   %2 = alloca i8, i64 %mul, align 16 + 0
NODE  29: i8 %old (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  30: i8 %_new (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  31:   %s.addr = alloca i8*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %s.addr = alloca i8*, align 8 + 0
NODE  32:   %old.addr = alloca i8, align 1 [size: 1, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %old.addr = alloca i8, align 1 + 0
NODE  33:   %_new.addr = alloca i8, align 1 [size: 1, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %_new.addr = alloca i8, align 1 + 0
NODE  34:   %p = alloca i8*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %p = alloca i8*, align 8 + 0
NODE  35:   %numReplaced = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %numReplaced = alloca i32, align 4 + 0
NODE  36:   store i8* %s, i8** %s.addr, align 8 (points-to size: 0)
NODE  37:   store i8 %old, i8* %old.addr, align 1 (points-to size: 0)
NODE  38:   store i8 %_new, i8* %_new.addr, align 1 (points-to size: 0)
NODE  39:   %0 = load i8*, i8** %s.addr, align 8 (points-to size: 1)
    ->   %2 = alloca i8, i64 %mul, align 16 + 0
NODE  40:   store i8* %0, i8** %p, align 8 (points-to size: 0)
NODE  41:   store i32 0, i32* %numReplaced, align 4 (points-to size: 0)
NODE  42:   %1 = load i8*, i8** %p, align 8 (points-to size: 2)
    ->   %2 = alloca i8, i64 %mul, align 16 + 0
    ->   %2 = alloca i8, i64 %mul, align 16 + Offset::UNKNOWN
NODE  43:   %2 = load i8, i8* %1, align 1 (points-to size: 2)
    -> null + 0
    -> unknown + Offset::UNKNOWN
NODE  44:   %conv = sext i8 %2 to i32 (points-to size: 2)
    -> null + 0
    -> unknown + Offset::UNKNOWN
NODE  45:   %3 = load i8*, i8** %p, align 8 (points-to size: 2)
    ->   %2 = alloca i8, i64 %mul, align 16 + 0
    ->   %2 = alloca i8, i64 %mul, align 16 + Offset::UNKNOWN
NODE  46:   %4 = load i8, i8* %3, align 1 (points-to size: 2)
    -> null + 0
    -> unknown + Offset::UNKNOWN
NODE  47:   %conv2 = sext i8 %4 to i32 (points-to size: 2)
    -> null + 0
    -> unknown + Offset::UNKNOWN
NODE  48:   %5 = load i8, i8* %old.addr, align 1 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  49:   %conv3 = sext i8 %5 to i32 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  50:   %10 = load i32, i32* %numReplaced, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  51:   ret i32 %10 (points-to size: 0)
NODE  52:   %6 = load i8, i8* %_new.addr, align 1 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  53:   %7 = load i8*, i8** %p, align 8 (points-to size: 2)
    ->   %2 = alloca i8, i64 %mul, align 16 + 0
    ->   %2 = alloca i8, i64 %mul, align 16 + Offset::UNKNOWN
NODE  54:   store i8 %6, i8* %7, align 1 (points-to size: 0)
NODE  55:   %8 = load i32, i32* %numReplaced, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  56:   %inc = add nsw i32 %8, 1 (points-to size: 1)
    -> null + Offset::UNKNOWN
NODE  57:   store i32 %inc, i32* %numReplaced, align 4 (points-to size: 0)
NODE  58:   %9 = load i8*, i8** %p, align 8 (points-to size: 2)
    ->   %2 = alloca i8, i64 %mul, align 16 + 0
    ->   %2 = alloca i8, i64 %mul, align 16 + Offset::UNKNOWN
NODE  59:   %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1 (points-to size: 1)
    ->   %2 = alloca i8, i64 %mul, align 16 + Offset::UNKNOWN
NODE  60:   store i8* %incdec.ptr, i8** %p, align 8 (points-to size: 0)
NODE  61: cstrreplace (points-to size: 1)
    -> cstrreplace + 0
NODE  62: main (points-to size: 1)
    -> main + 0
NODE  63:   %call5 = call i32 @cstrreplace(i8* %5, i8 signext %conv2, i8 signext ... (points-to size: 0)
NODE  64:   ret i32 %call5 (points-to size: 0)
