NODE   1: <1> PSNodeType::ENTRY (points-to size: 0)
NODE   2:   %retval = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %retval = alloca i32, align 4 + 0
NODE   3:   store i32 0, i32* %retval, align 4 (points-to size: 0)
NODE   4:   %call = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE   5:   %call1 = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE   6: <6> PSNodeType::CALL (points-to size: 0)
NODE   7: <7> PSNodeType::ENTRY (points-to size: 0)
NODE   8: i32 %x (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE   9: i32 %y (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  10:   %x.addr = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %x.addr = alloca i32, align 4 + 0
NODE  11:   %y.addr = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %y.addr = alloca i32, align 4 + 0
NODE  12:   %x_ref = alloca i32*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %x_ref = alloca i32*, align 8 + 0
NODE  13:   %y_ref = alloca i32*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %y_ref = alloca i32*, align 8 + 0
NODE  14:   store i32 %x, i32* %x.addr, align 4 (points-to size: 0)
NODE  15:   store i32 %y, i32* %y.addr, align 4 (points-to size: 0)
NODE  16:   %0 = alloca i8, i64 4, align 16 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %0 = alloca i8, i64 4, align 16 + 0
NODE  17:   %1 = bitcast i8* %0 to i32* (points-to size: 1)
    ->   %0 = alloca i8, i64 4, align 16 + 0
NODE  18:   store i32* %1, i32** %x_ref, align 8 (points-to size: 0)
NODE  19:   %2 = alloca i8, i64 4, align 16 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %2 = alloca i8, i64 4, align 16 + 0
NODE  20:   %3 = bitcast i8* %2 to i32* (points-to size: 1)
    ->   %2 = alloca i8, i64 4, align 16 + 0
NODE  21:   store i32* %3, i32** %y_ref, align 8 (points-to size: 0)
NODE  22:   %4 = load i32, i32* %x.addr, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  23:   %5 = load i32*, i32** %x_ref, align 8 (points-to size: 1)
    ->   %0 = alloca i8, i64 4, align 16 + 0
NODE  24:   store i32 %4, i32* %5, align 4 (points-to size: 0)
NODE  25:   %6 = load i32, i32* %y.addr, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  26:   %7 = load i32*, i32** %y_ref, align 8 (points-to size: 1)
    ->   %2 = alloca i8, i64 4, align 16 + 0
NODE  27:   store i32 %6, i32* %7, align 4 (points-to size: 0)
NODE  28:   %8 = load i32*, i32** %x_ref, align 8 (points-to size: 1)
    ->   %0 = alloca i8, i64 4, align 16 + 0
NODE  29:   %9 = load i32, i32* %8, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  30:   %10 = load i32*, i32** %y_ref, align 8 (points-to size: 1)
    ->   %2 = alloca i8, i64 4, align 16 + 0
NODE  31:   %11 = load i32, i32* %10, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  32:   %12 = phi i1 [ false, %while.cond ], [ %cmp1, %land.rhs ] (points-to size: 1)
    -> null + 0
NODE  33:   %13 = load i32*, i32** %x_ref, align 8 (points-to size: 1)
    ->   %0 = alloca i8, i64 4, align 16 + 0
NODE  34:   %14 = load i32, i32* %13, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  35:   %15 = load i32*, i32** %y_ref, align 8 (points-to size: 1)
    ->   %2 = alloca i8, i64 4, align 16 + 0
NODE  36:   %16 = load i32, i32* %15, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  37:   %27 = load i32*, i32** %x_ref, align 8 (points-to size: 1)
    ->   %0 = alloca i8, i64 4, align 16 + 0
NODE  38:   %28 = load i32, i32* %27, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  39:   %29 = load i32*, i32** %y_ref, align 8 (points-to size: 1)
    ->   %2 = alloca i8, i64 4, align 16 + 0
NODE  40:   %30 = load i32, i32* %29, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  41:   %add = add nsw i32 %28, %30 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  42:   ret i32 %add (points-to size: 0)
NODE  43:   %17 = load i32*, i32** %x_ref, align 8 (points-to size: 1)
    ->   %0 = alloca i8, i64 4, align 16 + 0
NODE  44:   %18 = load i32, i32* %17, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  45:   %22 = load i32*, i32** %y_ref, align 8 (points-to size: 1)
    ->   %2 = alloca i8, i64 4, align 16 + 0
NODE  46:   %23 = load i32, i32* %22, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  47:   %19 = load i32*, i32** %x_ref, align 8 (points-to size: 1)
    ->   %0 = alloca i8, i64 4, align 16 + 0
NODE  48:   %20 = load i32, i32* %19, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  49:   %sub = sub nsw i32 %20, 1 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  50:   %21 = load i32*, i32** %x_ref, align 8 (points-to size: 1)
    ->   %0 = alloca i8, i64 4, align 16 + 0
NODE  51:   store i32 %sub, i32* %21, align 4 (points-to size: 0)
NODE  52:   %24 = load i32*, i32** %y_ref, align 8 (points-to size: 1)
    ->   %2 = alloca i8, i64 4, align 16 + 0
NODE  53:   %25 = load i32, i32* %24, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  54:   %sub9 = sub nsw i32 %25, 1 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  55:   %26 = load i32*, i32** %y_ref, align 8 (points-to size: 1)
    ->   %2 = alloca i8, i64 4, align 16 + 0
NODE  56:   store i32 %sub9, i32* %26, align 4 (points-to size: 0)
NODE  57: test_fun (points-to size: 1)
    -> test_fun + 0
NODE  58: main (points-to size: 1)
    -> main + 0
NODE  59:   %call2 = call i32 @test_fun(i32 %call, i32 %call1) (points-to size: 0)
NODE  60:   ret i32 %call2 (points-to size: 0)
