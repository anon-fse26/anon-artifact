NODE   1: <1> PSNodeType::ENTRY (points-to size: 0)
NODE   2:   %retval = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %retval = alloca i32, align 4 + 0
NODE   3:   store i32 0, i32* %retval, align 4 (points-to size: 0)
NODE   4:   %call = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE   5: <5> PSNodeType::CALL (points-to size: 0)
NODE   6: <6> PSNodeType::ENTRY (points-to size: 0)
NODE   7: i32 %d (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE   8:   %d.addr = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %d.addr = alloca i32, align 4 + 0
NODE   9:   %d_ref = alloca i32*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %d_ref = alloca i32*, align 8 + 0
NODE  10:   %x = alloca i32*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %x = alloca i32*, align 8 + 0
NODE  11:   %y = alloca i32*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %y = alloca i32*, align 8 + 0
NODE  12:   %k = alloca i32*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %k = alloca i32*, align 8 + 0
NODE  13:   %z = alloca i32*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %z = alloca i32*, align 8 + 0
NODE  14:   store i32 %d, i32* %d.addr, align 4 (points-to size: 0)
NODE  15:   %0 = alloca i8, i64 4, align 16 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %0 = alloca i8, i64 4, align 16 + 0
NODE  16:   %1 = bitcast i8* %0 to i32* (points-to size: 1)
    ->   %0 = alloca i8, i64 4, align 16 + 0
NODE  17:   store i32* %1, i32** %d_ref, align 8 (points-to size: 0)
NODE  18:   %2 = alloca i8, i64 4, align 16 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %2 = alloca i8, i64 4, align 16 + 0
NODE  19:   %3 = bitcast i8* %2 to i32* (points-to size: 1)
    ->   %2 = alloca i8, i64 4, align 16 + 0
NODE  20:   store i32* %3, i32** %x, align 8 (points-to size: 0)
NODE  21:   %4 = alloca i8, i64 4, align 16 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %4 = alloca i8, i64 4, align 16 + 0
NODE  22:   %5 = bitcast i8* %4 to i32* (points-to size: 1)
    ->   %4 = alloca i8, i64 4, align 16 + 0
NODE  23:   store i32* %5, i32** %y, align 8 (points-to size: 0)
NODE  24:   %6 = alloca i8, i64 4, align 16 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %6 = alloca i8, i64 4, align 16 + 0
NODE  25:   %7 = bitcast i8* %6 to i32* (points-to size: 1)
    ->   %6 = alloca i8, i64 4, align 16 + 0
NODE  26:   store i32* %7, i32** %k, align 8 (points-to size: 0)
NODE  27:   %8 = alloca i8, i64 4, align 16 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %8 = alloca i8, i64 4, align 16 + 0
NODE  28:   %9 = bitcast i8* %8 to i32* (points-to size: 1)
    ->   %8 = alloca i8, i64 4, align 16 + 0
NODE  29:   store i32* %9, i32** %z, align 8 (points-to size: 0)
NODE  30:   %10 = load i32, i32* %d.addr, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  31:   %11 = load i32*, i32** %d_ref, align 8 (points-to size: 1)
    ->   %0 = alloca i8, i64 4, align 16 + 0
NODE  32:   store i32 %10, i32* %11, align 4 (points-to size: 0)
NODE  33:   %12 = load i32*, i32** %x, align 8 (points-to size: 1)
    ->   %2 = alloca i8, i64 4, align 16 + 0
NODE  34:   store i32 1, i32* %12, align 4 (points-to size: 0)
NODE  35:   %13 = load i32*, i32** %y, align 8 (points-to size: 1)
    ->   %4 = alloca i8, i64 4, align 16 + 0
NODE  36:   store i32 1, i32* %13, align 4 (points-to size: 0)
NODE  37:   %14 = load i32*, i32** %k, align 8 (points-to size: 1)
    ->   %6 = alloca i8, i64 4, align 16 + 0
NODE  38:   store i32 1, i32* %14, align 4 (points-to size: 0)
NODE  39:   %15 = load i32*, i32** %z, align 8 (points-to size: 1)
    ->   %8 = alloca i8, i64 4, align 16 + 0
NODE  40:   store i32 1, i32* %15, align 4 (points-to size: 0)
NODE  41:   %16 = load i32*, i32** %k, align 8 (points-to size: 1)
    ->   %6 = alloca i8, i64 4, align 16 + 0
NODE  42:   %17 = load i32, i32* %16, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  43:   ret void (points-to size: 0)
NODE  44:   %18 = load i32*, i32** %z, align 8 (points-to size: 1)
    ->   %8 = alloca i8, i64 4, align 16 + 0
NODE  45:   %19 = load i32, i32* %18, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  46:   %20 = load i32*, i32** %k, align 8 (points-to size: 1)
    ->   %6 = alloca i8, i64 4, align 16 + 0
NODE  47:   %21 = load i32, i32* %20, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  48:   %22 = load i32*, i32** %z, align 8 (points-to size: 1)
    ->   %8 = alloca i8, i64 4, align 16 + 0
NODE  49:   %23 = load i32, i32* %22, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  50:   %mul = mul nsw i32 2, %23 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  51:   %24 = load i32*, i32** %z, align 8 (points-to size: 1)
    ->   %8 = alloca i8, i64 4, align 16 + 0
NODE  52:   store i32 %mul, i32* %24, align 4 (points-to size: 0)
NODE  53:   %25 = load i32*, i32** %x, align 8 (points-to size: 1)
    ->   %2 = alloca i8, i64 4, align 16 + 0
NODE  54:   %26 = load i32, i32* %25, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  55:   %27 = load i32*, i32** %y, align 8 (points-to size: 1)
    ->   %4 = alloca i8, i64 4, align 16 + 0
NODE  56:   %28 = load i32, i32* %27, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  57:   %29 = phi i1 [ false, %while.cond2 ], [ %cmp4, %land.rhs ] (points-to size: 1)
    -> null + 0
NODE  58:   %call = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  59:   %39 = load i32*, i32** %y, align 8 (points-to size: 1)
    ->   %4 = alloca i8, i64 4, align 16 + 0
NODE  60:   %40 = load i32, i32* %39, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  61:   %41 = load i32*, i32** %d_ref, align 8 (points-to size: 1)
    ->   %0 = alloca i8, i64 4, align 16 + 0
NODE  62:   %42 = load i32, i32* %41, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  63:   %sub9 = sub nsw i32 %40, %42 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  64:   %43 = load i32*, i32** %y, align 8 (points-to size: 1)
    ->   %4 = alloca i8, i64 4, align 16 + 0
NODE  65:   store i32 %sub9, i32* %43, align 4 (points-to size: 0)
NODE  66:   %30 = load i32*, i32** %x, align 8 (points-to size: 1)
    ->   %2 = alloca i8, i64 4, align 16 + 0
NODE  67:   %31 = load i32, i32* %30, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  68:   %32 = load i32*, i32** %d_ref, align 8 (points-to size: 1)
    ->   %0 = alloca i8, i64 4, align 16 + 0
NODE  69:   %33 = load i32, i32* %32, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  70:   %sub = sub nsw i32 %31, %33 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  71:   %34 = load i32*, i32** %x, align 8 (points-to size: 1)
    ->   %2 = alloca i8, i64 4, align 16 + 0
NODE  72:   store i32 %sub, i32* %34, align 4 (points-to size: 0)
NODE  73:   %call7 = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  74:   %35 = load i32*, i32** %y, align 8 (points-to size: 1)
    ->   %4 = alloca i8, i64 4, align 16 + 0
NODE  75:   store i32 %call7, i32* %35, align 4 (points-to size: 0)
NODE  76:   %36 = load i32*, i32** %z, align 8 (points-to size: 1)
    ->   %8 = alloca i8, i64 4, align 16 + 0
NODE  77:   %37 = load i32, i32* %36, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  78:   %sub8 = sub nsw i32 %37, 1 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  79:   %38 = load i32*, i32** %z, align 8 (points-to size: 1)
    ->   %8 = alloca i8, i64 4, align 16 + 0
NODE  80:   store i32 %sub8, i32* %38, align 4 (points-to size: 0)
NODE  81: f (points-to size: 1)
    -> f + 0
NODE  82: main (points-to size: 1)
    -> main + 0
NODE  83:   call void @f(i32 1) (points-to size: 0)
NODE  84:   %0 = load i32, i32* %retval, align 4 (points-to size: 1)
    -> null + 0
NODE  85:   ret i32 %0 (points-to size: 0)
NODE  86: <86> PSNodeType::CALL (points-to size: 0)
NODE  87:   call void @f(i32 2) (points-to size: 0)
