NODE   1: <1> PSNodeType::ENTRY (points-to size: 0)
NODE   2:   %retval = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %retval = alloca i32, align 4 + 0
NODE   3:   %length = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %length = alloca i32, align 4 + 0
NODE   4:   %n = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %n = alloca i32, align 4 + 0
NODE   5:   %c = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %c = alloca i32, align 4 + 0
NODE   6:   %nondetArea = alloca i8*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %nondetArea = alloca i8*, align 8 + 0
NODE   7:   store i32 0, i32* %retval, align 4 (points-to size: 0)
NODE   8:   %call = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE   9:   store i32 %call, i32* %length, align 4 (points-to size: 0)
NODE  10:   %call1 = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  11:   store i32 %call1, i32* %n, align 4 (points-to size: 0)
NODE  12:   %call2 = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  13:   store i32 %call2, i32* %c, align 4 (points-to size: 0)
NODE  14:   %0 = load i32, i32* %length, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  15:   store i32 1, i32* %length, align 4 (points-to size: 0)
NODE  16:   %1 = load i32, i32* %n, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  17:   store i32 1, i32* %n, align 4 (points-to size: 0)
NODE  18:   %2 = load i32, i32* %n, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  19:   %conv = sext i32 %2 to i64 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  20:   %mul = mul i64 %conv, 1 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  21:   %3 = alloca i8, i64 %mul, align 16 (points-to size: 1)
    ->   %3 = alloca i8, i64 %mul, align 16 + 0
NODE  22:   store i8* %3, i8** %nondetArea, align 8 (points-to size: 0)
NODE  23:   %4 = load i8*, i8** %nondetArea, align 8 (points-to size: 1)
    ->   %3 = alloca i8, i64 %mul, align 16 + 0
NODE  24:   %5 = load i32, i32* %c, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  25:   %6 = load i32, i32* %n, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  26:   %conv6 = sext i32 %6 to i64 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  27: <27> PSNodeType::CALL (points-to size: 0)
NODE  28: <28> PSNodeType::ENTRY (points-to size: 0)
NODE  29: i8* %dst (points-to size: 1)
    ->   %3 = alloca i8, i64 %mul, align 16 + 0
NODE  30: i32 %c (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  31: i64 %n (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  32:   %dst.addr = alloca i8*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %dst.addr = alloca i8*, align 8 + 0
NODE  33:   %c.addr = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %c.addr = alloca i32, align 4 + 0
NODE  34:   %n.addr = alloca i64, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %n.addr = alloca i64, align 8 + 0
NODE  35:   %d = alloca i8*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %d = alloca i8*, align 8 + 0
NODE  36:   store i8* %dst, i8** %dst.addr, align 8 (points-to size: 0)
NODE  37:   store i32 %c, i32* %c.addr, align 4 (points-to size: 0)
NODE  38:   store i64 %n, i64* %n.addr, align 8 (points-to size: 0)
NODE  39:   %0 = load i64, i64* %n.addr, align 8 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  40:   %1 = load i8*, i8** %dst.addr, align 8 (points-to size: 1)
    ->   %3 = alloca i8, i64 %mul, align 16 + 0
NODE  41:   store i8* %1, i8** %d, align 8 (points-to size: 0)
NODE  42:   %5 = load i8*, i8** %dst.addr, align 8 (points-to size: 1)
    ->   %3 = alloca i8, i64 %mul, align 16 + 0
NODE  43:   ret i8* %5 (points-to size: 1)
    ->   %3 = alloca i8, i64 %mul, align 16 + 0
NODE  44:   %2 = load i32, i32* %c.addr, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  45:   %conv = trunc i32 %2 to i8 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  46:   %3 = load i8*, i8** %d, align 8 (points-to size: 2)
    ->   %3 = alloca i8, i64 %mul, align 16 + 0
    ->   %3 = alloca i8, i64 %mul, align 16 + Offset::UNKNOWN
NODE  47:   %incdec.ptr = getelementptr inbounds i8, i8* %3, i32 1 (points-to size: 1)
    ->   %3 = alloca i8, i64 %mul, align 16 + Offset::UNKNOWN
NODE  48:   store i8* %incdec.ptr, i8** %d, align 8 (points-to size: 0)
NODE  49:   store i8 %conv, i8* %3, align 1 (points-to size: 0)
NODE  50:   %4 = load i64, i64* %n.addr, align 8 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  51:   %dec = add i64 %4, -1 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  52:   store i64 %dec, i64* %n.addr, align 8 (points-to size: 0)
NODE  53: cmemset (points-to size: 1)
    -> cmemset + 0
NODE  54: main (points-to size: 1)
    -> main + 0
NODE  55:   %call7 = call i8* @cmemset(i8* %4, i32 %5, i64 %conv6) (points-to size: 1)
    ->   %3 = alloca i8, i64 %mul, align 16 + 0
NODE  56:   ret i32 0 (points-to size: 1)
    -> null + 0
