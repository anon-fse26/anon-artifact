NODE   1: <1> PSNodeType::ENTRY (points-to size: 0)
NODE   2:   %retval = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %retval = alloca i32, align 4 + 0
NODE   3:   %y1 = alloca i32*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %y1 = alloca i32*, align 8 + 0
NODE   4:   %y2 = alloca i32*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %y2 = alloca i32*, align 8 + 0
NODE   5:   store i32 0, i32* %retval, align 4 (points-to size: 0)
NODE   6:   %0 = alloca i8, i64 4, align 16 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %0 = alloca i8, i64 4, align 16 + 0
NODE   7:   %1 = bitcast i8* %0 to i32* (points-to size: 1)
    ->   %0 = alloca i8, i64 4, align 16 + 0
NODE   8:   store i32* %1, i32** %y1, align 8 (points-to size: 0)
NODE   9:   %2 = alloca i8, i64 4, align 16 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %2 = alloca i8, i64 4, align 16 + 0
NODE  10:   %3 = bitcast i8* %2 to i32* (points-to size: 1)
    ->   %2 = alloca i8, i64 4, align 16 + 0
NODE  11:   store i32* %3, i32** %y2, align 8 (points-to size: 0)
NODE  12:   %call = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  13:   %4 = load i32*, i32** %y1, align 8 (points-to size: 1)
    ->   %0 = alloca i8, i64 4, align 16 + 0
NODE  14:   store i32 %call, i32* %4, align 4 (points-to size: 0)
NODE  15:   %call1 = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  16:   %5 = load i32*, i32** %y2, align 8 (points-to size: 1)
    ->   %2 = alloca i8, i64 4, align 16 + 0
NODE  17:   store i32 %call1, i32* %5, align 4 (points-to size: 0)
NODE  18:   %6 = load i32*, i32** %y1, align 8 (points-to size: 1)
    ->   %0 = alloca i8, i64 4, align 16 + 0
NODE  19:   %7 = load i32, i32* %6, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  20:   %8 = load i32*, i32** %y2, align 8 (points-to size: 1)
    ->   %2 = alloca i8, i64 4, align 16 + 0
NODE  21:   %9 = load i32, i32* %8, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  22:   ret i32 0 (points-to size: 1)
    -> null + 0
NODE  23:   %10 = load i32*, i32** %y1, align 8 (points-to size: 1)
    ->   %0 = alloca i8, i64 4, align 16 + 0
NODE  24:   %11 = load i32*, i32** %y2, align 8 (points-to size: 1)
    ->   %2 = alloca i8, i64 4, align 16 + 0
NODE  25: <25> PSNodeType::CALL (points-to size: 0)
NODE  26: <26> PSNodeType::ENTRY (points-to size: 0)
NODE  27: i32* %y1 (points-to size: 1)
    ->   %0 = alloca i8, i64 4, align 16 + 0
NODE  28: i32* %y2 (points-to size: 1)
    ->   %2 = alloca i8, i64 4, align 16 + 0
NODE  29:   %y1.addr = alloca i32*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %y1.addr = alloca i32*, align 8 + 0
NODE  30:   %y2.addr = alloca i32*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %y2.addr = alloca i32*, align 8 + 0
NODE  31:   store i32* %y1, i32** %y1.addr, align 8 (points-to size: 0)
NODE  32:   store i32* %y2, i32** %y2.addr, align 8 (points-to size: 0)
NODE  33:   %0 = load i32*, i32** %y1.addr, align 8 (points-to size: 1)
    ->   %0 = alloca i8, i64 4, align 16 + 0
NODE  34:   %1 = load i32, i32* %0, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  35:   %2 = load i32*, i32** %y2.addr, align 8 (points-to size: 1)
    ->   %2 = alloca i8, i64 4, align 16 + 0
NODE  36:   %3 = load i32, i32* %2, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  37:   %4 = load i32*, i32** %y1.addr, align 8 (points-to size: 1)
    ->   %0 = alloca i8, i64 4, align 16 + 0
NODE  38:   %5 = load i32, i32* %4, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  39:   %6 = load i32*, i32** %y2.addr, align 8 (points-to size: 1)
    ->   %2 = alloca i8, i64 4, align 16 + 0
NODE  40:   %7 = load i32, i32* %6, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  41:   %18 = load i32*, i32** %y1.addr, align 8 (points-to size: 1)
    ->   %0 = alloca i8, i64 4, align 16 + 0
NODE  42:   %19 = load i32, i32* %18, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  43:   ret i32 %19 (points-to size: 0)
NODE  44:   %8 = load i32*, i32** %y1.addr, align 8 (points-to size: 1)
    ->   %0 = alloca i8, i64 4, align 16 + 0
NODE  45:   %9 = load i32, i32* %8, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  46:   %10 = load i32*, i32** %y2.addr, align 8 (points-to size: 1)
    ->   %2 = alloca i8, i64 4, align 16 + 0
NODE  47:   %11 = load i32, i32* %10, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  48:   %sub = sub nsw i32 %9, %11 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  49:   %12 = load i32*, i32** %y1.addr, align 8 (points-to size: 1)
    ->   %0 = alloca i8, i64 4, align 16 + 0
NODE  50:   store i32 %sub, i32* %12, align 4 (points-to size: 0)
NODE  51:   %13 = load i32*, i32** %y2.addr, align 8 (points-to size: 1)
    ->   %2 = alloca i8, i64 4, align 16 + 0
NODE  52:   %14 = load i32, i32* %13, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  53:   %15 = load i32*, i32** %y1.addr, align 8 (points-to size: 1)
    ->   %0 = alloca i8, i64 4, align 16 + 0
NODE  54:   %16 = load i32, i32* %15, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  55:   %sub2 = sub nsw i32 %14, %16 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  56:   %17 = load i32*, i32** %y2.addr, align 8 (points-to size: 1)
    ->   %2 = alloca i8, i64 4, align 16 + 0
NODE  57:   store i32 %sub2, i32* %17, align 4 (points-to size: 0)
NODE  58: gcd (points-to size: 1)
    -> gcd + 0
NODE  59: main (points-to size: 1)
    -> main + 0
NODE  60:   %call3 = call i32 @gcd(i32* %10, i32* %11) (points-to size: 0)
