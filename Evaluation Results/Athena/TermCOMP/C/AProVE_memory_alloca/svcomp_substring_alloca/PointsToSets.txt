NODE   1: <1> PSNodeType::ENTRY (points-to size: 0)
NODE   2:   %retval = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %retval = alloca i32, align 4 + 0
NODE   3:   %length1 = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %length1 = alloca i32, align 4 + 0
NODE   4:   %length2 = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %length2 = alloca i32, align 4 + 0
NODE   5:   %nondetString1 = alloca i8*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %nondetString1 = alloca i8*, align 8 + 0
NODE   6:   %nondetString2 = alloca i8*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %nondetString2 = alloca i8*, align 8 + 0
NODE   7:   store i32 0, i32* %retval, align 4 (points-to size: 0)
NODE   8:   %call = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE   9:   store i32 %call, i32* %length1, align 4 (points-to size: 0)
NODE  10:   %call1 = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  11:   store i32 %call1, i32* %length2, align 4 (points-to size: 0)
NODE  12:   %0 = load i32, i32* %length1, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  13:   store i32 1, i32* %length1, align 4 (points-to size: 0)
NODE  14:   %1 = load i32, i32* %length2, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  15:   store i32 1, i32* %length2, align 4 (points-to size: 0)
NODE  16:   %2 = load i32, i32* %length1, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  17:   %conv = sext i32 %2 to i64 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  18:   %mul = mul i64 %conv, 1 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  19:   %3 = alloca i8, i64 %mul, align 16 (points-to size: 1)
    ->   %3 = alloca i8, i64 %mul, align 16 + 0
NODE  20:   store i8* %3, i8** %nondetString1, align 8 (points-to size: 0)
NODE  21:   %4 = load i32, i32* %length2, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  22:   %conv5 = sext i32 %4 to i64 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  23:   %mul6 = mul i64 %conv5, 1 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  24:   %5 = alloca i8, i64 %mul6, align 16 (points-to size: 1)
    ->   %5 = alloca i8, i64 %mul6, align 16 + 0
NODE  25:   store i8* %5, i8** %nondetString2, align 8 (points-to size: 0)
NODE  26:   %6 = load i8*, i8** %nondetString1, align 8 (points-to size: 1)
    ->   %3 = alloca i8, i64 %mul, align 16 + 0
NODE  27:   %7 = load i32, i32* %length1, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  28:   %sub = sub nsw i32 %7, 1 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  29:   %idxprom = sext i32 %sub to i64 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  30:   %arrayidx = getelementptr inbounds i8, i8* %6, i64 %idxprom (points-to size: 1)
    ->   %3 = alloca i8, i64 %mul, align 16 + Offset::UNKNOWN
NODE  31:   store i8 0, i8* %arrayidx, align 1 (points-to size: 0)
NODE  32:   %8 = load i8*, i8** %nondetString2, align 8 (points-to size: 1)
    ->   %5 = alloca i8, i64 %mul6, align 16 + 0
NODE  33:   %9 = load i32, i32* %length2, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  34:   %sub7 = sub nsw i32 %9, 1 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  35:   %idxprom8 = sext i32 %sub7 to i64 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  36:   %arrayidx9 = getelementptr inbounds i8, i8* %8, i64 %idxprom8 (points-to size: 1)
    ->   %5 = alloca i8, i64 %mul6, align 16 + Offset::UNKNOWN
NODE  37:   store i8 0, i8* %arrayidx9, align 1 (points-to size: 0)
NODE  38:   %10 = load i8*, i8** %nondetString1, align 8 (points-to size: 1)
    ->   %3 = alloca i8, i64 %mul, align 16 + 0
NODE  39:   %11 = load i8*, i8** %nondetString2, align 8 (points-to size: 1)
    ->   %5 = alloca i8, i64 %mul6, align 16 + 0
NODE  40: <40> PSNodeType::CALL (points-to size: 0)
NODE  41: <41> PSNodeType::ENTRY (points-to size: 0)
NODE  42: i8* %s (points-to size: 1)
    ->   %3 = alloca i8, i64 %mul, align 16 + 0
NODE  43: i8* %t (points-to size: 1)
    ->   %5 = alloca i8, i64 %mul6, align 16 + 0
NODE  44:   %retval = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %retval = alloca i32, align 4 + 0
NODE  45:   %s.addr = alloca i8*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %s.addr = alloca i8*, align 8 + 0
NODE  46:   %t.addr = alloca i8*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %t.addr = alloca i8*, align 8 + 0
NODE  47:   %ps = alloca i8*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %ps = alloca i8*, align 8 + 0
NODE  48:   %ps2 = alloca i8*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %ps2 = alloca i8*, align 8 + 0
NODE  49:   %pt = alloca i8*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %pt = alloca i8*, align 8 + 0
NODE  50:   store i8* %s, i8** %s.addr, align 8 (points-to size: 0)
NODE  51:   store i8* %t, i8** %t.addr, align 8 (points-to size: 0)
NODE  52:   %0 = load i8*, i8** %s.addr, align 8 (points-to size: 1)
    ->   %3 = alloca i8, i64 %mul, align 16 + 0
NODE  53:   store i8* %0, i8** %ps, align 8 (points-to size: 0)
NODE  54:   %1 = load i8*, i8** %ps, align 8 (points-to size: 2)
    ->   %3 = alloca i8, i64 %mul, align 16 + 0
    ->   %3 = alloca i8, i64 %mul, align 16 + Offset::UNKNOWN
NODE  55:   %2 = load i8, i8* %1, align 1 (points-to size: 1)
    -> null + 0
NODE  56:   %conv = sext i8 %2 to i32 (points-to size: 1)
    -> null + 0
NODE  57:   %3 = load i8*, i8** %ps, align 8 (points-to size: 2)
    ->   %3 = alloca i8, i64 %mul, align 16 + 0
    ->   %3 = alloca i8, i64 %mul, align 16 + Offset::UNKNOWN
NODE  58:   store i8* %3, i8** %ps2, align 8 (points-to size: 0)
NODE  59:   %4 = load i8*, i8** %t.addr, align 8 (points-to size: 1)
    ->   %5 = alloca i8, i64 %mul6, align 16 + 0
NODE  60:   store i8* %4, i8** %pt, align 8 (points-to size: 0)
NODE  61:   %17 = load i32, i32* %retval, align 4 (points-to size: 2)
    -> null + 0
    -> unknown + Offset::UNKNOWN
NODE  62:   ret i32 %17 (points-to size: 0)
NODE  63:   store i32 0, i32* %retval, align 4 (points-to size: 0)
NODE  64:   %5 = load i8*, i8** %pt, align 8 (points-to size: 2)
    ->   %5 = alloca i8, i64 %mul6, align 16 + 0
    ->   %5 = alloca i8, i64 %mul6, align 16 + Offset::UNKNOWN
NODE  65:   %6 = load i8, i8* %5, align 1 (points-to size: 1)
    -> null + 0
NODE  66:   %conv3 = sext i8 %6 to i32 (points-to size: 1)
    -> null + 0
NODE  67:   %7 = load i8*, i8** %pt, align 8 (points-to size: 2)
    ->   %5 = alloca i8, i64 %mul6, align 16 + 0
    ->   %5 = alloca i8, i64 %mul6, align 16 + Offset::UNKNOWN
NODE  68:   %8 = load i8, i8* %7, align 1 (points-to size: 1)
    -> null + 0
NODE  69:   %conv6 = sext i8 %8 to i32 (points-to size: 1)
    -> null + 0
NODE  70:   %9 = load i8*, i8** %ps2, align 8 (points-to size: 2)
    ->   %3 = alloca i8, i64 %mul, align 16 + 0
    ->   %3 = alloca i8, i64 %mul, align 16 + Offset::UNKNOWN
NODE  71:   %10 = load i8, i8* %9, align 1 (points-to size: 1)
    -> null + 0
NODE  72:   %conv7 = sext i8 %10 to i32 (points-to size: 1)
    -> null + 0
NODE  73:   %11 = phi i1 [ false, %while.cond2 ], [ %cmp8, %land.rhs ] (points-to size: 1)
    -> null + 0
NODE  74:   %12 = load i8*, i8** %pt, align 8 (points-to size: 2)
    ->   %5 = alloca i8, i64 %mul6, align 16 + 0
    ->   %5 = alloca i8, i64 %mul6, align 16 + Offset::UNKNOWN
NODE  75:   %incdec.ptr = getelementptr inbounds i8, i8* %12, i32 1 (points-to size: 1)
    ->   %5 = alloca i8, i64 %mul6, align 16 + Offset::UNKNOWN
NODE  76:   store i8* %incdec.ptr, i8** %pt, align 8 (points-to size: 0)
NODE  77:   %13 = load i8*, i8** %ps2, align 8 (points-to size: 2)
    ->   %3 = alloca i8, i64 %mul, align 16 + 0
    ->   %3 = alloca i8, i64 %mul, align 16 + Offset::UNKNOWN
NODE  78:   %incdec.ptr11 = getelementptr inbounds i8, i8* %13, i32 1 (points-to size: 1)
    ->   %3 = alloca i8, i64 %mul, align 16 + Offset::UNKNOWN
NODE  79:   store i8* %incdec.ptr11, i8** %ps2, align 8 (points-to size: 0)
NODE  80:   %14 = load i8*, i8** %pt, align 8 (points-to size: 2)
    ->   %5 = alloca i8, i64 %mul6, align 16 + 0
    ->   %5 = alloca i8, i64 %mul6, align 16 + Offset::UNKNOWN
NODE  81:   %15 = load i8, i8* %14, align 1 (points-to size: 1)
    -> null + 0
NODE  82:   %conv12 = sext i8 %15 to i32 (points-to size: 1)
    -> null + 0
NODE  83:   store i32 1, i32* %retval, align 4 (points-to size: 0)
NODE  84:   %16 = load i8*, i8** %ps, align 8 (points-to size: 2)
    ->   %3 = alloca i8, i64 %mul, align 16 + 0
    ->   %3 = alloca i8, i64 %mul, align 16 + Offset::UNKNOWN
NODE  85:   %incdec.ptr15 = getelementptr inbounds i8, i8* %16, i32 1 (points-to size: 1)
    ->   %3 = alloca i8, i64 %mul, align 16 + Offset::UNKNOWN
NODE  86:   store i8* %incdec.ptr15, i8** %ps, align 8 (points-to size: 0)
NODE  87: substring (points-to size: 1)
    -> substring + 0
NODE  88: main (points-to size: 1)
    -> main + 0
NODE  89:   %call10 = call i32 @substring(i8* %10, i8* %11) (points-to size: 0)
NODE  90:   ret i32 %call10 (points-to size: 0)
