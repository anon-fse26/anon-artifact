NODE   1: <1> PSNodeType::ENTRY (points-to size: 0)
NODE   2:   %retval = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %retval = alloca i32, align 4 + 0
NODE   3:   %length1 = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %length1 = alloca i32, align 4 + 0
NODE   4:   %length2 = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %length2 = alloca i32, align 4 + 0
NODE   5:   %nondetArea = alloca i8*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %nondetArea = alloca i8*, align 8 + 0
NODE   6:   %nondetString = alloca i8*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %nondetString = alloca i8*, align 8 + 0
NODE   7:   store i32 0, i32* %retval, align 4 (points-to size: 0)
NODE   8:   %call = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE   9:   store i32 %call, i32* %length1, align 4 (points-to size: 0)
NODE  10:   %call1 = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  11:   store i32 %call1, i32* %length2, align 4 (points-to size: 0)
NODE  12:   %0 = load i32, i32* %length1, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  13:   store i32 1, i32* %length1, align 4 (points-to size: 0)
NODE  14:   %1 = load i32, i32* %length2, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  15:   store i32 1, i32* %length2, align 4 (points-to size: 0)
NODE  16:   %2 = load i32, i32* %length1, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  17:   %3 = load i32, i32* %length2, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  18:   store i32 0, i32* %retval, align 4 (points-to size: 0)
NODE  19:   %12 = load i32, i32* %retval, align 4 (points-to size: 1)
    -> null + 0
NODE  20:   ret i32 %12 (points-to size: 0)
NODE  21:   %4 = load i32, i32* %length1, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  22:   %conv = sext i32 %4 to i64 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  23:   %mul = mul i64 %conv, 1 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  24:   %5 = alloca i8, i64 %mul, align 16 (points-to size: 1)
    ->   %5 = alloca i8, i64 %mul, align 16 + 0
NODE  25:   store i8* %5, i8** %nondetArea, align 8 (points-to size: 0)
NODE  26:   %6 = load i32, i32* %length2, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  27:   %conv8 = sext i32 %6 to i64 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  28:   %mul9 = mul i64 %conv8, 1 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  29:   %7 = alloca i8, i64 %mul9, align 16 (points-to size: 1)
    ->   %7 = alloca i8, i64 %mul9, align 16 + 0
NODE  30:   store i8* %7, i8** %nondetString, align 8 (points-to size: 0)
NODE  31:   %8 = load i8*, i8** %nondetString, align 8 (points-to size: 1)
    ->   %7 = alloca i8, i64 %mul9, align 16 + 0
NODE  32:   %9 = load i32, i32* %length2, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  33:   %sub = sub nsw i32 %9, 1 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  34:   %idxprom = sext i32 %sub to i64 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  35:   %arrayidx = getelementptr inbounds i8, i8* %8, i64 %idxprom (points-to size: 1)
    ->   %7 = alloca i8, i64 %mul9, align 16 + Offset::UNKNOWN
NODE  36:   store i8 0, i8* %arrayidx, align 1 (points-to size: 0)
NODE  37:   %10 = load i8*, i8** %nondetArea, align 8 (points-to size: 1)
    ->   %5 = alloca i8, i64 %mul, align 16 + 0
NODE  38:   %11 = load i8*, i8** %nondetString, align 8 (points-to size: 1)
    ->   %7 = alloca i8, i64 %mul9, align 16 + 0
NODE  39: <39> PSNodeType::CALL (points-to size: 0)
NODE  40: <40> PSNodeType::ENTRY (points-to size: 0)
NODE  41: i8* %to (points-to size: 1)
    ->   %5 = alloca i8, i64 %mul, align 16 + 0
NODE  42: i8* %from (points-to size: 1)
    ->   %7 = alloca i8, i64 %mul9, align 16 + 0
NODE  43:   %to.addr = alloca i8*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %to.addr = alloca i8*, align 8 + 0
NODE  44:   %from.addr = alloca i8*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %from.addr = alloca i8*, align 8 + 0
NODE  45:   store i8* %to, i8** %to.addr, align 8 (points-to size: 0)
NODE  46:   store i8* %from, i8** %from.addr, align 8 (points-to size: 0)
NODE  47:   %0 = load i8*, i8** %from.addr, align 8 (points-to size: 2)
    ->   %7 = alloca i8, i64 %mul9, align 16 + 0
    ->   %7 = alloca i8, i64 %mul9, align 16 + Offset::UNKNOWN
NODE  48:   %1 = load i8, i8* %0, align 1 (points-to size: 1)
    -> null + 0
NODE  49:   %2 = load i8*, i8** %to.addr, align 8 (points-to size: 2)
    ->   %5 = alloca i8, i64 %mul, align 16 + 0
    ->   %5 = alloca i8, i64 %mul, align 16 + Offset::UNKNOWN
NODE  50:   store i8 %1, i8* %2, align 1 (points-to size: 0)
NODE  51:   %conv = sext i8 %1 to i32 (points-to size: 1)
    -> null + 0
NODE  52:   %5 = load i8*, i8** %to.addr, align 8 (points-to size: 2)
    ->   %5 = alloca i8, i64 %mul, align 16 + 0
    ->   %5 = alloca i8, i64 %mul, align 16 + Offset::UNKNOWN
NODE  53:   ret i8* %5 (points-to size: 2)
    ->   %5 = alloca i8, i64 %mul, align 16 + 0
    ->   %5 = alloca i8, i64 %mul, align 16 + Offset::UNKNOWN
NODE  54:   %3 = load i8*, i8** %from.addr, align 8 (points-to size: 2)
    ->   %7 = alloca i8, i64 %mul9, align 16 + 0
    ->   %7 = alloca i8, i64 %mul9, align 16 + Offset::UNKNOWN
NODE  55:   %incdec.ptr = getelementptr inbounds i8, i8* %3, i32 1 (points-to size: 1)
    ->   %7 = alloca i8, i64 %mul9, align 16 + Offset::UNKNOWN
NODE  56:   store i8* %incdec.ptr, i8** %from.addr, align 8 (points-to size: 0)
NODE  57:   %4 = load i8*, i8** %to.addr, align 8 (points-to size: 2)
    ->   %5 = alloca i8, i64 %mul, align 16 + 0
    ->   %5 = alloca i8, i64 %mul, align 16 + Offset::UNKNOWN
NODE  58:   %incdec.ptr2 = getelementptr inbounds i8, i8* %4, i32 1 (points-to size: 1)
    ->   %5 = alloca i8, i64 %mul, align 16 + Offset::UNKNOWN
NODE  59:   store i8* %incdec.ptr2, i8** %to.addr, align 8 (points-to size: 0)
NODE  60: cstpcpy (points-to size: 1)
    -> cstpcpy + 0
NODE  61: main (points-to size: 1)
    -> main + 0
NODE  62:   %call10 = call i8* @cstpcpy(i8* %10, i8* %11) (points-to size: 2)
    ->   %5 = alloca i8, i64 %mul, align 16 + 0
    ->   %5 = alloca i8, i64 %mul, align 16 + Offset::UNKNOWN
NODE  63:   store i32 0, i32* %retval, align 4 (points-to size: 0)
