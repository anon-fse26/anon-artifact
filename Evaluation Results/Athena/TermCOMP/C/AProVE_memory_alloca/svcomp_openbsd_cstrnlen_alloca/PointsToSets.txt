NODE   1: <1> PSNodeType::ENTRY (points-to size: 0)
NODE   2:   %retval = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %retval = alloca i32, align 4 + 0
NODE   3:   %length1 = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %length1 = alloca i32, align 4 + 0
NODE   4:   %n = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %n = alloca i32, align 4 + 0
NODE   5:   %nondetString1 = alloca i8*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %nondetString1 = alloca i8*, align 8 + 0
NODE   6:   store i32 0, i32* %retval, align 4 (points-to size: 0)
NODE   7:   %call = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE   8:   store i32 %call, i32* %length1, align 4 (points-to size: 0)
NODE   9:   %call1 = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  10:   store i32 %call1, i32* %n, align 4 (points-to size: 0)
NODE  11:   %0 = load i32, i32* %length1, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  12:   store i32 1, i32* %length1, align 4 (points-to size: 0)
NODE  13:   %1 = load i32, i32* %n, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  14:   store i32 1, i32* %n, align 4 (points-to size: 0)
NODE  15:   %2 = load i32, i32* %length1, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  16:   %conv = sext i32 %2 to i64 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  17:   %mul = mul i64 %conv, 1 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  18:   %3 = alloca i8, i64 %mul, align 16 (points-to size: 1)
    ->   %3 = alloca i8, i64 %mul, align 16 + 0
NODE  19:   store i8* %3, i8** %nondetString1, align 8 (points-to size: 0)
NODE  20:   %4 = load i8*, i8** %nondetString1, align 8 (points-to size: 1)
    ->   %3 = alloca i8, i64 %mul, align 16 + 0
NODE  21:   %5 = load i32, i32* %length1, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  22:   %sub = sub nsw i32 %5, 1 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  23:   %idxprom = sext i32 %sub to i64 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  24:   %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom (points-to size: 1)
    ->   %3 = alloca i8, i64 %mul, align 16 + Offset::UNKNOWN
NODE  25:   store i8 0, i8* %arrayidx, align 1 (points-to size: 0)
NODE  26:   %6 = load i8*, i8** %nondetString1, align 8 (points-to size: 1)
    ->   %3 = alloca i8, i64 %mul, align 16 + 0
NODE  27:   %7 = load i32, i32* %n, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  28: <28> PSNodeType::CALL (points-to size: 0)
NODE  29: <29> PSNodeType::ENTRY (points-to size: 0)
NODE  30: i8* %str (points-to size: 1)
    ->   %3 = alloca i8, i64 %mul, align 16 + 0
NODE  31: i32 %maxlen (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  32:   %str.addr = alloca i8*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %str.addr = alloca i8*, align 8 + 0
NODE  33:   %maxlen.addr = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %maxlen.addr = alloca i32, align 4 + 0
NODE  34:   %cp = alloca i8*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %cp = alloca i8*, align 8 + 0
NODE  35:   store i8* %str, i8** %str.addr, align 8 (points-to size: 0)
NODE  36:   store i32 %maxlen, i32* %maxlen.addr, align 4 (points-to size: 0)
NODE  37:   %0 = load i8*, i8** %str.addr, align 8 (points-to size: 1)
    ->   %3 = alloca i8, i64 %mul, align 16 + 0
NODE  38:   store i8* %0, i8** %cp, align 8 (points-to size: 0)
NODE  39:   %1 = load i32, i32* %maxlen.addr, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  40:   %2 = load i8*, i8** %cp, align 8 (points-to size: 2)
    ->   %3 = alloca i8, i64 %mul, align 16 + 0
    ->   %3 = alloca i8, i64 %mul, align 16 + Offset::UNKNOWN
NODE  41:   %3 = load i8, i8* %2, align 1 (points-to size: 1)
    -> null + 0
NODE  42:   %conv = sext i8 %3 to i32 (points-to size: 1)
    -> null + 0
NODE  43:   %4 = phi i1 [ false, %for.cond ], [ %cmp1, %land.rhs ] (points-to size: 1)
    -> null + 0
NODE  44:   %7 = load i8*, i8** %cp, align 8 (points-to size: 2)
    ->   %3 = alloca i8, i64 %mul, align 16 + 0
    ->   %3 = alloca i8, i64 %mul, align 16 + Offset::UNKNOWN
NODE  45:   %8 = load i8*, i8** %str.addr, align 8 (points-to size: 1)
    ->   %3 = alloca i8, i64 %mul, align 16 + 0
NODE  46:   %sub.ptr.lhs.cast = ptrtoint i8* %7 to i64 (points-to size: 1)
    ->   %3 = alloca i8, i64 %mul, align 16 + Offset::UNKNOWN
NODE  47:   %sub.ptr.rhs.cast = ptrtoint i8* %8 to i64 (points-to size: 1)
    ->   %3 = alloca i8, i64 %mul, align 16 + 0
NODE  48:   %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast (points-to size: 1)
    ->   %3 = alloca i8, i64 %mul, align 16 + Offset::UNKNOWN
NODE  49:   %conv3 = trunc i64 %sub.ptr.sub to i32 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  50:   ret i32 %conv3 (points-to size: 0)
NODE  51:   %5 = load i8*, i8** %cp, align 8 (points-to size: 2)
    ->   %3 = alloca i8, i64 %mul, align 16 + 0
    ->   %3 = alloca i8, i64 %mul, align 16 + Offset::UNKNOWN
NODE  52:   %incdec.ptr = getelementptr inbounds i8, i8* %5, i32 1 (points-to size: 1)
    ->   %3 = alloca i8, i64 %mul, align 16 + Offset::UNKNOWN
NODE  53:   store i8* %incdec.ptr, i8** %cp, align 8 (points-to size: 0)
NODE  54:   %6 = load i32, i32* %maxlen.addr, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  55:   %dec = add nsw i32 %6, -1 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  56:   store i32 %dec, i32* %maxlen.addr, align 4 (points-to size: 0)
NODE  57: cstrnlen (points-to size: 1)
    -> cstrnlen + 0
NODE  58: main (points-to size: 1)
    -> main + 0
NODE  59:   %call5 = call i32 @cstrnlen(i8* %6, i32 %7) (points-to size: 0)
NODE  60:   ret i32 %call5 (points-to size: 0)
