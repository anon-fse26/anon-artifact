NODE   1: <1> PSNodeType::ENTRY (points-to size: 0)
NODE   2:   %retval = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %retval = alloca i32, align 4 + 0
NODE   3:   %i = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %i = alloca i32, align 4 + 0
NODE   4:   %j = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %j = alloca i32, align 4 + 0
NODE   5:   %tmp = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %tmp = alloca i32, align 4 + 0
NODE   6:   %length = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %length = alloca i32, align 4 + 0
NODE   7:   %arr = alloca i32*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %arr = alloca i32*, align 8 + 0
NODE   8:   %a = alloca i32*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %a = alloca i32*, align 8 + 0
NODE   9:   %b = alloca i32*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %b = alloca i32*, align 8 + 0
NODE  10:   store i32 0, i32* %retval, align 4 (points-to size: 0)
NODE  11:   %call = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  12:   store i32 %call, i32* %length, align 4 (points-to size: 0)
NODE  13:   %0 = load i32, i32* %length, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  14:   store i32 1, i32* %length, align 4 (points-to size: 0)
NODE  15:   %1 = load i32, i32* %length, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  16:   %rem = srem i32 %1, 2 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  17:   %2 = load i32, i32* %length, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  18:   %inc = add nsw i32 %2, 1 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  19:   store i32 %inc, i32* %length, align 4 (points-to size: 0)
NODE  20:   %3 = load i32, i32* %length, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  21:   %conv = sext i32 %3 to i64 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  22:   %mul = mul i64 %conv, 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  23:   %4 = alloca i8, i64 %mul, align 16 (points-to size: 1)
    ->   %4 = alloca i8, i64 %mul, align 16 + 0
NODE  24:   %5 = bitcast i8* %4 to i32* (points-to size: 1)
    ->   %4 = alloca i8, i64 %mul, align 16 + 0
NODE  25:   store i32* %5, i32** %arr, align 8 (points-to size: 0)
NODE  26:   store i32 0, i32* %i, align 4 (points-to size: 0)
NODE  27:   %6 = load i32, i32* %i, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  28:   %7 = load i32, i32* %length, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  29:   %8 = load i32*, i32** %arr, align 8 (points-to size: 1)
    ->   %4 = alloca i8, i64 %mul, align 16 + 0
NODE  30:   %9 = load i32, i32* %i, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  31:   %idxprom = sext i32 %9 to i64 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  32:   %arrayidx = getelementptr inbounds i32, i32* %8, i64 %idxprom (points-to size: 1)
    ->   %4 = alloca i8, i64 %mul, align 16 + Offset::UNKNOWN
NODE  33:   %10 = load i32, i32* %arrayidx, align 4 (points-to size: 0)
NODE  34:   %15 = load i32*, i32** %arr, align 8 (points-to size: 1)
    ->   %4 = alloca i8, i64 %mul, align 16 + 0
NODE  35:   %16 = load i32, i32* %length, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  36:   %div = sdiv i32 %16, 2 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  37:   %add = add nsw i32 %div, 1 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  38:   %idxprom14 = sext i32 %add to i64 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  39:   %arrayidx15 = getelementptr inbounds i32, i32* %15, i64 %idxprom14 (points-to size: 1)
    ->   %4 = alloca i8, i64 %mul, align 16 + Offset::UNKNOWN
NODE  40:   store i32 0, i32* %arrayidx15, align 4 (points-to size: 0)
NODE  41:   %17 = load i32*, i32** %arr, align 8 (points-to size: 1)
    ->   %4 = alloca i8, i64 %mul, align 16 + 0
NODE  42:   store i32* %17, i32** %a, align 8 (points-to size: 0)
NODE  43:   %18 = load i32*, i32** %arr, align 8 (points-to size: 1)
    ->   %4 = alloca i8, i64 %mul, align 16 + 0
NODE  44:   %19 = load i32, i32* %length, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  45:   %idx.ext = sext i32 %19 to i64 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  46:   %add.ptr = getelementptr inbounds i32, i32* %18, i64 %idx.ext (points-to size: 1)
    ->   %4 = alloca i8, i64 %mul, align 16 + Offset::UNKNOWN
NODE  47:   %add.ptr16 = getelementptr inbounds i32, i32* %add.ptr, i64 -1 (points-to size: 1)
    ->   %4 = alloca i8, i64 %mul, align 16 + Offset::UNKNOWN
NODE  48:   store i32* %add.ptr16, i32** %b, align 8 (points-to size: 0)
NODE  49:   %11 = load i32*, i32** %arr, align 8 (points-to size: 1)
    ->   %4 = alloca i8, i64 %mul, align 16 + 0
NODE  50:   %12 = load i32, i32* %i, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  51:   %idxprom9 = sext i32 %12 to i64 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  52:   %arrayidx10 = getelementptr inbounds i32, i32* %11, i64 %idxprom9 (points-to size: 1)
    ->   %4 = alloca i8, i64 %mul, align 16 + Offset::UNKNOWN
NODE  53:   %13 = load i32, i32* %arrayidx10, align 4 (points-to size: 0)
NODE  54:   %inc11 = add nsw i32 %13, 1 (points-to size: 0)
NODE  55:   store i32 %inc11, i32* %arrayidx10, align 4 (points-to size: 0)
NODE  56:   %20 = load i32*, i32** %a, align 8 (points-to size: 2)
    ->   %4 = alloca i8, i64 %mul, align 16 + 0
    ->   %4 = alloca i8, i64 %mul, align 16 + Offset::UNKNOWN
NODE  57:   %21 = load i32, i32* %20, align 4 (points-to size: 1)
    -> null + 0
NODE  58:   %14 = load i32, i32* %i, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  59:   %inc13 = add nsw i32 %14, 1 (points-to size: 1)
    -> null + Offset::UNKNOWN
NODE  60:   store i32 %inc13, i32* %i, align 4 (points-to size: 0)
NODE  61:   %22 = load i32*, i32** %b, align 8 (points-to size: 1)
    ->   %4 = alloca i8, i64 %mul, align 16 + Offset::UNKNOWN
NODE  62:   %23 = load i32, i32* %22, align 4 (points-to size: 1)
    -> null + 0
NODE  63:   %24 = phi i1 [ false, %while.cond ], [ %cmp19, %land.rhs ] (points-to size: 1)
    -> null + 0
NODE  64:   %25 = load i32*, i32** %a, align 8 (points-to size: 2)
    ->   %4 = alloca i8, i64 %mul, align 16 + 0
    ->   %4 = alloca i8, i64 %mul, align 16 + Offset::UNKNOWN
NODE  65:   %26 = load i32, i32* %25, align 4 (points-to size: 1)
    -> null + 0
NODE  66:   store i32 %26, i32* %tmp, align 4 (points-to size: 0)
NODE  67:   %27 = load i32*, i32** %b, align 8 (points-to size: 1)
    ->   %4 = alloca i8, i64 %mul, align 16 + Offset::UNKNOWN
NODE  68:   %28 = load i32, i32* %27, align 4 (points-to size: 1)
    -> null + 0
NODE  69:   %29 = load i32*, i32** %a, align 8 (points-to size: 2)
    ->   %4 = alloca i8, i64 %mul, align 16 + 0
    ->   %4 = alloca i8, i64 %mul, align 16 + Offset::UNKNOWN
NODE  70:   store i32 %28, i32* %29, align 4 (points-to size: 0)
NODE  71:   %30 = load i32, i32* %tmp, align 4 (points-to size: 1)
    -> null + 0
NODE  72:   %31 = load i32*, i32** %b, align 8 (points-to size: 1)
    ->   %4 = alloca i8, i64 %mul, align 16 + Offset::UNKNOWN
NODE  73:   store i32 %30, i32* %31, align 4 (points-to size: 0)
NODE  74:   %32 = load i32*, i32** %a, align 8 (points-to size: 2)
    ->   %4 = alloca i8, i64 %mul, align 16 + 0
    ->   %4 = alloca i8, i64 %mul, align 16 + Offset::UNKNOWN
NODE  75:   %incdec.ptr = getelementptr inbounds i32, i32* %32, i32 1 (points-to size: 1)
    ->   %4 = alloca i8, i64 %mul, align 16 + Offset::UNKNOWN
NODE  76:   store i32* %incdec.ptr, i32** %a, align 8 (points-to size: 0)
NODE  77:   %33 = load i32*, i32** %b, align 8 (points-to size: 1)
    ->   %4 = alloca i8, i64 %mul, align 16 + Offset::UNKNOWN
NODE  78:   %incdec.ptr21 = getelementptr inbounds i32, i32* %33, i32 -1 (points-to size: 1)
    ->   %4 = alloca i8, i64 %mul, align 16 + Offset::UNKNOWN
NODE  79:   store i32* %incdec.ptr21, i32** %b, align 8 (points-to size: 0)
NODE  80:   ret i32 0 (points-to size: 1)
    -> null + 0
NODE  81: main (points-to size: 1)
    -> main + 0
