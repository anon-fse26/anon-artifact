NODE   1: <1> PSNodeType::ENTRY (points-to size: 0)
NODE   2:   %retval = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %retval = alloca i32, align 4 + 0
NODE   3:   %s1 = alloca i8*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %s1 = alloca i8*, align 8 + 0
NODE   4:   %s2 = alloca i8*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %s2 = alloca i8*, align 8 + 0
NODE   5:   %n = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %n = alloca i32, align 4 + 0
NODE   6:   store i32 0, i32* %retval, align 4 (points-to size: 0)
NODE   7:   %call = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE   8:   store i32 %call, i32* %n, align 4 (points-to size: 0)
NODE   9:   %0 = load i8*, i8** %s1, align 8 (points-to size: 0)
NODE  10:   %1 = load i8*, i8** %s2, align 8 (points-to size: 0)
NODE  11:   %2 = load i32, i32* %n, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  12: <12> PSNodeType::CALL (points-to size: 0)
NODE  13: <13> PSNodeType::ENTRY (points-to size: 0)
NODE  14: i8* %s1 (points-to size: 0)
NODE  15: i8* %s2 (points-to size: 0)
NODE  16: i32 %n (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  17:   %s1.addr = alloca i8*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %s1.addr = alloca i8*, align 8 + 0
NODE  18:   %s2.addr = alloca i8*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %s2.addr = alloca i8*, align 8 + 0
NODE  19:   %n.addr = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %n.addr = alloca i32, align 4 + 0
NODE  20:   %s = alloca i8*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %s = alloca i8*, align 8 + 0
NODE  21:   store i8* %s1, i8** %s1.addr, align 8 (points-to size: 0)
NODE  22:   store i8* %s2, i8** %s2.addr, align 8 (points-to size: 0)
NODE  23:   store i32 %n, i32* %n.addr, align 4 (points-to size: 0)
NODE  24:   %0 = load i8*, i8** %s1.addr, align 8 (points-to size: 0)
NODE  25:   store i8* %0, i8** %s, align 8 (points-to size: 0)
NODE  26:   %1 = load i8*, i8** %s, align 8 (points-to size: 0)
NODE  27:   %2 = load i8, i8* %1, align 1 (points-to size: 0)
NODE  28:   %conv = sext i8 %2 to i32 (points-to size: 0)
NODE  29:   %3 = load i8*, i8** %s, align 8 (points-to size: 0)
NODE  30:   %incdec.ptr = getelementptr inbounds i8, i8* %3, i32 1 (points-to size: 0)
NODE  31:   store i8* %incdec.ptr, i8** %s, align 8 (points-to size: 0)
NODE  32:   %4 = load i32, i32* %n.addr, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  33:   %5 = load i8*, i8** %s2.addr, align 8 (points-to size: 0)
NODE  34:   %incdec.ptr5 = getelementptr inbounds i8, i8* %5, i32 1 (points-to size: 0)
NODE  35:   store i8* %incdec.ptr5, i8** %s2.addr, align 8 (points-to size: 0)
NODE  36:   %6 = load i8, i8* %5, align 1 (points-to size: 0)
NODE  37:   %7 = load i8*, i8** %s, align 8 (points-to size: 0)
NODE  38:   store i8 %6, i8* %7, align 1 (points-to size: 0)
NODE  39:   %conv6 = sext i8 %6 to i32 (points-to size: 0)
NODE  40:   %8 = phi i1 [ false, %while.cond2 ], [ %cmp7, %land.rhs ] (points-to size: 1)
    -> null + 0
NODE  41:   %9 = load i32, i32* %n.addr, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  42:   %dec = add nsw i32 %9, -1 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  43:   store i32 %dec, i32* %n.addr, align 4 (points-to size: 0)
NODE  44:   %10 = load i8*, i8** %s, align 8 (points-to size: 0)
NODE  45:   %incdec.ptr10 = getelementptr inbounds i8, i8* %10, i32 1 (points-to size: 0)
NODE  46:   store i8* %incdec.ptr10, i8** %s, align 8 (points-to size: 0)
NODE  47:   %11 = load i8*, i8** %s, align 8 (points-to size: 0)
NODE  48:   %12 = load i8, i8* %11, align 1 (points-to size: 0)
NODE  49:   %conv12 = sext i8 %12 to i32 (points-to size: 0)
NODE  50:   %13 = load i8*, i8** %s, align 8 (points-to size: 0)
NODE  51:   store i8 0, i8* %13, align 1 (points-to size: 0)
NODE  52:   %14 = load i8*, i8** %s1.addr, align 8 (points-to size: 0)
NODE  53:   ret i8* %14 (points-to size: 0)
NODE  54: cstrncat (points-to size: 1)
    -> cstrncat + 0
NODE  55: main (points-to size: 1)
    -> main + 0
NODE  56:   %call1 = call i8* @cstrncat(i8* %0, i8* %1, i32 %2) (points-to size: 0)
NODE  57:   ret i32 0 (points-to size: 1)
    -> null + 0
