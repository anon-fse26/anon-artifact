NODE   1: <1> PSNodeType::ENTRY (points-to size: 0)
NODE   2:   %retval = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %retval = alloca i32, align 4 + 0
NODE   3:   %x = alloca i32*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %x = alloca i32*, align 8 + 0
NODE   4:   %n = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %n = alloca i32, align 4 + 0
NODE   5:   store i32 0, i32* %retval, align 4 (points-to size: 0)
NODE   6:   %call = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE   7:   store i32 %call, i32* %n, align 4 (points-to size: 0)
NODE   8:   %0 = load i32*, i32** %x, align 8 (points-to size: 0)
NODE   9:   %1 = load i32, i32* %n, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  10: <10> PSNodeType::CALL (points-to size: 0)
NODE  11: <11> PSNodeType::ENTRY (points-to size: 0)
NODE  12: i32* %x (points-to size: 0)
NODE  13: i32 %n (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  14:   %x.addr = alloca i32*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %x.addr = alloca i32*, align 8 + 0
NODE  15:   %n.addr = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %n.addr = alloca i32, align 4 + 0
NODE  16:   %pass = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %pass = alloca i32, align 4 + 0
NODE  17:   %i = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %i = alloca i32, align 4 + 0
NODE  18:   %temp = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %temp = alloca i32, align 4 + 0
NODE  19:   store i32* %x, i32** %x.addr, align 8 (points-to size: 0)
NODE  20:   store i32 %n, i32* %n.addr, align 4 (points-to size: 0)
NODE  21:   store i32 1, i32* %pass, align 4 (points-to size: 0)
NODE  22:   %0 = load i32, i32* %pass, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  23:   %1 = load i32, i32* %n.addr, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  24:   store i32 0, i32* %i, align 4 (points-to size: 0)
NODE  25:   ret void (points-to size: 0)
NODE  26:   %2 = load i32, i32* %i, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  27:   %3 = load i32, i32* %n.addr, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  28:   %4 = load i32, i32* %pass, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  29:   %sub = sub nsw i32 %3, %4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  30:   %5 = load i32*, i32** %x.addr, align 8 (points-to size: 0)
NODE  31:   %6 = load i32, i32* %i, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  32:   %idxprom = sext i32 %6 to i64 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  33:   %arrayidx = getelementptr inbounds i32, i32* %5, i64 %idxprom (points-to size: 0)
NODE  34:   %7 = load i32, i32* %arrayidx, align 4 (points-to size: 0)
NODE  35:   %8 = load i32*, i32** %x.addr, align 8 (points-to size: 0)
NODE  36:   %9 = load i32, i32* %i, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  37:   %add = add nsw i32 %9, 1 (points-to size: 1)
    -> null + Offset::UNKNOWN
NODE  38:   %idxprom4 = sext i32 %add to i64 (points-to size: 1)
    -> null + Offset::UNKNOWN
NODE  39:   %arrayidx5 = getelementptr inbounds i32, i32* %8, i64 %idxprom4 (points-to size: 0)
NODE  40:   %10 = load i32, i32* %arrayidx5, align 4 (points-to size: 0)
NODE  41:   %11 = load i32*, i32** %x.addr, align 8 (points-to size: 0)
NODE  42:   %12 = load i32, i32* %i, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  43:   %idxprom7 = sext i32 %12 to i64 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  44:   %arrayidx8 = getelementptr inbounds i32, i32* %11, i64 %idxprom7 (points-to size: 0)
NODE  45:   %13 = load i32, i32* %arrayidx8, align 4 (points-to size: 0)
NODE  46:   store i32 %13, i32* %temp, align 4 (points-to size: 0)
NODE  47:   %14 = load i32*, i32** %x.addr, align 8 (points-to size: 0)
NODE  48:   %15 = load i32, i32* %i, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  49:   %add9 = add nsw i32 %15, 1 (points-to size: 1)
    -> null + Offset::UNKNOWN
NODE  50:   %idxprom10 = sext i32 %add9 to i64 (points-to size: 1)
    -> null + Offset::UNKNOWN
NODE  51:   %arrayidx11 = getelementptr inbounds i32, i32* %14, i64 %idxprom10 (points-to size: 0)
NODE  52:   %16 = load i32, i32* %arrayidx11, align 4 (points-to size: 0)
NODE  53:   %17 = load i32*, i32** %x.addr, align 8 (points-to size: 0)
NODE  54:   %18 = load i32, i32* %i, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  55:   %idxprom12 = sext i32 %18 to i64 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  56:   %arrayidx13 = getelementptr inbounds i32, i32* %17, i64 %idxprom12 (points-to size: 0)
NODE  57:   store i32 %16, i32* %arrayidx13, align 4 (points-to size: 0)
NODE  58:   %19 = load i32, i32* %temp, align 4 (points-to size: 0)
NODE  59:   %20 = load i32*, i32** %x.addr, align 8 (points-to size: 0)
NODE  60:   %21 = load i32, i32* %i, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  61:   %add14 = add nsw i32 %21, 1 (points-to size: 1)
    -> null + Offset::UNKNOWN
NODE  62:   %idxprom15 = sext i32 %add14 to i64 (points-to size: 1)
    -> null + Offset::UNKNOWN
NODE  63:   %arrayidx16 = getelementptr inbounds i32, i32* %20, i64 %idxprom15 (points-to size: 0)
NODE  64:   store i32 %19, i32* %arrayidx16, align 4 (points-to size: 0)
NODE  65:   %23 = load i32, i32* %pass, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  66:   %inc18 = add nsw i32 %23, 1 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  67:   store i32 %inc18, i32* %pass, align 4 (points-to size: 0)
NODE  68:   %22 = load i32, i32* %i, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  69:   %inc = add nsw i32 %22, 1 (points-to size: 1)
    -> null + Offset::UNKNOWN
NODE  70:   store i32 %inc, i32* %i, align 4 (points-to size: 0)
NODE  71: sort (points-to size: 1)
    -> sort + 0
NODE  72: main (points-to size: 1)
    -> main + 0
NODE  73:   call void @sort(i32* %0, i32 %1) (points-to size: 0)
NODE  74:   ret i32 0 (points-to size: 1)
    -> null + 0
