NODE   1: <1> PSNodeType::ENTRY (points-to size: 0)
NODE   2:   %retval = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %retval = alloca i32, align 4 + 0
NODE   3:   %size = alloca i32*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %size = alloca i32*, align 8 + 0
NODE   4:   %val = alloca i32*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %val = alloca i32*, align 8 + 0
NODE   5:   %N = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %N = alloca i32, align 4 + 0
NODE   6:   %cost = alloca i32*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %cost = alloca i32*, align 8 + 0
NODE   7:   %best = alloca i32*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %best = alloca i32*, align 8 + 0
NODE   8:   %M = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %M = alloca i32, align 4 + 0
NODE   9:   store i32 0, i32* %retval, align 4 (points-to size: 0)
NODE  10:   %call = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  11:   store i32 %call, i32* %N, align 4 (points-to size: 0)
NODE  12:   %call1 = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  13:   store i32 %call1, i32* %M, align 4 (points-to size: 0)
NODE  14:   %0 = load i32*, i32** %size, align 8 (points-to size: 0)
NODE  15:   %1 = load i32*, i32** %val, align 8 (points-to size: 0)
NODE  16:   %2 = load i32, i32* %N, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  17:   %3 = load i32*, i32** %cost, align 8 (points-to size: 0)
NODE  18:   %4 = load i32*, i32** %best, align 8 (points-to size: 0)
NODE  19:   %5 = load i32, i32* %M, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  20: <20> PSNodeType::CALL (points-to size: 0)
NODE  21: <21> PSNodeType::ENTRY (points-to size: 0)
NODE  22: i32* %size (points-to size: 0)
NODE  23: i32* %val (points-to size: 0)
NODE  24: i32 %N (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  25: i32* %cost (points-to size: 0)
NODE  26: i32* %best (points-to size: 0)
NODE  27: i32 %M (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  28:   %size.addr = alloca i32*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %size.addr = alloca i32*, align 8 + 0
NODE  29:   %val.addr = alloca i32*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %val.addr = alloca i32*, align 8 + 0
NODE  30:   %N.addr = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %N.addr = alloca i32, align 4 + 0
NODE  31:   %cost.addr = alloca i32*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %cost.addr = alloca i32*, align 8 + 0
NODE  32:   %best.addr = alloca i32*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %best.addr = alloca i32*, align 8 + 0
NODE  33:   %M.addr = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %M.addr = alloca i32, align 4 + 0
NODE  34:   %i = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %i = alloca i32, align 4 + 0
NODE  35:   %j = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %j = alloca i32, align 4 + 0
NODE  36:   store i32* %size, i32** %size.addr, align 8 (points-to size: 0)
NODE  37:   store i32* %val, i32** %val.addr, align 8 (points-to size: 0)
NODE  38:   store i32 %N, i32* %N.addr, align 4 (points-to size: 0)
NODE  39:   store i32* %cost, i32** %cost.addr, align 8 (points-to size: 0)
NODE  40:   store i32* %best, i32** %best.addr, align 8 (points-to size: 0)
NODE  41:   store i32 %M, i32* %M.addr, align 4 (points-to size: 0)
NODE  42:   store i32 1, i32* %j, align 4 (points-to size: 0)
NODE  43:   %0 = load i32, i32* %j, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  44:   %1 = load i32, i32* %N.addr, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  45:   store i32 1, i32* %i, align 4 (points-to size: 0)
NODE  46:   ret void (points-to size: 0)
NODE  47:   %2 = load i32, i32* %i, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  48:   %3 = load i32, i32* %M.addr, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  49:   %4 = load i32, i32* %i, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  50:   %5 = load i32*, i32** %size.addr, align 8 (points-to size: 0)
NODE  51:   %6 = load i32, i32* %j, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  52:   %idxprom = sext i32 %6 to i64 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  53:   %arrayidx = getelementptr inbounds i32, i32* %5, i64 %idxprom (points-to size: 0)
NODE  54:   %7 = load i32, i32* %arrayidx, align 4 (points-to size: 0)
NODE  55:   %8 = load i32*, i32** %cost.addr, align 8 (points-to size: 0)
NODE  56:   %9 = load i32, i32* %i, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  57:   %idxprom5 = sext i32 %9 to i64 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  58:   %arrayidx6 = getelementptr inbounds i32, i32* %8, i64 %idxprom5 (points-to size: 0)
NODE  59:   %10 = load i32, i32* %arrayidx6, align 4 (points-to size: 0)
NODE  60:   %11 = load i32*, i32** %cost.addr, align 8 (points-to size: 0)
NODE  61:   %12 = load i32, i32* %i, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  62:   %13 = load i32*, i32** %size.addr, align 8 (points-to size: 0)
NODE  63:   %14 = load i32, i32* %j, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  64:   %idxprom7 = sext i32 %14 to i64 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  65:   %arrayidx8 = getelementptr inbounds i32, i32* %13, i64 %idxprom7 (points-to size: 0)
NODE  66:   %15 = load i32, i32* %arrayidx8, align 4 (points-to size: 0)
NODE  67:   %sub = sub nsw i32 %12, %15 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  68:   %idxprom9 = sext i32 %sub to i64 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  69:   %arrayidx10 = getelementptr inbounds i32, i32* %11, i64 %idxprom9 (points-to size: 0)
NODE  70:   %16 = load i32, i32* %arrayidx10, align 4 (points-to size: 0)
NODE  71:   %17 = load i32*, i32** %val.addr, align 8 (points-to size: 0)
NODE  72:   %18 = load i32, i32* %j, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  73:   %idxprom11 = sext i32 %18 to i64 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  74:   %arrayidx12 = getelementptr inbounds i32, i32* %17, i64 %idxprom11 (points-to size: 0)
NODE  75:   %19 = load i32, i32* %arrayidx12, align 4 (points-to size: 0)
NODE  76:   %add = add nsw i32 %16, %19 (points-to size: 0)
NODE  77:   %35 = load i32, i32* %j, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  78:   %inc29 = add nsw i32 %35, 1 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  79:   store i32 %inc29, i32* %j, align 4 (points-to size: 0)
NODE  80:   %20 = load i32*, i32** %cost.addr, align 8 (points-to size: 0)
NODE  81:   %21 = load i32, i32* %i, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  82:   %22 = load i32*, i32** %size.addr, align 8 (points-to size: 0)
NODE  83:   %23 = load i32, i32* %j, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  84:   %idxprom15 = sext i32 %23 to i64 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  85:   %arrayidx16 = getelementptr inbounds i32, i32* %22, i64 %idxprom15 (points-to size: 0)
NODE  86:   %24 = load i32, i32* %arrayidx16, align 4 (points-to size: 0)
NODE  87:   %sub17 = sub nsw i32 %21, %24 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  88:   %idxprom18 = sext i32 %sub17 to i64 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  89:   %arrayidx19 = getelementptr inbounds i32, i32* %20, i64 %idxprom18 (points-to size: 0)
NODE  90:   %25 = load i32, i32* %arrayidx19, align 4 (points-to size: 0)
NODE  91:   %26 = load i32*, i32** %val.addr, align 8 (points-to size: 0)
NODE  92:   %27 = load i32, i32* %j, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  93:   %idxprom20 = sext i32 %27 to i64 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  94:   %arrayidx21 = getelementptr inbounds i32, i32* %26, i64 %idxprom20 (points-to size: 0)
NODE  95:   %28 = load i32, i32* %arrayidx21, align 4 (points-to size: 0)
NODE  96:   %add22 = add nsw i32 %25, %28 (points-to size: 0)
NODE  97:   %29 = load i32*, i32** %cost.addr, align 8 (points-to size: 0)
NODE  98:   %30 = load i32, i32* %i, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  99:   %idxprom23 = sext i32 %30 to i64 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE 100:   %arrayidx24 = getelementptr inbounds i32, i32* %29, i64 %idxprom23 (points-to size: 0)
NODE 101:   store i32 %add22, i32* %arrayidx24, align 4 (points-to size: 0)
NODE 102:   %31 = load i32, i32* %j, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE 103:   %32 = load i32*, i32** %best.addr, align 8 (points-to size: 0)
NODE 104:   %33 = load i32, i32* %i, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE 105:   %idxprom25 = sext i32 %33 to i64 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE 106:   %arrayidx26 = getelementptr inbounds i32, i32* %32, i64 %idxprom25 (points-to size: 0)
NODE 107:   store i32 %31, i32* %arrayidx26, align 4 (points-to size: 0)
NODE 108:   %34 = load i32, i32* %i, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE 109:   %inc = add nsw i32 %34, 1 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE 110:   store i32 %inc, i32* %i, align 4 (points-to size: 0)
NODE 111: knapsack (points-to size: 1)
    -> knapsack + 0
NODE 112: main (points-to size: 1)
    -> main + 0
NODE 113:   call void @knapsack(i32* %0, i32* %1, i32 %2, i32* %3, i32* %4, i32  ... (points-to size: 0)
NODE 114:   ret i32 0 (points-to size: 1)
    -> null + 0
