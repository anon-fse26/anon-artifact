NODE   1: <1> PSNodeType::ENTRY (points-to size: 0)
NODE   2:   %retval = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %retval = alloca i32, align 4 + 0
NODE   3:   %a = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %a = alloca i32, align 4 + 0
NODE   4:   %b = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %b = alloca i32, align 4 + 0
NODE   5:   %c = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %c = alloca i32, align 4 + 0
NODE   6:   %i = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %i = alloca i32, align 4 + 0
NODE   7:   %j = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %j = alloca i32, align 4 + 0
NODE   8:   %M = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %M = alloca i32, align 4 + 0
NODE   9:   %N = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %N = alloca i32, align 4 + 0
NODE  10:   store i32 0, i32* %retval, align 4 (points-to size: 0)
NODE  11:   %call = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  12:   store i32 %call, i32* %i, align 4 (points-to size: 0)
NODE  13:   %call1 = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  14:   store i32 %call1, i32* %j, align 4 (points-to size: 0)
NODE  15:   %call2 = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  16:   store i32 %call2, i32* %M, align 4 (points-to size: 0)
NODE  17:   %call3 = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  18:   store i32 %call3, i32* %N, align 4 (points-to size: 0)
NODE  19:   %0 = load i32, i32* %i, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  20:   store i32 %0, i32* %a, align 4 (points-to size: 0)
NODE  21:   %1 = load i32, i32* %j, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  22:   store i32 %1, i32* %b, align 4 (points-to size: 0)
NODE  23:   store i32 0, i32* %c, align 4 (points-to size: 0)
NODE  24:   %2 = load i32, i32* %i, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  25:   %3 = load i32, i32* %M, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  26:   %6 = phi i1 [ true, %while.cond ], [ %cmp4, %lor.rhs ] (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  27:   %4 = load i32, i32* %j, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  28:   %5 = load i32, i32* %N, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  29:   %7 = load i32, i32* %i, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  30:   %add = add nsw i32 %7, 1 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  31:   store i32 %add, i32* %i, align 4 (points-to size: 0)
NODE  32:   %8 = load i32, i32* %j, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  33:   %add5 = add nsw i32 %8, 1 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  34:   store i32 %add5, i32* %j, align 4 (points-to size: 0)
NODE  35:   %9 = load i32, i32* %c, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  36:   %add6 = add nsw i32 %9, 1 (points-to size: 1)
    -> null + Offset::UNKNOWN
NODE  37:   store i32 %add6, i32* %c, align 4 (points-to size: 0)
NODE  38:   ret i32 0 (points-to size: 1)
    -> null + 0
NODE  39: main (points-to size: 1)
    -> main + 0
