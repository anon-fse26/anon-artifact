NODE   2: <2> PSNodeType::ENTRY (points-to size: 0)
NODE   3:   %retval = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %retval = alloca i32, align 4 + 0
NODE   4:   %got_lock = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %got_lock = alloca i32, align 4 + 0
NODE   5:   %old = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %old = alloca i32, align 4 + 0
NODE   6:   %new = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %new = alloca i32, align 4 + 0
NODE   7:   store i32 0, i32* %retval, align 4 (points-to size: 0)
NODE   8:   store i32 0, i32* %old, align 4 (points-to size: 0)
NODE   9:   store i32 0, i32* %new, align 4 (points-to size: 0)
NODE  10:   %call = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  11:   store i32 0, i32* %got_lock, align 4 (points-to size: 0)
NODE  12:   %call1 = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  13: <13> PSNodeType::CALL (points-to size: 0)
NODE  14: <14> PSNodeType::ENTRY (points-to size: 0)
NODE  15:   %0 = load i32, i32* @LOCK, align 4 (points-to size: 2)
    -> null + 0
    -> unknown + Offset::UNKNOWN
NODE  16:   store i32 1, i32* @LOCK, align 4 (points-to size: 0)
NODE  17:   ret void (points-to size: 0)
NODE  18: lock (points-to size: 1)
    -> lock + 0
NODE  19: main (points-to size: 1)
    -> main + 0
NODE  20:   call void @lock() (points-to size: 0)
NODE  21:   %2 = load i32, i32* %new, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  22:   store i32 %2, i32* %old, align 4 (points-to size: 0)
NODE  23:   %call11 = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  24: <24> PSNodeType::CALL (points-to size: 0)
NODE  25:   call void @lock() (points-to size: 0)
NODE  26:   %0 = load i32, i32* %got_lock, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  27:   %inc = add nsw i32 %0, 1 (points-to size: 1)
    -> null + Offset::UNKNOWN
NODE  28:   store i32 %inc, i32* %got_lock, align 4 (points-to size: 0)
NODE  29:   %1 = load i32, i32* %got_lock, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  30: <30> PSNodeType::CALL (points-to size: 0)
NODE  31: <31> PSNodeType::ENTRY (points-to size: 0)
NODE  32:   %0 = load i32, i32* @LOCK, align 4 (points-to size: 2)
    -> null + 0
    -> unknown + Offset::UNKNOWN
NODE  33:   store i32 0, i32* @LOCK, align 4 (points-to size: 0)
NODE  34:   ret void (points-to size: 0)
NODE  35: unlock (points-to size: 1)
    -> unlock + 0
NODE  36:   call void @unlock() (points-to size: 0)
NODE  37:   %3 = load i32, i32* %new, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  38:   %inc14 = add nsw i32 %3, 1 (points-to size: 1)
    -> null + Offset::UNKNOWN
NODE  39:   store i32 %inc14, i32* %new, align 4 (points-to size: 0)
NODE  40: <40> PSNodeType::CALL (points-to size: 0)
NODE  41:   call void @unlock() (points-to size: 0)
NODE  42:   %4 = load i32, i32* %new, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  43:   %5 = load i32, i32* %old, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  44:   %call7 = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  45: <45> PSNodeType::CALL (points-to size: 0)
NODE  46:   call void @unlock() (points-to size: 0)
NODE  47:   ret i32 0 (points-to size: 1)
    -> null + 0
