NODE   2: <2> PSNodeType::ENTRY (points-to size: 0)
NODE   3:   %retval = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %retval = alloca i32, align 4 + 0
NODE   4:   store i32 0, i32* %retval, align 4 (points-to size: 0)
NODE   5:   %call = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE   6:   store i32 %call, i32* @x, align 4 (points-to size: 0)
NODE   7:   %0 = load i32, i32* @x, align 4 (points-to size: 2)
    -> null + 0
    -> unknown + Offset::UNKNOWN
NODE   8:   %call1 = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE   9:   ret i32 0 (points-to size: 1)
    -> null + 0
NODE  10: <10> PSNodeType::CALL (points-to size: 0)
NODE  11: <11> PSNodeType::ENTRY (points-to size: 0)
NODE  12:   %0 = load i32, i32* @x, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  13:   %dec = add nsw i32 %0, -1 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  14:   store i32 %dec, i32* @x, align 4 (points-to size: 0)
NODE  15:   ret void (points-to size: 0)
NODE  16: foo (points-to size: 1)
    -> foo + 0
NODE  17: main (points-to size: 1)
    -> main + 0
NODE  18:   call void @foo() (points-to size: 0)
NODE  19: <19> PSNodeType::CALL (points-to size: 0)
NODE  20:   call void @foo() (points-to size: 0)
