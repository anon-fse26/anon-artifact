NODE   1: <1> PSNodeType::ENTRY (points-to size: 0)
NODE   2:   %retval = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %retval = alloca i32, align 4 + 0
NODE   3:   %i = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %i = alloca i32, align 4 + 0
NODE   4:   %j = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %j = alloca i32, align 4 + 0
NODE   5:   %nondetNat = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %nondetNat = alloca i32, align 4 + 0
NODE   6:   %nondetPos = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %nondetPos = alloca i32, align 4 + 0
NODE   7:   store i32 0, i32* %retval, align 4 (points-to size: 0)
NODE   8:   %call = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE   9:   store i32 %call, i32* %i, align 4 (points-to size: 0)
NODE  10:   %call1 = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  11:   store i32 %call1, i32* %j, align 4 (points-to size: 0)
NODE  12:   %0 = load i32, i32* %i, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  13:   %1 = load i32, i32* %j, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  14:   %sub = sub nsw i32 %0, %1 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  15:   %call2 = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  16: <16> PSNodeType::CALL (points-to size: 0)
NODE  17: <17> PSNodeType::ENTRY (points-to size: 0)
NODE  18: i32 %i (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  19:   %retval = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %retval = alloca i32, align 4 + 0
NODE  20:   %i.addr = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %i.addr = alloca i32, align 4 + 0
NODE  21:   store i32 %i, i32* %i.addr, align 4 (points-to size: 0)
NODE  22:   %0 = load i32, i32* %i.addr, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  23:   %1 = load i32, i32* %i.addr, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  24:   store i32 %1, i32* %retval, align 4 (points-to size: 0)
NODE  25:   %3 = load i32, i32* %retval, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  26:   ret i32 %3 (points-to size: 0)
NODE  27:   %2 = load i32, i32* %i.addr, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  28:   %sub = sub nsw i32 0, %2 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  29:   store i32 %sub, i32* %retval, align 4 (points-to size: 0)
NODE  30: absMathInteger (points-to size: 1)
    -> absMathInteger + 0
NODE  31: main (points-to size: 1)
    -> main + 0
NODE  32:   %call3 = call i32 @absMathInteger(i32 %call2) (points-to size: 0)
NODE  33:   store i32 %call3, i32* %nondetNat, align 4 (points-to size: 0)
NODE  34:   %2 = load i32, i32* %i, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  35:   %3 = load i32, i32* %nondetNat, align 4 (points-to size: 0)
NODE  36:   %sub4 = sub nsw i32 %2, %3 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  37:   store i32 %sub4, i32* %i, align 4 (points-to size: 0)
NODE  38:   %call5 = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  39: <39> PSNodeType::CALL (points-to size: 0)
NODE  40:   %call6 = call i32 @absMathInteger(i32 %call5) (points-to size: 0)
NODE  41:   %add = add nsw i32 %call6, 1 (points-to size: 0)
NODE  42:   store i32 %add, i32* %nondetPos, align 4 (points-to size: 0)
NODE  43:   %4 = load i32, i32* %j, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  44:   %5 = load i32, i32* %nondetPos, align 4 (points-to size: 0)
NODE  45:   %add7 = add nsw i32 %4, %5 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  46:   store i32 %add7, i32* %j, align 4 (points-to size: 0)
NODE  47:   ret i32 0 (points-to size: 1)
    -> null + 0
