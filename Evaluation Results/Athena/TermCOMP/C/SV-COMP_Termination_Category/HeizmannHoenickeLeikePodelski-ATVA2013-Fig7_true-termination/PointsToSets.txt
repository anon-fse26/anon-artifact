NODE   1: <1> PSNodeType::ENTRY (points-to size: 0)
NODE   2:   %retval = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %retval = alloca i32, align 4 + 0
NODE   3:   %a_length = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %a_length = alloca i32, align 4 + 0
NODE   4:   %saved_stack = alloca i8*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %saved_stack = alloca i8*, align 8 + 0
NODE   5:   %__vla_expr0 = alloca i64, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %__vla_expr0 = alloca i64, align 8 + 0
NODE   6:   %offset = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %offset = alloca i32, align 4 + 0
NODE   7:   %i = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %i = alloca i32, align 4 + 0
NODE   8:   store i32 0, i32* %retval, align 4 (points-to size: 0)
NODE   9:   %call = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  10:   store i32 %call, i32* %a_length, align 4 (points-to size: 0)
NODE  11:   %0 = load i32, i32* %a_length, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  12:   store i32 0, i32* %retval, align 4 (points-to size: 0)
NODE  13:   %13 = load i32, i32* %retval, align 4 (points-to size: 1)
    -> null + 0
NODE  14:   ret i32 %13 (points-to size: 0)
NODE  15:   %1 = load i32, i32* %a_length, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  16:   %2 = zext i32 %1 to i64 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  17:   %3 = call i8* @llvm.stacksave() (points-to size: 1)
    ->   %3 = call i8* @llvm.stacksave() + 0
NODE  18:   store i8* %3, i8** %saved_stack, align 8 (points-to size: 0)
NODE  19:   %vla = alloca i32, i64 %2, align 16 (points-to size: 1)
    ->   %vla = alloca i32, i64 %2, align 16 + 0
NODE  20:   store i64 %2, i64* %__vla_expr0, align 8 (points-to size: 0)
NODE  21:   store i32 1, i32* %offset, align 4 (points-to size: 0)
NODE  22:   store i32 0, i32* %i, align 4 (points-to size: 0)
NODE  23:   %4 = load i32, i32* %i, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  24:   %5 = load i32, i32* %a_length, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  25:   %6 = load i32, i32* %i, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  26:   %idxprom = sext i32 %6 to i64 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  27:   %arrayidx = getelementptr inbounds i32, i32* %vla, i64 %idxprom (points-to size: 1)
    ->   %vla = alloca i32, i64 %2, align 16 + Offset::UNKNOWN
NODE  28:   %7 = load i32, i32* %arrayidx, align 4 (points-to size: 0)
NODE  29:   store i32 0, i32* %retval, align 4 (points-to size: 0)
NODE  30:   %12 = load i8*, i8** %saved_stack, align 8 (points-to size: 1)
    ->   %3 = call i8* @llvm.stacksave() + 0
NODE  31:   call void @llvm.stackrestore(i8* %12) (points-to size: 0)
NODE  32:   %8 = load i32, i32* %i, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  33:   %9 = load i32, i32* %offset, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  34:   %add = add nsw i32 %8, %9 (points-to size: 1)
    -> null + Offset::UNKNOWN
NODE  35:   %10 = load i32, i32* %i, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  36:   %idxprom5 = sext i32 %10 to i64 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  37:   %arrayidx6 = getelementptr inbounds i32, i32* %vla, i64 %idxprom5 (points-to size: 1)
    ->   %vla = alloca i32, i64 %2, align 16 + Offset::UNKNOWN
NODE  38:   %11 = load i32, i32* %arrayidx6, align 4 (points-to size: 0)
NODE  39:   %add7 = add nsw i32 %add, %11 (points-to size: 1)
    -> null + Offset::UNKNOWN
NODE  40:   store i32 %add7, i32* %i, align 4 (points-to size: 0)
NODE  41: main (points-to size: 1)
    -> main + 0
