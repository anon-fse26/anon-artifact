NODE   1: <1> PSNodeType::ENTRY (points-to size: 0)
NODE   2:   %retval = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %retval = alloca i32, align 4 + 0
NODE   3:   store i32 0, i32* %retval, align 4 (points-to size: 0)
NODE   4:   %call = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE   5: <5> PSNodeType::CALL (points-to size: 0)
NODE   6: <6> PSNodeType::ENTRY (points-to size: 0)
NODE   7: i32 %x (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE   8:   %x.addr = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %x.addr = alloca i32, align 4 + 0
NODE   9:   %res = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %res = alloca i32, align 4 + 0
NODE  10:   store i32 %x, i32* %x.addr, align 4 (points-to size: 0)
NODE  11:   store i32 0, i32* %res, align 4 (points-to size: 0)
NODE  12:   %0 = load i32, i32* %x.addr, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  13:   %1 = load i32, i32* %x.addr, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  14:   %div = sdiv i32 %1, 2 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  15:   store i32 %div, i32* %x.addr, align 4 (points-to size: 0)
NODE  16:   %2 = load i32, i32* %res, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  17:   %inc = add nsw i32 %2, 1 (points-to size: 1)
    -> null + Offset::UNKNOWN
NODE  18:   store i32 %inc, i32* %res, align 4 (points-to size: 0)
NODE  19:   %3 = load i32, i32* %res, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  20:   ret i32 %3 (points-to size: 0)
NODE  21: mlog (points-to size: 1)
    -> mlog + 0
NODE  22: main (points-to size: 1)
    -> main + 0
NODE  23:   %call1 = call i32 @mlog(i32 %call) (points-to size: 0)
NODE  24:   ret i32 %call1 (points-to size: 0)
