NODE   1: <1> PSNodeType::ENTRY (points-to size: 0)
NODE   2:   %retval = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %retval = alloca i32, align 4 + 0
NODE   3:   store i32 0, i32* %retval, align 4 (points-to size: 0)
NODE   4:   %call = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE   5:   %call1 = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE   6:   %call2 = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE   7: <7> PSNodeType::CALL (points-to size: 0)
NODE   8: <8> PSNodeType::ENTRY (points-to size: 0)
NODE   9: i32 %x (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  10: i32 %y (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  11: i32 %z (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  12:   %x.addr = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %x.addr = alloca i32, align 4 + 0
NODE  13:   %y.addr = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %y.addr = alloca i32, align 4 + 0
NODE  14:   %z.addr = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %z.addr = alloca i32, align 4 + 0
NODE  15:   %c = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %c = alloca i32, align 4 + 0
NODE  16:   store i32 %x, i32* %x.addr, align 4 (points-to size: 0)
NODE  17:   store i32 %y, i32* %y.addr, align 4 (points-to size: 0)
NODE  18:   store i32 %z, i32* %z.addr, align 4 (points-to size: 0)
NODE  19:   store i32 0, i32* %c, align 4 (points-to size: 0)
NODE  20:   %0 = load i32, i32* %x.addr, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  21:   %1 = load i32, i32* %z.addr, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  22:   %4 = phi i1 [ true, %while.cond ], [ %cmp1, %lor.rhs ] (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  23:   %2 = load i32, i32* %y.addr, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  24:   %3 = load i32, i32* %z.addr, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  25:   %5 = load i32, i32* %x.addr, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  26:   %6 = load i32, i32* %z.addr, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  27:   %12 = load i32, i32* %c, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  28:   ret i32 %12 (points-to size: 0)
NODE  29:   %7 = load i32, i32* %x.addr, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  30:   %sub = sub nsw i32 %7, 1 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  31:   store i32 %sub, i32* %x.addr, align 4 (points-to size: 0)
NODE  32:   %11 = load i32, i32* %c, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  33:   %add = add nsw i32 %11, 1 (points-to size: 1)
    -> null + Offset::UNKNOWN
NODE  34:   store i32 %add, i32* %c, align 4 (points-to size: 0)
NODE  35:   %8 = load i32, i32* %y.addr, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  36:   %9 = load i32, i32* %z.addr, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  37:   %10 = load i32, i32* %y.addr, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  38:   %sub5 = sub nsw i32 %10, 1 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  39:   store i32 %sub5, i32* %y.addr, align 4 (points-to size: 0)
NODE  40: test_fun (points-to size: 1)
    -> test_fun + 0
NODE  41: main (points-to size: 1)
    -> main + 0
NODE  42:   %call3 = call i32 @test_fun(i32 %call, i32 %call1, i32 %call2) (points-to size: 0)
NODE  43:   ret i32 %call3 (points-to size: 0)
