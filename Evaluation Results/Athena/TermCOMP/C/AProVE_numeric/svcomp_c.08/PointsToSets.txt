NODE   1: <1> PSNodeType::ENTRY (points-to size: 0)
NODE   2:   %retval = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %retval = alloca i32, align 4 + 0
NODE   3:   store i32 0, i32* %retval, align 4 (points-to size: 0)
NODE   4:   %call = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE   5:   %call1 = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE   6: <6> PSNodeType::CALL (points-to size: 0)
NODE   7: <7> PSNodeType::ENTRY (points-to size: 0)
NODE   8: i32 %i (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE   9: i32 %j (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  10:   %i.addr = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %i.addr = alloca i32, align 4 + 0
NODE  11:   %j.addr = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %j.addr = alloca i32, align 4 + 0
NODE  12:   %c = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %c = alloca i32, align 4 + 0
NODE  13:   store i32 %i, i32* %i.addr, align 4 (points-to size: 0)
NODE  14:   store i32 %j, i32* %j.addr, align 4 (points-to size: 0)
NODE  15:   store i32 0, i32* %c, align 4 (points-to size: 0)
NODE  16:   %0 = load i32, i32* %i.addr, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  17:   store i32 0, i32* %j.addr, align 4 (points-to size: 0)
NODE  18:   %6 = load i32, i32* %c, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  19:   ret i32 %6 (points-to size: 0)
NODE  20:   %1 = load i32, i32* %j.addr, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  21:   %2 = load i32, i32* %i.addr, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  22:   %sub = sub nsw i32 %2, 1 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  23:   %3 = load i32, i32* %j.addr, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  24:   %add = add nsw i32 %3, 1 (points-to size: 1)
    -> null + Offset::UNKNOWN
NODE  25:   store i32 %add, i32* %j.addr, align 4 (points-to size: 0)
NODE  26:   %4 = load i32, i32* %c, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  27:   %add4 = add nsw i32 %4, 1 (points-to size: 1)
    -> null + Offset::UNKNOWN
NODE  28:   store i32 %add4, i32* %c, align 4 (points-to size: 0)
NODE  29:   %5 = load i32, i32* %i.addr, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  30:   %sub5 = sub nsw i32 %5, 1 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  31:   store i32 %sub5, i32* %i.addr, align 4 (points-to size: 0)
NODE  32: test_fun (points-to size: 1)
    -> test_fun + 0
NODE  33: main (points-to size: 1)
    -> main + 0
NODE  34:   %call2 = call i32 @test_fun(i32 %call, i32 %call1) (points-to size: 0)
NODE  35:   ret i32 %call2 (points-to size: 0)
