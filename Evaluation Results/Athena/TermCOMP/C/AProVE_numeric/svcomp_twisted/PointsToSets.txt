NODE   1: <1> PSNodeType::ENTRY (points-to size: 0)
NODE   2:   %retval = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %retval = alloca i32, align 4 + 0
NODE   3:   store i32 0, i32* %retval, align 4 (points-to size: 0)
NODE   4:   %call = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE   5:   %call1 = call i32 @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE   6: <6> PSNodeType::CALL (points-to size: 0)
NODE   7: <7> PSNodeType::ENTRY (points-to size: 0)
NODE   8: i32 %k (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE   9: i32 %l (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  10:   %k.addr = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %k.addr = alloca i32, align 4 + 0
NODE  11:   %l.addr = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %l.addr = alloca i32, align 4 + 0
NODE  12:   %i = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %i = alloca i32, align 4 + 0
NODE  13:   %j = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %j = alloca i32, align 4 + 0
NODE  14:   store i32 %k, i32* %k.addr, align 4 (points-to size: 0)
NODE  15:   store i32 %l, i32* %l.addr, align 4 (points-to size: 0)
NODE  16:   store i32 0, i32* %i, align 4 (points-to size: 0)
NODE  17:   store i32 0, i32* %j, align 4 (points-to size: 0)
NODE  18:   %0 = load i32, i32* %i, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  19:   %1 = load i32, i32* %k.addr, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  20:   %2 = load i32, i32* %i, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  21:   %inc = add nsw i32 %2, 1 (points-to size: 1)
    -> null + Offset::UNKNOWN
NODE  22:   store i32 %inc, i32* %i, align 4 (points-to size: 0)
NODE  23:   %3 = load i32, i32* %i, align 4 (points-to size: 1)
    -> null + Offset::UNKNOWN
NODE  24:   %rem = srem i32 %3, 2 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  25:   %4 = load i32, i32* %j, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  26:   %5 = load i32, i32* %l.addr, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  27:   %6 = load i32, i32* %j, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  28:   %inc4 = add nsw i32 %6, 1 (points-to size: 1)
    -> null + Offset::UNKNOWN
NODE  29:   store i32 %inc4, i32* %j, align 4 (points-to size: 0)
NODE  30:   %7 = load i32, i32* %i, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  31:   %rem5 = srem i32 %7, 2 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  32:   %8 = load i32, i32* %i, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  33:   %9 = load i32, i32* %j, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  34:   %add = add nsw i32 %8, %9 (points-to size: 1)
    -> null + Offset::UNKNOWN
NODE  35:   ret i32 %add (points-to size: 0)
NODE  36: f (points-to size: 1)
    -> f + 0
NODE  37: main (points-to size: 1)
    -> main + 0
NODE  38:   %call2 = call i32 @f(i32 %call, i32 %call1) (points-to size: 0)
NODE  39:   ret i32 %call2 (points-to size: 0)
