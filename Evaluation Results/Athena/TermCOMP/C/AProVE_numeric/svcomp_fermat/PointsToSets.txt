NODE   1: <1> PSNodeType::ENTRY (points-to size: 0)
NODE   2:   %retval = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %retval = alloca i32, align 4 + 0
NODE   3:   store i32 0, i32* %retval, align 4 (points-to size: 0)
NODE   4: <4> PSNodeType::CALL (points-to size: 0)
NODE   5: <5> PSNodeType::ENTRY (points-to size: 0)
NODE   6:   %retval = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %retval = alloca i32, align 4 + 0
NODE   7:   %MAX = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %MAX = alloca i32, align 4 + 0
NODE   8:   %a = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %a = alloca i32, align 4 + 0
NODE   9:   %b = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %b = alloca i32, align 4 + 0
NODE  10:   %c = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %c = alloca i32, align 4 + 0
NODE  11:   store i32 1000, i32* %MAX, align 4 (points-to size: 0)
NODE  12:   store i32 1, i32* %a, align 4 (points-to size: 0)
NODE  13:   store i32 1, i32* %b, align 4 (points-to size: 0)
NODE  14:   store i32 1, i32* %c, align 4 (points-to size: 0)
NODE  15:   %0 = load i32, i32* %a, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  16:   %1 = load i32, i32* %a, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  17:   %mul = mul nsw i32 %0, %1 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  18:   %2 = load i32, i32* %a, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  19:   %mul1 = mul nsw i32 %mul, %2 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  20:   %3 = load i32, i32* %b, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  21:   %4 = load i32, i32* %b, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  22:   %mul2 = mul nsw i32 %3, %4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  23:   %5 = load i32, i32* %b, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  24:   %mul3 = mul nsw i32 %mul2, %5 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  25:   %6 = load i32, i32* %c, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  26:   %7 = load i32, i32* %c, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  27:   %mul4 = mul nsw i32 %6, %7 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  28:   %8 = load i32, i32* %c, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  29:   %mul5 = mul nsw i32 %mul4, %8 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  30:   %add = add nsw i32 %mul3, %mul5 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  31:   store i32 1, i32* %retval, align 4 (points-to size: 0)
NODE  32:   %15 = load i32, i32* %retval, align 4 (points-to size: 2)
    -> null + 0
    -> unknown + Offset::UNKNOWN
NODE  33:   ret i32 %15 (points-to size: 0)
NODE  34:   %9 = load i32, i32* %a, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  35:   %inc = add nsw i32 %9, 1 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  36:   store i32 %inc, i32* %a, align 4 (points-to size: 0)
NODE  37:   %10 = load i32, i32* %a, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  38:   store i32 1, i32* %a, align 4 (points-to size: 0)
NODE  39:   %11 = load i32, i32* %b, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  40:   %inc8 = add nsw i32 %11, 1 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  41:   store i32 %inc8, i32* %b, align 4 (points-to size: 0)
NODE  42:   %12 = load i32, i32* %b, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  43:   store i32 1, i32* %b, align 4 (points-to size: 0)
NODE  44:   %13 = load i32, i32* %c, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  45:   %inc12 = add nsw i32 %13, 1 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  46:   store i32 %inc12, i32* %c, align 4 (points-to size: 0)
NODE  47:   %14 = load i32, i32* %c, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  48:   store i32 0, i32* %retval, align 4 (points-to size: 0)
NODE  49: fermat (points-to size: 1)
    -> fermat + 0
NODE  50: main (points-to size: 1)
    -> main + 0
NODE  51:   %call = call i32 @fermat() (points-to size: 0)
NODE  52:   ret i32 %call (points-to size: 0)
