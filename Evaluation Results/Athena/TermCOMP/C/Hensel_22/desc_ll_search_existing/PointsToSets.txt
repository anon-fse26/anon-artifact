NODE   1: <1> PSNodeType::ENTRY (points-to size: 0)
NODE   2:   %retval = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %retval = alloca i32, align 4 + 0
NODE   3:   %n = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %n = alloca i32, align 4 + 0
NODE   4:   %m = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %m = alloca i32, align 4 + 0
NODE   5:   %head = alloca %struct.list*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %head = alloca %struct.list*, align 8 + 0
NODE   6:   store i32 0, i32* %retval, align 4 (points-to size: 0)
NODE   7:   %call = call i32 (...) @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE   8:   store i32 %call, i32* %n, align 4 (points-to size: 0)
NODE   9:   %0 = load i32, i32* %n, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  10:   store i32 0, i32* %retval, align 4 (points-to size: 0)
NODE  11:   %7 = load i32, i32* %retval, align 4 (points-to size: 1)
    -> null + 0
NODE  12:   ret i32 %7 (points-to size: 0)
NODE  13:   %call1 = call i32 (...) @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  14:   store i32 %call1, i32* %m, align 4 (points-to size: 0)
NODE  15:   %1 = load i32, i32* %m, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  16:   store i32 0, i32* %retval, align 4 (points-to size: 0)
NODE  17:   %2 = load i32, i32* %m, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  18:   %3 = load i32, i32* %n, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  19:   %4 = load i32, i32* %n, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  20: <20> PSNodeType::CALL (points-to size: 0)
NODE  21: <21> PSNodeType::ENTRY (points-to size: 0)
NODE  22: i32 %n (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  23:   %n.addr = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %n.addr = alloca i32, align 4 + 0
NODE  24:   %curr = alloca %struct.list*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %curr = alloca %struct.list*, align 8 + 0
NODE  25:   %tail = alloca %struct.list*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %tail = alloca %struct.list*, align 8 + 0
NODE  26:   %j = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %j = alloca i32, align 4 + 0
NODE  27:   store i32 %n, i32* %n.addr, align 4 (points-to size: 0)
NODE  28:   store %struct.list* null, %struct.list** %curr, align 8 (points-to size: 0)
NODE  29:   %0 = load %struct.list*, %struct.list** %curr, align 8 (points-to size: 1)
    -> null + 0
NODE  30:   store %struct.list* %0, %struct.list** %tail, align 8 (points-to size: 0)
NODE  31:   store i32 0, i32* %j, align 4 (points-to size: 0)
NODE  32:   %1 = load i32, i32* %j, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  33:   %2 = load i32, i32* %n.addr, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  34:   %call = call noalias i8* @malloc(i64 16) #3 [size: 16, heap: 1, zeroed: 0] (points-to size: 1)
    ->   %call = call noalias i8* @malloc(i64 16) #3 + 0
NODE  35:   %3 = bitcast i8* %call to %struct.list* (points-to size: 1)
    ->   %call = call noalias i8* @malloc(i64 16) #3 + 0
NODE  36:   store %struct.list* %3, %struct.list** %curr, align 8 (points-to size: 0)
NODE  37:   %4 = load i32, i32* %j, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  38:   %5 = load %struct.list*, %struct.list** %curr, align 8 (points-to size: 1)
    ->   %call = call noalias i8* @malloc(i64 16) #3 + 0
NODE  39:   %value = getelementptr inbounds %struct.list, %struct.list* %5, i32  ... (points-to size: 1)
    ->   %call = call noalias i8* @malloc(i64 16) #3 + 0
NODE  40:   store i32 %4, i32* %value, align 8 (points-to size: 0)
NODE  41:   %6 = load %struct.list*, %struct.list** %tail, align 8 (points-to size: 2)
    ->   %call = call noalias i8* @malloc(i64 16) #3 + 0
    -> null + 0
NODE  42:   %7 = load %struct.list*, %struct.list** %curr, align 8 (points-to size: 1)
    ->   %call = call noalias i8* @malloc(i64 16) #3 + 0
NODE  43:   %next = getelementptr inbounds %struct.list, %struct.list* %7, i32 0 ... (points-to size: 1)
    ->   %call = call noalias i8* @malloc(i64 16) #3 + 8
NODE  44:   store %struct.list* %6, %struct.list** %next, align 8 (points-to size: 0)
NODE  45:   %8 = load %struct.list*, %struct.list** %curr, align 8 (points-to size: 1)
    ->   %call = call noalias i8* @malloc(i64 16) #3 + 0
NODE  46:   store %struct.list* %8, %struct.list** %tail, align 8 (points-to size: 0)
NODE  47:   %10 = load %struct.list*, %struct.list** %curr, align 8 (points-to size: 2)
    ->   %call = call noalias i8* @malloc(i64 16) #3 + 0
    -> null + 0
NODE  48:   ret %struct.list* %10 (points-to size: 2)
    ->   %call = call noalias i8* @malloc(i64 16) #3 + 0
    -> null + 0
NODE  49:   %9 = load i32, i32* %j, align 4 (points-to size: 2)
    -> null + 0
    -> null + Offset::UNKNOWN
NODE  50:   %inc = add nsw i32 %9, 1 (points-to size: 1)
    -> null + Offset::UNKNOWN
NODE  51:   store i32 %inc, i32* %j, align 4 (points-to size: 0)
NODE  52: init_list (points-to size: 1)
    -> init_list + 0
NODE  53: main (points-to size: 1)
    -> main + 0
NODE  54:   %call6 = call %struct.list* @init_list(i32 %4) (points-to size: 2)
    ->   %call = call noalias i8* @malloc(i64 16) #3 + 0
    -> null + 0
NODE  55:   store %struct.list* %call6, %struct.list** %head, align 8 (points-to size: 0)
NODE  56:   %5 = load %struct.list*, %struct.list** %head, align 8 (points-to size: 2)
    ->   %call = call noalias i8* @malloc(i64 16) #3 + 0
    -> null + 0
NODE  57:   %6 = load i32, i32* %m, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  58: <58> PSNodeType::CALL (points-to size: 0)
NODE  59: <59> PSNodeType::ENTRY (points-to size: 0)
NODE  60: %struct.list* %head (points-to size: 2)
    ->   %call = call noalias i8* @malloc(i64 16) #3 + 0
    -> null + 0
NODE  61: i32 %m (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  62:   %head.addr = alloca %struct.list*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %head.addr = alloca %struct.list*, align 8 + 0
NODE  63:   %m.addr = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %m.addr = alloca i32, align 4 + 0
NODE  64:   %curr = alloca %struct.list*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %curr = alloca %struct.list*, align 8 + 0
NODE  65:   store %struct.list* %head, %struct.list** %head.addr, align 8 (points-to size: 0)
NODE  66:   store i32 %m, i32* %m.addr, align 4 (points-to size: 0)
NODE  67:   %0 = load %struct.list*, %struct.list** %head.addr, align 8 (points-to size: 2)
    ->   %call = call noalias i8* @malloc(i64 16) #3 + 0
    -> null + 0
NODE  68:   store %struct.list* %0, %struct.list** %curr, align 8 (points-to size: 0)
NODE  69:   %1 = load %struct.list*, %struct.list** %curr, align 8 (points-to size: 2)
    ->   %call = call noalias i8* @malloc(i64 16) #3 + 0
    -> null + 0
NODE  70:   %value = getelementptr inbounds %struct.list, %struct.list* %1, i32  ... (points-to size: 2)
    ->   %call = call noalias i8* @malloc(i64 16) #3 + 0
    -> null + 0
NODE  71:   %2 = load i32, i32* %value, align 8 (points-to size: 1)
    -> null + Offset::UNKNOWN
NODE  72:   %3 = load i32, i32* %m.addr, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  73:   %4 = load %struct.list*, %struct.list** %curr, align 8 (points-to size: 2)
    ->   %call = call noalias i8* @malloc(i64 16) #3 + 0
    -> null + 0
NODE  74:   %next = getelementptr inbounds %struct.list, %struct.list* %4, i32 0 ... (points-to size: 2)
    ->   %call = call noalias i8* @malloc(i64 16) #3 + 8
    -> null + Offset::UNKNOWN
NODE  75:   %5 = load %struct.list*, %struct.list** %next, align 8 (points-to size: 2)
    ->   %call = call noalias i8* @malloc(i64 16) #3 + 0
    -> null + 0
NODE  76:   store %struct.list* %5, %struct.list** %curr, align 8 (points-to size: 0)
NODE  77:   ret void (points-to size: 0)
NODE  78: search (points-to size: 1)
    -> search + 0
NODE  79:   call void @search(%struct.list* %5, i32 %6) (points-to size: 0)
NODE  80:   store i32 0, i32* %retval, align 4 (points-to size: 0)
