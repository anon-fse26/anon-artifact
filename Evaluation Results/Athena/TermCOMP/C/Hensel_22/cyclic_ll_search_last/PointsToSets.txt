NODE   1: <1> PSNodeType::ENTRY (points-to size: 0)
NODE   2:   %retval = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %retval = alloca i32, align 4 + 0
NODE   3:   %n = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %n = alloca i32, align 4 + 0
NODE   4:   %head = alloca %struct.list*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %head = alloca %struct.list*, align 8 + 0
NODE   5:   store i32 0, i32* %retval, align 4 (points-to size: 0)
NODE   6:   %call = call i32 (...) @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE   7:   store i32 %call, i32* %n, align 4 (points-to size: 0)
NODE   8:   %0 = load i32, i32* %n, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE   9:   store i32 0, i32* %retval, align 4 (points-to size: 0)
NODE  10:   %3 = load i32, i32* %retval, align 4 (points-to size: 1)
    -> null + 0
NODE  11:   ret i32 %3 (points-to size: 0)
NODE  12:   %1 = load i32, i32* %n, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  13: <13> PSNodeType::CALL (points-to size: 0)
NODE  14: <14> PSNodeType::ENTRY (points-to size: 0)
NODE  15: i32 %n (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  16:   %n.addr = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %n.addr = alloca i32, align 4 + 0
NODE  17:   %curr = alloca %struct.list*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %curr = alloca %struct.list*, align 8 + 0
NODE  18:   %last = alloca %struct.list*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %last = alloca %struct.list*, align 8 + 0
NODE  19:   %tail = alloca %struct.list*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %tail = alloca %struct.list*, align 8 + 0
NODE  20:   %j = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %j = alloca i32, align 4 + 0
NODE  21:   store i32 %n, i32* %n.addr, align 4 (points-to size: 0)
NODE  22:   %call = call noalias i8* @malloc(i64 16) #3 [size: 16, heap: 1, zeroed: 0] (points-to size: 1)
    ->   %call = call noalias i8* @malloc(i64 16) #3 + 0
NODE  23:   %0 = bitcast i8* %call to %struct.list* (points-to size: 1)
    ->   %call = call noalias i8* @malloc(i64 16) #3 + 0
NODE  24:   store %struct.list* %0, %struct.list** %curr, align 8 (points-to size: 0)
NODE  25:   %1 = load %struct.list*, %struct.list** %curr, align 8 (points-to size: 1)
    ->   %call = call noalias i8* @malloc(i64 16) #3 + 0
NODE  26:   store %struct.list* %1, %struct.list** %last, align 8 (points-to size: 0)
NODE  27:   %2 = load %struct.list*, %struct.list** %curr, align 8 (points-to size: 1)
    ->   %call = call noalias i8* @malloc(i64 16) #3 + 0
NODE  28:   store %struct.list* %2, %struct.list** %tail, align 8 (points-to size: 0)
NODE  29:   %3 = load %struct.list*, %struct.list** %last, align 8 (points-to size: 1)
    ->   %call = call noalias i8* @malloc(i64 16) #3 + 0
NODE  30:   %value = getelementptr inbounds %struct.list, %struct.list* %3, i32  ... (points-to size: 1)
    ->   %call = call noalias i8* @malloc(i64 16) #3 + 0
NODE  31:   store i32 0, i32* %value, align 8 (points-to size: 0)
NODE  32:   store i32 1, i32* %j, align 4 (points-to size: 0)
NODE  33:   %4 = load i32, i32* %j, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  34:   %5 = load i32, i32* %n.addr, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  35:   %call1 = call noalias i8* @malloc(i64 16) #3 [size: 16, heap: 1, zeroed: 0] (points-to size: 1)
    ->   %call1 = call noalias i8* @malloc(i64 16) #3 + 0
NODE  36:   %6 = bitcast i8* %call1 to %struct.list* (points-to size: 1)
    ->   %call1 = call noalias i8* @malloc(i64 16) #3 + 0
NODE  37:   store %struct.list* %6, %struct.list** %curr, align 8 (points-to size: 0)
NODE  38:   %7 = load i32, i32* %j, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  39:   %8 = load %struct.list*, %struct.list** %curr, align 8 (points-to size: 1)
    ->   %call1 = call noalias i8* @malloc(i64 16) #3 + 0
NODE  40:   %value2 = getelementptr inbounds %struct.list, %struct.list* %8, i32 ... (points-to size: 1)
    ->   %call1 = call noalias i8* @malloc(i64 16) #3 + 0
NODE  41:   store i32 %7, i32* %value2, align 8 (points-to size: 0)
NODE  42:   %9 = load %struct.list*, %struct.list** %tail, align 8 (points-to size: 2)
    ->   %call1 = call noalias i8* @malloc(i64 16) #3 + 0
    ->   %call = call noalias i8* @malloc(i64 16) #3 + 0
NODE  43:   %10 = load %struct.list*, %struct.list** %curr, align 8 (points-to size: 1)
    ->   %call1 = call noalias i8* @malloc(i64 16) #3 + 0
NODE  44:   %next = getelementptr inbounds %struct.list, %struct.list* %10, i32  ... (points-to size: 1)
    ->   %call1 = call noalias i8* @malloc(i64 16) #3 + 8
NODE  45:   store %struct.list* %9, %struct.list** %next, align 8 (points-to size: 0)
NODE  46:   %11 = load %struct.list*, %struct.list** %curr, align 8 (points-to size: 1)
    ->   %call1 = call noalias i8* @malloc(i64 16) #3 + 0
NODE  47:   store %struct.list* %11, %struct.list** %tail, align 8 (points-to size: 0)
NODE  48:   %13 = load %struct.list*, %struct.list** %tail, align 8 (points-to size: 2)
    ->   %call1 = call noalias i8* @malloc(i64 16) #3 + 0
    ->   %call = call noalias i8* @malloc(i64 16) #3 + 0
NODE  49:   %14 = load %struct.list*, %struct.list** %last, align 8 (points-to size: 1)
    ->   %call = call noalias i8* @malloc(i64 16) #3 + 0
NODE  50:   %next3 = getelementptr inbounds %struct.list, %struct.list* %14, i32 ... (points-to size: 1)
    ->   %call = call noalias i8* @malloc(i64 16) #3 + 8
NODE  51:   store %struct.list* %13, %struct.list** %next3, align 8 (points-to size: 0)
NODE  52:   %15 = load %struct.list*, %struct.list** %curr, align 8 (points-to size: 2)
    ->   %call1 = call noalias i8* @malloc(i64 16) #3 + 0
    ->   %call = call noalias i8* @malloc(i64 16) #3 + 0
NODE  53:   ret %struct.list* %15 (points-to size: 2)
    ->   %call1 = call noalias i8* @malloc(i64 16) #3 + 0
    ->   %call = call noalias i8* @malloc(i64 16) #3 + 0
NODE  54:   %12 = load i32, i32* %j, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  55:   %inc = add nsw i32 %12, 1 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  56:   store i32 %inc, i32* %j, align 4 (points-to size: 0)
NODE  57: init_list (points-to size: 1)
    -> init_list + 0
NODE  58: main (points-to size: 1)
    -> main + 0
NODE  59:   %call1 = call %struct.list* @init_list(i32 %1) (points-to size: 2)
    ->   %call1 = call noalias i8* @malloc(i64 16) #3 + 0
    ->   %call = call noalias i8* @malloc(i64 16) #3 + 0
NODE  60:   store %struct.list* %call1, %struct.list** %head, align 8 (points-to size: 0)
NODE  61:   %2 = load %struct.list*, %struct.list** %head, align 8 (points-to size: 2)
    ->   %call1 = call noalias i8* @malloc(i64 16) #3 + 0
    ->   %call = call noalias i8* @malloc(i64 16) #3 + 0
NODE  62: <62> PSNodeType::CALL (points-to size: 0)
NODE  63: <63> PSNodeType::ENTRY (points-to size: 0)
NODE  64: %struct.list* %head (points-to size: 2)
    ->   %call1 = call noalias i8* @malloc(i64 16) #3 + 0
    ->   %call = call noalias i8* @malloc(i64 16) #3 + 0
NODE  65: i32 %m (points-to size: 1)
    -> null + 0
NODE  66:   %head.addr = alloca %struct.list*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %head.addr = alloca %struct.list*, align 8 + 0
NODE  67:   %m.addr = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %m.addr = alloca i32, align 4 + 0
NODE  68:   %curr = alloca %struct.list*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %curr = alloca %struct.list*, align 8 + 0
NODE  69:   store %struct.list* %head, %struct.list** %head.addr, align 8 (points-to size: 0)
NODE  70:   store i32 %m, i32* %m.addr, align 4 (points-to size: 0)
NODE  71:   %0 = load %struct.list*, %struct.list** %head.addr, align 8 (points-to size: 2)
    ->   %call1 = call noalias i8* @malloc(i64 16) #3 + 0
    ->   %call = call noalias i8* @malloc(i64 16) #3 + 0
NODE  72:   store %struct.list* %0, %struct.list** %curr, align 8 (points-to size: 0)
NODE  73:   %1 = load %struct.list*, %struct.list** %curr, align 8 (points-to size: 2)
    ->   %call1 = call noalias i8* @malloc(i64 16) #3 + 0
    ->   %call = call noalias i8* @malloc(i64 16) #3 + 0
NODE  74:   %value = getelementptr inbounds %struct.list, %struct.list* %1, i32  ... (points-to size: 2)
    ->   %call1 = call noalias i8* @malloc(i64 16) #3 + 0
    ->   %call = call noalias i8* @malloc(i64 16) #3 + 0
NODE  75:   %2 = load i32, i32* %value, align 8 (points-to size: 2)
    -> null + 0
    -> unknown + Offset::UNKNOWN
NODE  76:   %3 = load i32, i32* %m.addr, align 4 (points-to size: 1)
    -> null + 0
NODE  77:   %4 = load %struct.list*, %struct.list** %curr, align 8 (points-to size: 2)
    ->   %call1 = call noalias i8* @malloc(i64 16) #3 + 0
    ->   %call = call noalias i8* @malloc(i64 16) #3 + 0
NODE  78:   %next = getelementptr inbounds %struct.list, %struct.list* %4, i32 0 ... (points-to size: 2)
    ->   %call1 = call noalias i8* @malloc(i64 16) #3 + 8
    ->   %call = call noalias i8* @malloc(i64 16) #3 + 8
NODE  79:   %5 = load %struct.list*, %struct.list** %next, align 8 (points-to size: 2)
    ->   %call1 = call noalias i8* @malloc(i64 16) #3 + 0
    ->   %call = call noalias i8* @malloc(i64 16) #3 + 0
NODE  80:   store %struct.list* %5, %struct.list** %curr, align 8 (points-to size: 0)
NODE  81:   ret void (points-to size: 0)
NODE  82: search (points-to size: 1)
    -> search + 0
NODE  83:   call void @search(%struct.list* %2, i32 0) (points-to size: 0)
NODE  84:   store i32 0, i32* %retval, align 4 (points-to size: 0)
