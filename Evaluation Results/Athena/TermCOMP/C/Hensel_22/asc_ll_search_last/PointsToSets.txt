NODE   1: <1> PSNodeType::ENTRY (points-to size: 0)
NODE   2:   %retval = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %retval = alloca i32, align 4 + 0
NODE   3:   %n = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %n = alloca i32, align 4 + 0
NODE   4:   %head = alloca %struct.list*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %head = alloca %struct.list*, align 8 + 0
NODE   5:   store i32 0, i32* %retval, align 4 (points-to size: 0)
NODE   6:   %call = call i32 (...) @__VERIFIER_nondet_int() (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE   7:   store i32 %call, i32* %n, align 4 (points-to size: 0)
NODE   8:   %0 = load i32, i32* %n, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE   9:   store i32 0, i32* %retval, align 4 (points-to size: 0)
NODE  10:   %4 = load i32, i32* %retval, align 4 (points-to size: 1)
    -> null + 0
NODE  11:   ret i32 %4 (points-to size: 0)
NODE  12:   %1 = load i32, i32* %n, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  13: <13> PSNodeType::CALL (points-to size: 0)
NODE  14: <14> PSNodeType::ENTRY (points-to size: 0)
NODE  15: i32 %n (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  16:   %n.addr = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %n.addr = alloca i32, align 4 + 0
NODE  17:   %curr = alloca %struct.list*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %curr = alloca %struct.list*, align 8 + 0
NODE  18:   %tail = alloca %struct.list*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %tail = alloca %struct.list*, align 8 + 0
NODE  19:   %j = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %j = alloca i32, align 4 + 0
NODE  20:   store i32 %n, i32* %n.addr, align 4 (points-to size: 0)
NODE  21:   store %struct.list* null, %struct.list** %curr, align 8 (points-to size: 0)
NODE  22:   %0 = load %struct.list*, %struct.list** %curr, align 8 (points-to size: 1)
    -> null + 0
NODE  23:   store %struct.list* %0, %struct.list** %tail, align 8 (points-to size: 0)
NODE  24:   %1 = load i32, i32* %n.addr, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  25:   store i32 %1, i32* %j, align 4 (points-to size: 0)
NODE  26:   %2 = load i32, i32* %j, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  27:   %call = call noalias i8* @malloc(i64 16) #3 [size: 16, heap: 1, zeroed: 0] (points-to size: 1)
    ->   %call = call noalias i8* @malloc(i64 16) #3 + 0
NODE  28:   %3 = bitcast i8* %call to %struct.list* (points-to size: 1)
    ->   %call = call noalias i8* @malloc(i64 16) #3 + 0
NODE  29:   store %struct.list* %3, %struct.list** %curr, align 8 (points-to size: 0)
NODE  30:   %4 = load i32, i32* %j, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  31:   %5 = load %struct.list*, %struct.list** %curr, align 8 (points-to size: 1)
    ->   %call = call noalias i8* @malloc(i64 16) #3 + 0
NODE  32:   %value = getelementptr inbounds %struct.list, %struct.list* %5, i32  ... (points-to size: 1)
    ->   %call = call noalias i8* @malloc(i64 16) #3 + 0
NODE  33:   store i32 %4, i32* %value, align 8 (points-to size: 0)
NODE  34:   %6 = load %struct.list*, %struct.list** %tail, align 8 (points-to size: 2)
    ->   %call = call noalias i8* @malloc(i64 16) #3 + 0
    -> null + 0
NODE  35:   %7 = load %struct.list*, %struct.list** %curr, align 8 (points-to size: 1)
    ->   %call = call noalias i8* @malloc(i64 16) #3 + 0
NODE  36:   %next = getelementptr inbounds %struct.list, %struct.list* %7, i32 0 ... (points-to size: 1)
    ->   %call = call noalias i8* @malloc(i64 16) #3 + 8
NODE  37:   store %struct.list* %6, %struct.list** %next, align 8 (points-to size: 0)
NODE  38:   %8 = load %struct.list*, %struct.list** %curr, align 8 (points-to size: 1)
    ->   %call = call noalias i8* @malloc(i64 16) #3 + 0
NODE  39:   store %struct.list* %8, %struct.list** %tail, align 8 (points-to size: 0)
NODE  40:   %10 = load %struct.list*, %struct.list** %curr, align 8 (points-to size: 2)
    ->   %call = call noalias i8* @malloc(i64 16) #3 + 0
    -> null + 0
NODE  41:   ret %struct.list* %10 (points-to size: 2)
    ->   %call = call noalias i8* @malloc(i64 16) #3 + 0
    -> null + 0
NODE  42:   %9 = load i32, i32* %j, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  43:   %dec = add nsw i32 %9, -1 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  44:   store i32 %dec, i32* %j, align 4 (points-to size: 0)
NODE  45: init_list (points-to size: 1)
    -> init_list + 0
NODE  46: main (points-to size: 1)
    -> main + 0
NODE  47:   %call1 = call %struct.list* @init_list(i32 %1) (points-to size: 2)
    ->   %call = call noalias i8* @malloc(i64 16) #3 + 0
    -> null + 0
NODE  48:   store %struct.list* %call1, %struct.list** %head, align 8 (points-to size: 0)
NODE  49:   %2 = load %struct.list*, %struct.list** %head, align 8 (points-to size: 2)
    ->   %call = call noalias i8* @malloc(i64 16) #3 + 0
    -> null + 0
NODE  50:   %3 = load i32, i32* %n, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  51: <51> PSNodeType::CALL (points-to size: 0)
NODE  52: <52> PSNodeType::ENTRY (points-to size: 0)
NODE  53: %struct.list* %head (points-to size: 2)
    ->   %call = call noalias i8* @malloc(i64 16) #3 + 0
    -> null + 0
NODE  54: i32 %m (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  55:   %head.addr = alloca %struct.list*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %head.addr = alloca %struct.list*, align 8 + 0
NODE  56:   %m.addr = alloca i32, align 4 [size: 4, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %m.addr = alloca i32, align 4 + 0
NODE  57:   %curr = alloca %struct.list*, align 8 [size: 8, heap: 0, zeroed: 0] (points-to size: 1)
    ->   %curr = alloca %struct.list*, align 8 + 0
NODE  58:   store %struct.list* %head, %struct.list** %head.addr, align 8 (points-to size: 0)
NODE  59:   store i32 %m, i32* %m.addr, align 4 (points-to size: 0)
NODE  60:   %0 = load %struct.list*, %struct.list** %head.addr, align 8 (points-to size: 2)
    ->   %call = call noalias i8* @malloc(i64 16) #3 + 0
    -> null + 0
NODE  61:   store %struct.list* %0, %struct.list** %curr, align 8 (points-to size: 0)
NODE  62:   %1 = load %struct.list*, %struct.list** %curr, align 8 (points-to size: 2)
    ->   %call = call noalias i8* @malloc(i64 16) #3 + 0
    -> null + 0
NODE  63:   %value = getelementptr inbounds %struct.list, %struct.list* %1, i32  ... (points-to size: 2)
    ->   %call = call noalias i8* @malloc(i64 16) #3 + 0
    -> null + 0
NODE  64:   %2 = load i32, i32* %value, align 8 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  65:   %3 = load i32, i32* %m.addr, align 4 (points-to size: 1)
    -> unknown + Offset::UNKNOWN
NODE  66:   %4 = load %struct.list*, %struct.list** %curr, align 8 (points-to size: 2)
    ->   %call = call noalias i8* @malloc(i64 16) #3 + 0
    -> null + 0
NODE  67:   %next = getelementptr inbounds %struct.list, %struct.list* %4, i32 0 ... (points-to size: 2)
    ->   %call = call noalias i8* @malloc(i64 16) #3 + 8
    -> null + Offset::UNKNOWN
NODE  68:   %5 = load %struct.list*, %struct.list** %next, align 8 (points-to size: 2)
    ->   %call = call noalias i8* @malloc(i64 16) #3 + 0
    -> null + 0
NODE  69:   store %struct.list* %5, %struct.list** %curr, align 8 (points-to size: 0)
NODE  70:   ret void (points-to size: 0)
NODE  71: search (points-to size: 1)
    -> search + 0
NODE  72:   call void @search(%struct.list* %2, i32 %3) (points-to size: 0)
NODE  73:   store i32 0, i32* %retval, align 4 (points-to size: 0)
